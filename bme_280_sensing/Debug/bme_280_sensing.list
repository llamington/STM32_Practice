
bme_280_sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006114  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006294  08006294  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006294  08006294  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006294  08006294  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800629c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080062a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080062a8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f72  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017c7  00000000  00000000  00029fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001939a  00000000  00000000  0002cb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000874c  00000000  00000000  00045ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000921d0  00000000  00000000  0004e60e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e07de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002690  00000000  00000000  000e085c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061bc 	.word	0x080061bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080061bc 	.word	0x080061bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fef1 	bl	80011ec <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe49 	bl	80010ac <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fee3 	bl	80011ec <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fed9 	bl	80011ec <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe6b 	bl	8001124 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe61 	bl	8001124 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dadd>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464f      	mov	r7, r9
 8000474:	4646      	mov	r6, r8
 8000476:	46d6      	mov	lr, sl
 8000478:	000c      	movs	r4, r1
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	b5c0      	push	{r6, r7, lr}
 800047e:	0a49      	lsrs	r1, r1, #9
 8000480:	0f47      	lsrs	r7, r0, #29
 8000482:	005e      	lsls	r6, r3, #1
 8000484:	4339      	orrs	r1, r7
 8000486:	031f      	lsls	r7, r3, #12
 8000488:	0fdb      	lsrs	r3, r3, #31
 800048a:	469c      	mov	ip, r3
 800048c:	0065      	lsls	r5, r4, #1
 800048e:	0a7b      	lsrs	r3, r7, #9
 8000490:	0f57      	lsrs	r7, r2, #29
 8000492:	431f      	orrs	r7, r3
 8000494:	0d6d      	lsrs	r5, r5, #21
 8000496:	0fe4      	lsrs	r4, r4, #31
 8000498:	0d76      	lsrs	r6, r6, #21
 800049a:	46a1      	mov	r9, r4
 800049c:	00c0      	lsls	r0, r0, #3
 800049e:	46b8      	mov	r8, r7
 80004a0:	00d2      	lsls	r2, r2, #3
 80004a2:	1bab      	subs	r3, r5, r6
 80004a4:	4564      	cmp	r4, ip
 80004a6:	d07b      	beq.n	80005a0 <__aeabi_dadd+0x130>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dd5f      	ble.n	800056c <__aeabi_dadd+0xfc>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_dadd+0x42>
 80004b0:	e0a4      	b.n	80005fc <__aeabi_dadd+0x18c>
 80004b2:	003e      	movs	r6, r7
 80004b4:	4316      	orrs	r6, r2
 80004b6:	d100      	bne.n	80004ba <__aeabi_dadd+0x4a>
 80004b8:	e112      	b.n	80006e0 <__aeabi_dadd+0x270>
 80004ba:	1e5e      	subs	r6, r3, #1
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d000      	beq.n	80004c2 <__aeabi_dadd+0x52>
 80004c0:	e19e      	b.n	8000800 <__aeabi_dadd+0x390>
 80004c2:	1a87      	subs	r7, r0, r2
 80004c4:	4643      	mov	r3, r8
 80004c6:	42b8      	cmp	r0, r7
 80004c8:	4180      	sbcs	r0, r0
 80004ca:	2501      	movs	r5, #1
 80004cc:	1ac9      	subs	r1, r1, r3
 80004ce:	4240      	negs	r0, r0
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	020b      	lsls	r3, r1, #8
 80004d4:	d400      	bmi.n	80004d8 <__aeabi_dadd+0x68>
 80004d6:	e131      	b.n	800073c <__aeabi_dadd+0x2cc>
 80004d8:	0249      	lsls	r1, r1, #9
 80004da:	0a4e      	lsrs	r6, r1, #9
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x72>
 80004e0:	e16e      	b.n	80007c0 <__aeabi_dadd+0x350>
 80004e2:	0030      	movs	r0, r6
 80004e4:	f001 fd46 	bl	8001f74 <__clzsi2>
 80004e8:	0003      	movs	r3, r0
 80004ea:	3b08      	subs	r3, #8
 80004ec:	2b1f      	cmp	r3, #31
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x82>
 80004f0:	e161      	b.n	80007b6 <__aeabi_dadd+0x346>
 80004f2:	2220      	movs	r2, #32
 80004f4:	0039      	movs	r1, r7
 80004f6:	1ad2      	subs	r2, r2, r3
 80004f8:	409e      	lsls	r6, r3
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	409f      	lsls	r7, r3
 80004fe:	430e      	orrs	r6, r1
 8000500:	429d      	cmp	r5, r3
 8000502:	dd00      	ble.n	8000506 <__aeabi_dadd+0x96>
 8000504:	e151      	b.n	80007aa <__aeabi_dadd+0x33a>
 8000506:	1b5d      	subs	r5, r3, r5
 8000508:	1c6b      	adds	r3, r5, #1
 800050a:	2b1f      	cmp	r3, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0xa0>
 800050e:	e17c      	b.n	800080a <__aeabi_dadd+0x39a>
 8000510:	2120      	movs	r1, #32
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	003d      	movs	r5, r7
 8000516:	0030      	movs	r0, r6
 8000518:	408f      	lsls	r7, r1
 800051a:	4088      	lsls	r0, r1
 800051c:	40dd      	lsrs	r5, r3
 800051e:	1e79      	subs	r1, r7, #1
 8000520:	418f      	sbcs	r7, r1
 8000522:	0031      	movs	r1, r6
 8000524:	2207      	movs	r2, #7
 8000526:	4328      	orrs	r0, r5
 8000528:	40d9      	lsrs	r1, r3
 800052a:	2500      	movs	r5, #0
 800052c:	4307      	orrs	r7, r0
 800052e:	403a      	ands	r2, r7
 8000530:	2a00      	cmp	r2, #0
 8000532:	d009      	beq.n	8000548 <__aeabi_dadd+0xd8>
 8000534:	230f      	movs	r3, #15
 8000536:	403b      	ands	r3, r7
 8000538:	2b04      	cmp	r3, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dadd+0xd8>
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	42bb      	cmp	r3, r7
 8000540:	41bf      	sbcs	r7, r7
 8000542:	427f      	negs	r7, r7
 8000544:	19c9      	adds	r1, r1, r7
 8000546:	001f      	movs	r7, r3
 8000548:	020b      	lsls	r3, r1, #8
 800054a:	d400      	bmi.n	800054e <__aeabi_dadd+0xde>
 800054c:	e226      	b.n	800099c <__aeabi_dadd+0x52c>
 800054e:	1c6a      	adds	r2, r5, #1
 8000550:	4bc6      	ldr	r3, [pc, #792]	; (800086c <__aeabi_dadd+0x3fc>)
 8000552:	0555      	lsls	r5, r2, #21
 8000554:	0d6d      	lsrs	r5, r5, #21
 8000556:	429a      	cmp	r2, r3
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xec>
 800055a:	e106      	b.n	800076a <__aeabi_dadd+0x2fa>
 800055c:	4ac4      	ldr	r2, [pc, #784]	; (8000870 <__aeabi_dadd+0x400>)
 800055e:	08ff      	lsrs	r7, r7, #3
 8000560:	400a      	ands	r2, r1
 8000562:	0753      	lsls	r3, r2, #29
 8000564:	0252      	lsls	r2, r2, #9
 8000566:	433b      	orrs	r3, r7
 8000568:	0b12      	lsrs	r2, r2, #12
 800056a:	e08e      	b.n	800068a <__aeabi_dadd+0x21a>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x102>
 8000570:	e0b8      	b.n	80006e4 <__aeabi_dadd+0x274>
 8000572:	1c6b      	adds	r3, r5, #1
 8000574:	055b      	lsls	r3, r3, #21
 8000576:	0d5b      	lsrs	r3, r3, #21
 8000578:	2b01      	cmp	r3, #1
 800057a:	dc00      	bgt.n	800057e <__aeabi_dadd+0x10e>
 800057c:	e130      	b.n	80007e0 <__aeabi_dadd+0x370>
 800057e:	1a87      	subs	r7, r0, r2
 8000580:	4643      	mov	r3, r8
 8000582:	42b8      	cmp	r0, r7
 8000584:	41b6      	sbcs	r6, r6
 8000586:	1acb      	subs	r3, r1, r3
 8000588:	4276      	negs	r6, r6
 800058a:	1b9e      	subs	r6, r3, r6
 800058c:	0233      	lsls	r3, r6, #8
 800058e:	d500      	bpl.n	8000592 <__aeabi_dadd+0x122>
 8000590:	e14c      	b.n	800082c <__aeabi_dadd+0x3bc>
 8000592:	003b      	movs	r3, r7
 8000594:	4333      	orrs	r3, r6
 8000596:	d1a1      	bne.n	80004dc <__aeabi_dadd+0x6c>
 8000598:	2200      	movs	r2, #0
 800059a:	2400      	movs	r4, #0
 800059c:	2500      	movs	r5, #0
 800059e:	e070      	b.n	8000682 <__aeabi_dadd+0x212>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dc00      	bgt.n	80005a6 <__aeabi_dadd+0x136>
 80005a4:	e0e5      	b.n	8000772 <__aeabi_dadd+0x302>
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_dadd+0x13c>
 80005aa:	e083      	b.n	80006b4 <__aeabi_dadd+0x244>
 80005ac:	4eaf      	ldr	r6, [pc, #700]	; (800086c <__aeabi_dadd+0x3fc>)
 80005ae:	42b5      	cmp	r5, r6
 80005b0:	d060      	beq.n	8000674 <__aeabi_dadd+0x204>
 80005b2:	2680      	movs	r6, #128	; 0x80
 80005b4:	0436      	lsls	r6, r6, #16
 80005b6:	4337      	orrs	r7, r6
 80005b8:	46b8      	mov	r8, r7
 80005ba:	2b38      	cmp	r3, #56	; 0x38
 80005bc:	dc00      	bgt.n	80005c0 <__aeabi_dadd+0x150>
 80005be:	e13e      	b.n	800083e <__aeabi_dadd+0x3ce>
 80005c0:	4643      	mov	r3, r8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	001f      	movs	r7, r3
 80005c6:	1e7a      	subs	r2, r7, #1
 80005c8:	4197      	sbcs	r7, r2
 80005ca:	183f      	adds	r7, r7, r0
 80005cc:	4287      	cmp	r7, r0
 80005ce:	4180      	sbcs	r0, r0
 80005d0:	4240      	negs	r0, r0
 80005d2:	1809      	adds	r1, r1, r0
 80005d4:	020b      	lsls	r3, r1, #8
 80005d6:	d400      	bmi.n	80005da <__aeabi_dadd+0x16a>
 80005d8:	e0b0      	b.n	800073c <__aeabi_dadd+0x2cc>
 80005da:	4ba4      	ldr	r3, [pc, #656]	; (800086c <__aeabi_dadd+0x3fc>)
 80005dc:	3501      	adds	r5, #1
 80005de:	429d      	cmp	r5, r3
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x174>
 80005e2:	e0c3      	b.n	800076c <__aeabi_dadd+0x2fc>
 80005e4:	4aa2      	ldr	r2, [pc, #648]	; (8000870 <__aeabi_dadd+0x400>)
 80005e6:	087b      	lsrs	r3, r7, #1
 80005e8:	400a      	ands	r2, r1
 80005ea:	2101      	movs	r1, #1
 80005ec:	400f      	ands	r7, r1
 80005ee:	431f      	orrs	r7, r3
 80005f0:	0851      	lsrs	r1, r2, #1
 80005f2:	07d3      	lsls	r3, r2, #31
 80005f4:	2207      	movs	r2, #7
 80005f6:	431f      	orrs	r7, r3
 80005f8:	403a      	ands	r2, r7
 80005fa:	e799      	b.n	8000530 <__aeabi_dadd+0xc0>
 80005fc:	4e9b      	ldr	r6, [pc, #620]	; (800086c <__aeabi_dadd+0x3fc>)
 80005fe:	42b5      	cmp	r5, r6
 8000600:	d038      	beq.n	8000674 <__aeabi_dadd+0x204>
 8000602:	2680      	movs	r6, #128	; 0x80
 8000604:	0436      	lsls	r6, r6, #16
 8000606:	4337      	orrs	r7, r6
 8000608:	46b8      	mov	r8, r7
 800060a:	2b38      	cmp	r3, #56	; 0x38
 800060c:	dd00      	ble.n	8000610 <__aeabi_dadd+0x1a0>
 800060e:	e0dc      	b.n	80007ca <__aeabi_dadd+0x35a>
 8000610:	2b1f      	cmp	r3, #31
 8000612:	dc00      	bgt.n	8000616 <__aeabi_dadd+0x1a6>
 8000614:	e130      	b.n	8000878 <__aeabi_dadd+0x408>
 8000616:	001e      	movs	r6, r3
 8000618:	4647      	mov	r7, r8
 800061a:	3e20      	subs	r6, #32
 800061c:	40f7      	lsrs	r7, r6
 800061e:	46bc      	mov	ip, r7
 8000620:	2b20      	cmp	r3, #32
 8000622:	d004      	beq.n	800062e <__aeabi_dadd+0x1be>
 8000624:	2640      	movs	r6, #64	; 0x40
 8000626:	1af3      	subs	r3, r6, r3
 8000628:	4646      	mov	r6, r8
 800062a:	409e      	lsls	r6, r3
 800062c:	4332      	orrs	r2, r6
 800062e:	0017      	movs	r7, r2
 8000630:	4663      	mov	r3, ip
 8000632:	1e7a      	subs	r2, r7, #1
 8000634:	4197      	sbcs	r7, r2
 8000636:	431f      	orrs	r7, r3
 8000638:	e0cc      	b.n	80007d4 <__aeabi_dadd+0x364>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x1d0>
 800063e:	e204      	b.n	8000a4a <__aeabi_dadd+0x5da>
 8000640:	4643      	mov	r3, r8
 8000642:	4313      	orrs	r3, r2
 8000644:	d100      	bne.n	8000648 <__aeabi_dadd+0x1d8>
 8000646:	e159      	b.n	80008fc <__aeabi_dadd+0x48c>
 8000648:	074b      	lsls	r3, r1, #29
 800064a:	08c0      	lsrs	r0, r0, #3
 800064c:	4318      	orrs	r0, r3
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	08c9      	lsrs	r1, r1, #3
 8000652:	031b      	lsls	r3, r3, #12
 8000654:	4219      	tst	r1, r3
 8000656:	d008      	beq.n	800066a <__aeabi_dadd+0x1fa>
 8000658:	4645      	mov	r5, r8
 800065a:	08ed      	lsrs	r5, r5, #3
 800065c:	421d      	tst	r5, r3
 800065e:	d104      	bne.n	800066a <__aeabi_dadd+0x1fa>
 8000660:	4643      	mov	r3, r8
 8000662:	08d0      	lsrs	r0, r2, #3
 8000664:	0759      	lsls	r1, r3, #29
 8000666:	4308      	orrs	r0, r1
 8000668:	0029      	movs	r1, r5
 800066a:	0f42      	lsrs	r2, r0, #29
 800066c:	00c9      	lsls	r1, r1, #3
 800066e:	4d7f      	ldr	r5, [pc, #508]	; (800086c <__aeabi_dadd+0x3fc>)
 8000670:	4311      	orrs	r1, r2
 8000672:	00c0      	lsls	r0, r0, #3
 8000674:	074b      	lsls	r3, r1, #29
 8000676:	08ca      	lsrs	r2, r1, #3
 8000678:	497c      	ldr	r1, [pc, #496]	; (800086c <__aeabi_dadd+0x3fc>)
 800067a:	08c0      	lsrs	r0, r0, #3
 800067c:	4303      	orrs	r3, r0
 800067e:	428d      	cmp	r5, r1
 8000680:	d068      	beq.n	8000754 <__aeabi_dadd+0x2e4>
 8000682:	0312      	lsls	r2, r2, #12
 8000684:	056d      	lsls	r5, r5, #21
 8000686:	0b12      	lsrs	r2, r2, #12
 8000688:	0d6d      	lsrs	r5, r5, #21
 800068a:	2100      	movs	r1, #0
 800068c:	0312      	lsls	r2, r2, #12
 800068e:	0018      	movs	r0, r3
 8000690:	0b13      	lsrs	r3, r2, #12
 8000692:	0d0a      	lsrs	r2, r1, #20
 8000694:	0512      	lsls	r2, r2, #20
 8000696:	431a      	orrs	r2, r3
 8000698:	4b76      	ldr	r3, [pc, #472]	; (8000874 <__aeabi_dadd+0x404>)
 800069a:	052d      	lsls	r5, r5, #20
 800069c:	4013      	ands	r3, r2
 800069e:	432b      	orrs	r3, r5
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	07e4      	lsls	r4, r4, #31
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	4323      	orrs	r3, r4
 80006a8:	0019      	movs	r1, r3
 80006aa:	bc1c      	pop	{r2, r3, r4}
 80006ac:	4690      	mov	r8, r2
 80006ae:	4699      	mov	r9, r3
 80006b0:	46a2      	mov	sl, r4
 80006b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b4:	003e      	movs	r6, r7
 80006b6:	4316      	orrs	r6, r2
 80006b8:	d012      	beq.n	80006e0 <__aeabi_dadd+0x270>
 80006ba:	1e5e      	subs	r6, r3, #1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_dadd+0x252>
 80006c0:	e100      	b.n	80008c4 <__aeabi_dadd+0x454>
 80006c2:	1887      	adds	r7, r0, r2
 80006c4:	4287      	cmp	r7, r0
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4441      	add	r1, r8
 80006ca:	4240      	negs	r0, r0
 80006cc:	1809      	adds	r1, r1, r0
 80006ce:	2501      	movs	r5, #1
 80006d0:	020b      	lsls	r3, r1, #8
 80006d2:	d533      	bpl.n	800073c <__aeabi_dadd+0x2cc>
 80006d4:	2502      	movs	r5, #2
 80006d6:	e785      	b.n	80005e4 <__aeabi_dadd+0x174>
 80006d8:	4664      	mov	r4, ip
 80006da:	0033      	movs	r3, r6
 80006dc:	4641      	mov	r1, r8
 80006de:	0010      	movs	r0, r2
 80006e0:	001d      	movs	r5, r3
 80006e2:	e7c7      	b.n	8000674 <__aeabi_dadd+0x204>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x27a>
 80006e8:	e0da      	b.n	80008a0 <__aeabi_dadd+0x430>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4304      	orrs	r4, r0
 80006ee:	d0f3      	beq.n	80006d8 <__aeabi_dadd+0x268>
 80006f0:	1c5c      	adds	r4, r3, #1
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x286>
 80006f4:	e19f      	b.n	8000a36 <__aeabi_dadd+0x5c6>
 80006f6:	4c5d      	ldr	r4, [pc, #372]	; (800086c <__aeabi_dadd+0x3fc>)
 80006f8:	42a6      	cmp	r6, r4
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x28e>
 80006fc:	e12f      	b.n	800095e <__aeabi_dadd+0x4ee>
 80006fe:	43db      	mvns	r3, r3
 8000700:	2b38      	cmp	r3, #56	; 0x38
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0x296>
 8000704:	e166      	b.n	80009d4 <__aeabi_dadd+0x564>
 8000706:	2b1f      	cmp	r3, #31
 8000708:	dd00      	ble.n	800070c <__aeabi_dadd+0x29c>
 800070a:	e183      	b.n	8000a14 <__aeabi_dadd+0x5a4>
 800070c:	2420      	movs	r4, #32
 800070e:	0005      	movs	r5, r0
 8000710:	1ae4      	subs	r4, r4, r3
 8000712:	000f      	movs	r7, r1
 8000714:	40dd      	lsrs	r5, r3
 8000716:	40d9      	lsrs	r1, r3
 8000718:	40a0      	lsls	r0, r4
 800071a:	4643      	mov	r3, r8
 800071c:	40a7      	lsls	r7, r4
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	1e44      	subs	r4, r0, #1
 8000722:	41a0      	sbcs	r0, r4
 8000724:	4698      	mov	r8, r3
 8000726:	432f      	orrs	r7, r5
 8000728:	4338      	orrs	r0, r7
 800072a:	1a17      	subs	r7, r2, r0
 800072c:	42ba      	cmp	r2, r7
 800072e:	4192      	sbcs	r2, r2
 8000730:	4643      	mov	r3, r8
 8000732:	4252      	negs	r2, r2
 8000734:	1a99      	subs	r1, r3, r2
 8000736:	4664      	mov	r4, ip
 8000738:	0035      	movs	r5, r6
 800073a:	e6ca      	b.n	80004d2 <__aeabi_dadd+0x62>
 800073c:	2207      	movs	r2, #7
 800073e:	403a      	ands	r2, r7
 8000740:	2a00      	cmp	r2, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x2d6>
 8000744:	e6f6      	b.n	8000534 <__aeabi_dadd+0xc4>
 8000746:	074b      	lsls	r3, r1, #29
 8000748:	08ca      	lsrs	r2, r1, #3
 800074a:	4948      	ldr	r1, [pc, #288]	; (800086c <__aeabi_dadd+0x3fc>)
 800074c:	08ff      	lsrs	r7, r7, #3
 800074e:	433b      	orrs	r3, r7
 8000750:	428d      	cmp	r5, r1
 8000752:	d196      	bne.n	8000682 <__aeabi_dadd+0x212>
 8000754:	0019      	movs	r1, r3
 8000756:	4311      	orrs	r1, r2
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x2ec>
 800075a:	e19e      	b.n	8000a9a <__aeabi_dadd+0x62a>
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0309      	lsls	r1, r1, #12
 8000760:	430a      	orrs	r2, r1
 8000762:	0312      	lsls	r2, r2, #12
 8000764:	0b12      	lsrs	r2, r2, #12
 8000766:	4d41      	ldr	r5, [pc, #260]	; (800086c <__aeabi_dadd+0x3fc>)
 8000768:	e78f      	b.n	800068a <__aeabi_dadd+0x21a>
 800076a:	0015      	movs	r5, r2
 800076c:	2200      	movs	r2, #0
 800076e:	2300      	movs	r3, #0
 8000770:	e78b      	b.n	800068a <__aeabi_dadd+0x21a>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d000      	beq.n	8000778 <__aeabi_dadd+0x308>
 8000776:	e0c7      	b.n	8000908 <__aeabi_dadd+0x498>
 8000778:	1c6b      	adds	r3, r5, #1
 800077a:	055f      	lsls	r7, r3, #21
 800077c:	0d7f      	lsrs	r7, r7, #21
 800077e:	2f01      	cmp	r7, #1
 8000780:	dc00      	bgt.n	8000784 <__aeabi_dadd+0x314>
 8000782:	e0f1      	b.n	8000968 <__aeabi_dadd+0x4f8>
 8000784:	4d39      	ldr	r5, [pc, #228]	; (800086c <__aeabi_dadd+0x3fc>)
 8000786:	42ab      	cmp	r3, r5
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x31c>
 800078a:	e0b9      	b.n	8000900 <__aeabi_dadd+0x490>
 800078c:	1885      	adds	r5, r0, r2
 800078e:	000a      	movs	r2, r1
 8000790:	4285      	cmp	r5, r0
 8000792:	4189      	sbcs	r1, r1
 8000794:	4442      	add	r2, r8
 8000796:	4249      	negs	r1, r1
 8000798:	1851      	adds	r1, r2, r1
 800079a:	2207      	movs	r2, #7
 800079c:	07cf      	lsls	r7, r1, #31
 800079e:	086d      	lsrs	r5, r5, #1
 80007a0:	432f      	orrs	r7, r5
 80007a2:	0849      	lsrs	r1, r1, #1
 80007a4:	403a      	ands	r2, r7
 80007a6:	001d      	movs	r5, r3
 80007a8:	e6c2      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007aa:	2207      	movs	r2, #7
 80007ac:	4930      	ldr	r1, [pc, #192]	; (8000870 <__aeabi_dadd+0x400>)
 80007ae:	1aed      	subs	r5, r5, r3
 80007b0:	4031      	ands	r1, r6
 80007b2:	403a      	ands	r2, r7
 80007b4:	e6bc      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007b6:	003e      	movs	r6, r7
 80007b8:	3828      	subs	r0, #40	; 0x28
 80007ba:	4086      	lsls	r6, r0
 80007bc:	2700      	movs	r7, #0
 80007be:	e69f      	b.n	8000500 <__aeabi_dadd+0x90>
 80007c0:	0038      	movs	r0, r7
 80007c2:	f001 fbd7 	bl	8001f74 <__clzsi2>
 80007c6:	3020      	adds	r0, #32
 80007c8:	e68e      	b.n	80004e8 <__aeabi_dadd+0x78>
 80007ca:	4643      	mov	r3, r8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	001f      	movs	r7, r3
 80007d0:	1e7a      	subs	r2, r7, #1
 80007d2:	4197      	sbcs	r7, r2
 80007d4:	1bc7      	subs	r7, r0, r7
 80007d6:	42b8      	cmp	r0, r7
 80007d8:	4180      	sbcs	r0, r0
 80007da:	4240      	negs	r0, r0
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	e678      	b.n	80004d2 <__aeabi_dadd+0x62>
 80007e0:	000e      	movs	r6, r1
 80007e2:	003b      	movs	r3, r7
 80007e4:	4306      	orrs	r6, r0
 80007e6:	4313      	orrs	r3, r2
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d161      	bne.n	80008b0 <__aeabi_dadd+0x440>
 80007ec:	2e00      	cmp	r6, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x382>
 80007f0:	e0f4      	b.n	80009dc <__aeabi_dadd+0x56c>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x388>
 80007f6:	e11b      	b.n	8000a30 <__aeabi_dadd+0x5c0>
 80007f8:	4664      	mov	r4, ip
 80007fa:	0039      	movs	r1, r7
 80007fc:	0010      	movs	r0, r2
 80007fe:	e739      	b.n	8000674 <__aeabi_dadd+0x204>
 8000800:	4f1a      	ldr	r7, [pc, #104]	; (800086c <__aeabi_dadd+0x3fc>)
 8000802:	42bb      	cmp	r3, r7
 8000804:	d07a      	beq.n	80008fc <__aeabi_dadd+0x48c>
 8000806:	0033      	movs	r3, r6
 8000808:	e6ff      	b.n	800060a <__aeabi_dadd+0x19a>
 800080a:	0030      	movs	r0, r6
 800080c:	3d1f      	subs	r5, #31
 800080e:	40e8      	lsrs	r0, r5
 8000810:	2b20      	cmp	r3, #32
 8000812:	d003      	beq.n	800081c <__aeabi_dadd+0x3ac>
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	1acb      	subs	r3, r1, r3
 8000818:	409e      	lsls	r6, r3
 800081a:	4337      	orrs	r7, r6
 800081c:	1e7b      	subs	r3, r7, #1
 800081e:	419f      	sbcs	r7, r3
 8000820:	2207      	movs	r2, #7
 8000822:	4307      	orrs	r7, r0
 8000824:	403a      	ands	r2, r7
 8000826:	2100      	movs	r1, #0
 8000828:	2500      	movs	r5, #0
 800082a:	e789      	b.n	8000740 <__aeabi_dadd+0x2d0>
 800082c:	1a17      	subs	r7, r2, r0
 800082e:	4643      	mov	r3, r8
 8000830:	42ba      	cmp	r2, r7
 8000832:	41b6      	sbcs	r6, r6
 8000834:	1a59      	subs	r1, r3, r1
 8000836:	4276      	negs	r6, r6
 8000838:	1b8e      	subs	r6, r1, r6
 800083a:	4664      	mov	r4, ip
 800083c:	e64e      	b.n	80004dc <__aeabi_dadd+0x6c>
 800083e:	2b1f      	cmp	r3, #31
 8000840:	dd00      	ble.n	8000844 <__aeabi_dadd+0x3d4>
 8000842:	e0ad      	b.n	80009a0 <__aeabi_dadd+0x530>
 8000844:	2620      	movs	r6, #32
 8000846:	4647      	mov	r7, r8
 8000848:	1af6      	subs	r6, r6, r3
 800084a:	40b7      	lsls	r7, r6
 800084c:	46b9      	mov	r9, r7
 800084e:	0017      	movs	r7, r2
 8000850:	46b2      	mov	sl, r6
 8000852:	40df      	lsrs	r7, r3
 8000854:	464e      	mov	r6, r9
 8000856:	433e      	orrs	r6, r7
 8000858:	0037      	movs	r7, r6
 800085a:	4656      	mov	r6, sl
 800085c:	40b2      	lsls	r2, r6
 800085e:	1e56      	subs	r6, r2, #1
 8000860:	41b2      	sbcs	r2, r6
 8000862:	4317      	orrs	r7, r2
 8000864:	4642      	mov	r2, r8
 8000866:	40da      	lsrs	r2, r3
 8000868:	1889      	adds	r1, r1, r2
 800086a:	e6ae      	b.n	80005ca <__aeabi_dadd+0x15a>
 800086c:	000007ff 	.word	0x000007ff
 8000870:	ff7fffff 	.word	0xff7fffff
 8000874:	800fffff 	.word	0x800fffff
 8000878:	2620      	movs	r6, #32
 800087a:	4647      	mov	r7, r8
 800087c:	1af6      	subs	r6, r6, r3
 800087e:	40b7      	lsls	r7, r6
 8000880:	46b9      	mov	r9, r7
 8000882:	0017      	movs	r7, r2
 8000884:	46b2      	mov	sl, r6
 8000886:	40df      	lsrs	r7, r3
 8000888:	464e      	mov	r6, r9
 800088a:	433e      	orrs	r6, r7
 800088c:	0037      	movs	r7, r6
 800088e:	4656      	mov	r6, sl
 8000890:	40b2      	lsls	r2, r6
 8000892:	1e56      	subs	r6, r2, #1
 8000894:	41b2      	sbcs	r2, r6
 8000896:	4317      	orrs	r7, r2
 8000898:	4642      	mov	r2, r8
 800089a:	40da      	lsrs	r2, r3
 800089c:	1a89      	subs	r1, r1, r2
 800089e:	e799      	b.n	80007d4 <__aeabi_dadd+0x364>
 80008a0:	4c7f      	ldr	r4, [pc, #508]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008a2:	42a6      	cmp	r6, r4
 80008a4:	d05b      	beq.n	800095e <__aeabi_dadd+0x4ee>
 80008a6:	2480      	movs	r4, #128	; 0x80
 80008a8:	0424      	lsls	r4, r4, #16
 80008aa:	425b      	negs	r3, r3
 80008ac:	4321      	orrs	r1, r4
 80008ae:	e727      	b.n	8000700 <__aeabi_dadd+0x290>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d10c      	bne.n	80008ce <__aeabi_dadd+0x45e>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x44a>
 80008b8:	e0cb      	b.n	8000a52 <__aeabi_dadd+0x5e2>
 80008ba:	4664      	mov	r4, ip
 80008bc:	0039      	movs	r1, r7
 80008be:	0010      	movs	r0, r2
 80008c0:	4d77      	ldr	r5, [pc, #476]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008c2:	e6d7      	b.n	8000674 <__aeabi_dadd+0x204>
 80008c4:	4f76      	ldr	r7, [pc, #472]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008c6:	42bb      	cmp	r3, r7
 80008c8:	d018      	beq.n	80008fc <__aeabi_dadd+0x48c>
 80008ca:	0033      	movs	r3, r6
 80008cc:	e675      	b.n	80005ba <__aeabi_dadd+0x14a>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d014      	beq.n	80008fc <__aeabi_dadd+0x48c>
 80008d2:	074b      	lsls	r3, r1, #29
 80008d4:	08c0      	lsrs	r0, r0, #3
 80008d6:	4318      	orrs	r0, r3
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	08c9      	lsrs	r1, r1, #3
 80008dc:	031b      	lsls	r3, r3, #12
 80008de:	4219      	tst	r1, r3
 80008e0:	d007      	beq.n	80008f2 <__aeabi_dadd+0x482>
 80008e2:	08fc      	lsrs	r4, r7, #3
 80008e4:	421c      	tst	r4, r3
 80008e6:	d104      	bne.n	80008f2 <__aeabi_dadd+0x482>
 80008e8:	0779      	lsls	r1, r7, #29
 80008ea:	08d0      	lsrs	r0, r2, #3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	46e1      	mov	r9, ip
 80008f0:	0021      	movs	r1, r4
 80008f2:	464c      	mov	r4, r9
 80008f4:	0f42      	lsrs	r2, r0, #29
 80008f6:	00c9      	lsls	r1, r1, #3
 80008f8:	4311      	orrs	r1, r2
 80008fa:	00c0      	lsls	r0, r0, #3
 80008fc:	4d68      	ldr	r5, [pc, #416]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008fe:	e6b9      	b.n	8000674 <__aeabi_dadd+0x204>
 8000900:	001d      	movs	r5, r3
 8000902:	2200      	movs	r2, #0
 8000904:	2300      	movs	r3, #0
 8000906:	e6c0      	b.n	800068a <__aeabi_dadd+0x21a>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d15b      	bne.n	80009c4 <__aeabi_dadd+0x554>
 800090c:	000d      	movs	r5, r1
 800090e:	4305      	orrs	r5, r0
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x4a4>
 8000912:	e6e2      	b.n	80006da <__aeabi_dadd+0x26a>
 8000914:	1c5d      	adds	r5, r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x4aa>
 8000918:	e0b0      	b.n	8000a7c <__aeabi_dadd+0x60c>
 800091a:	4d61      	ldr	r5, [pc, #388]	; (8000aa0 <__aeabi_dadd+0x630>)
 800091c:	42ae      	cmp	r6, r5
 800091e:	d01f      	beq.n	8000960 <__aeabi_dadd+0x4f0>
 8000920:	43db      	mvns	r3, r3
 8000922:	2b38      	cmp	r3, #56	; 0x38
 8000924:	dc71      	bgt.n	8000a0a <__aeabi_dadd+0x59a>
 8000926:	2b1f      	cmp	r3, #31
 8000928:	dd00      	ble.n	800092c <__aeabi_dadd+0x4bc>
 800092a:	e096      	b.n	8000a5a <__aeabi_dadd+0x5ea>
 800092c:	2520      	movs	r5, #32
 800092e:	000f      	movs	r7, r1
 8000930:	1aed      	subs	r5, r5, r3
 8000932:	40af      	lsls	r7, r5
 8000934:	46b9      	mov	r9, r7
 8000936:	0007      	movs	r7, r0
 8000938:	46aa      	mov	sl, r5
 800093a:	40df      	lsrs	r7, r3
 800093c:	464d      	mov	r5, r9
 800093e:	433d      	orrs	r5, r7
 8000940:	002f      	movs	r7, r5
 8000942:	4655      	mov	r5, sl
 8000944:	40a8      	lsls	r0, r5
 8000946:	40d9      	lsrs	r1, r3
 8000948:	1e45      	subs	r5, r0, #1
 800094a:	41a8      	sbcs	r0, r5
 800094c:	4488      	add	r8, r1
 800094e:	4307      	orrs	r7, r0
 8000950:	18bf      	adds	r7, r7, r2
 8000952:	4297      	cmp	r7, r2
 8000954:	4192      	sbcs	r2, r2
 8000956:	4251      	negs	r1, r2
 8000958:	4441      	add	r1, r8
 800095a:	0035      	movs	r5, r6
 800095c:	e63a      	b.n	80005d4 <__aeabi_dadd+0x164>
 800095e:	4664      	mov	r4, ip
 8000960:	0035      	movs	r5, r6
 8000962:	4641      	mov	r1, r8
 8000964:	0010      	movs	r0, r2
 8000966:	e685      	b.n	8000674 <__aeabi_dadd+0x204>
 8000968:	000b      	movs	r3, r1
 800096a:	4303      	orrs	r3, r0
 800096c:	2d00      	cmp	r5, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x502>
 8000970:	e663      	b.n	800063a <__aeabi_dadd+0x1ca>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f5      	beq.n	8000962 <__aeabi_dadd+0x4f2>
 8000976:	4643      	mov	r3, r8
 8000978:	4313      	orrs	r3, r2
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0x50e>
 800097c:	e67a      	b.n	8000674 <__aeabi_dadd+0x204>
 800097e:	1887      	adds	r7, r0, r2
 8000980:	4287      	cmp	r7, r0
 8000982:	4180      	sbcs	r0, r0
 8000984:	2207      	movs	r2, #7
 8000986:	4441      	add	r1, r8
 8000988:	4240      	negs	r0, r0
 800098a:	1809      	adds	r1, r1, r0
 800098c:	403a      	ands	r2, r7
 800098e:	020b      	lsls	r3, r1, #8
 8000990:	d400      	bmi.n	8000994 <__aeabi_dadd+0x524>
 8000992:	e6d5      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <__aeabi_dadd+0x634>)
 8000996:	3501      	adds	r5, #1
 8000998:	4019      	ands	r1, r3
 800099a:	e5c9      	b.n	8000530 <__aeabi_dadd+0xc0>
 800099c:	0038      	movs	r0, r7
 800099e:	e669      	b.n	8000674 <__aeabi_dadd+0x204>
 80009a0:	001e      	movs	r6, r3
 80009a2:	4647      	mov	r7, r8
 80009a4:	3e20      	subs	r6, #32
 80009a6:	40f7      	lsrs	r7, r6
 80009a8:	46bc      	mov	ip, r7
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d004      	beq.n	80009b8 <__aeabi_dadd+0x548>
 80009ae:	2640      	movs	r6, #64	; 0x40
 80009b0:	1af3      	subs	r3, r6, r3
 80009b2:	4646      	mov	r6, r8
 80009b4:	409e      	lsls	r6, r3
 80009b6:	4332      	orrs	r2, r6
 80009b8:	0017      	movs	r7, r2
 80009ba:	4663      	mov	r3, ip
 80009bc:	1e7a      	subs	r2, r7, #1
 80009be:	4197      	sbcs	r7, r2
 80009c0:	431f      	orrs	r7, r3
 80009c2:	e602      	b.n	80005ca <__aeabi_dadd+0x15a>
 80009c4:	4d36      	ldr	r5, [pc, #216]	; (8000aa0 <__aeabi_dadd+0x630>)
 80009c6:	42ae      	cmp	r6, r5
 80009c8:	d0ca      	beq.n	8000960 <__aeabi_dadd+0x4f0>
 80009ca:	2580      	movs	r5, #128	; 0x80
 80009cc:	042d      	lsls	r5, r5, #16
 80009ce:	425b      	negs	r3, r3
 80009d0:	4329      	orrs	r1, r5
 80009d2:	e7a6      	b.n	8000922 <__aeabi_dadd+0x4b2>
 80009d4:	4308      	orrs	r0, r1
 80009d6:	1e41      	subs	r1, r0, #1
 80009d8:	4188      	sbcs	r0, r1
 80009da:	e6a6      	b.n	800072a <__aeabi_dadd+0x2ba>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x572>
 80009e0:	e648      	b.n	8000674 <__aeabi_dadd+0x204>
 80009e2:	1a87      	subs	r7, r0, r2
 80009e4:	4643      	mov	r3, r8
 80009e6:	42b8      	cmp	r0, r7
 80009e8:	41b6      	sbcs	r6, r6
 80009ea:	1acb      	subs	r3, r1, r3
 80009ec:	4276      	negs	r6, r6
 80009ee:	1b9e      	subs	r6, r3, r6
 80009f0:	0233      	lsls	r3, r6, #8
 80009f2:	d54b      	bpl.n	8000a8c <__aeabi_dadd+0x61c>
 80009f4:	1a17      	subs	r7, r2, r0
 80009f6:	4643      	mov	r3, r8
 80009f8:	42ba      	cmp	r2, r7
 80009fa:	4192      	sbcs	r2, r2
 80009fc:	1a59      	subs	r1, r3, r1
 80009fe:	4252      	negs	r2, r2
 8000a00:	1a89      	subs	r1, r1, r2
 8000a02:	2207      	movs	r2, #7
 8000a04:	4664      	mov	r4, ip
 8000a06:	403a      	ands	r2, r7
 8000a08:	e592      	b.n	8000530 <__aeabi_dadd+0xc0>
 8000a0a:	4301      	orrs	r1, r0
 8000a0c:	000f      	movs	r7, r1
 8000a0e:	1e79      	subs	r1, r7, #1
 8000a10:	418f      	sbcs	r7, r1
 8000a12:	e79d      	b.n	8000950 <__aeabi_dadd+0x4e0>
 8000a14:	001c      	movs	r4, r3
 8000a16:	000f      	movs	r7, r1
 8000a18:	3c20      	subs	r4, #32
 8000a1a:	40e7      	lsrs	r7, r4
 8000a1c:	2b20      	cmp	r3, #32
 8000a1e:	d003      	beq.n	8000a28 <__aeabi_dadd+0x5b8>
 8000a20:	2440      	movs	r4, #64	; 0x40
 8000a22:	1ae3      	subs	r3, r4, r3
 8000a24:	4099      	lsls	r1, r3
 8000a26:	4308      	orrs	r0, r1
 8000a28:	1e41      	subs	r1, r0, #1
 8000a2a:	4188      	sbcs	r0, r1
 8000a2c:	4338      	orrs	r0, r7
 8000a2e:	e67c      	b.n	800072a <__aeabi_dadd+0x2ba>
 8000a30:	2200      	movs	r2, #0
 8000a32:	2400      	movs	r4, #0
 8000a34:	e625      	b.n	8000682 <__aeabi_dadd+0x212>
 8000a36:	1a17      	subs	r7, r2, r0
 8000a38:	4643      	mov	r3, r8
 8000a3a:	42ba      	cmp	r2, r7
 8000a3c:	4192      	sbcs	r2, r2
 8000a3e:	1a59      	subs	r1, r3, r1
 8000a40:	4252      	negs	r2, r2
 8000a42:	1a89      	subs	r1, r1, r2
 8000a44:	4664      	mov	r4, ip
 8000a46:	0035      	movs	r5, r6
 8000a48:	e543      	b.n	80004d2 <__aeabi_dadd+0x62>
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	0010      	movs	r0, r2
 8000a4e:	4d14      	ldr	r5, [pc, #80]	; (8000aa0 <__aeabi_dadd+0x630>)
 8000a50:	e610      	b.n	8000674 <__aeabi_dadd+0x204>
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	0312      	lsls	r2, r2, #12
 8000a58:	e680      	b.n	800075c <__aeabi_dadd+0x2ec>
 8000a5a:	001d      	movs	r5, r3
 8000a5c:	000f      	movs	r7, r1
 8000a5e:	3d20      	subs	r5, #32
 8000a60:	40ef      	lsrs	r7, r5
 8000a62:	46bc      	mov	ip, r7
 8000a64:	2b20      	cmp	r3, #32
 8000a66:	d003      	beq.n	8000a70 <__aeabi_dadd+0x600>
 8000a68:	2540      	movs	r5, #64	; 0x40
 8000a6a:	1aeb      	subs	r3, r5, r3
 8000a6c:	4099      	lsls	r1, r3
 8000a6e:	4308      	orrs	r0, r1
 8000a70:	0007      	movs	r7, r0
 8000a72:	4663      	mov	r3, ip
 8000a74:	1e78      	subs	r0, r7, #1
 8000a76:	4187      	sbcs	r7, r0
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	e769      	b.n	8000950 <__aeabi_dadd+0x4e0>
 8000a7c:	1887      	adds	r7, r0, r2
 8000a7e:	4297      	cmp	r7, r2
 8000a80:	419b      	sbcs	r3, r3
 8000a82:	4441      	add	r1, r8
 8000a84:	425b      	negs	r3, r3
 8000a86:	18c9      	adds	r1, r1, r3
 8000a88:	0035      	movs	r5, r6
 8000a8a:	e5a3      	b.n	80005d4 <__aeabi_dadd+0x164>
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	4333      	orrs	r3, r6
 8000a90:	d0ce      	beq.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a92:	2207      	movs	r2, #7
 8000a94:	0031      	movs	r1, r6
 8000a96:	403a      	ands	r2, r7
 8000a98:	e652      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	e5f4      	b.n	800068a <__aeabi_dadd+0x21a>
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff

08000aa8 <__aeabi_ddiv>:
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	4657      	mov	r7, sl
 8000aac:	46de      	mov	lr, fp
 8000aae:	464e      	mov	r6, r9
 8000ab0:	4645      	mov	r5, r8
 8000ab2:	b5e0      	push	{r5, r6, r7, lr}
 8000ab4:	4683      	mov	fp, r0
 8000ab6:	0007      	movs	r7, r0
 8000ab8:	030e      	lsls	r6, r1, #12
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	b085      	sub	sp, #20
 8000abe:	4692      	mov	sl, r2
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	0b36      	lsrs	r6, r6, #12
 8000ac4:	0d40      	lsrs	r0, r0, #21
 8000ac6:	0fcd      	lsrs	r5, r1, #31
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_ddiv+0x26>
 8000acc:	e09d      	b.n	8000c0a <__aeabi_ddiv+0x162>
 8000ace:	4b95      	ldr	r3, [pc, #596]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000ad0:	4298      	cmp	r0, r3
 8000ad2:	d039      	beq.n	8000b48 <__aeabi_ddiv+0xa0>
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	00f6      	lsls	r6, r6, #3
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	431e      	orrs	r6, r3
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <__aeabi_ddiv+0x280>)
 8000ade:	0f7b      	lsrs	r3, r7, #29
 8000ae0:	4333      	orrs	r3, r6
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	4463      	add	r3, ip
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2600      	movs	r6, #0
 8000af0:	00ff      	lsls	r7, r7, #3
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	0323      	lsls	r3, r4, #12
 8000af6:	0b1b      	lsrs	r3, r3, #12
 8000af8:	4698      	mov	r8, r3
 8000afa:	0063      	lsls	r3, r4, #1
 8000afc:	0fe4      	lsrs	r4, r4, #31
 8000afe:	4652      	mov	r2, sl
 8000b00:	0d5b      	lsrs	r3, r3, #21
 8000b02:	9401      	str	r4, [sp, #4]
 8000b04:	d100      	bne.n	8000b08 <__aeabi_ddiv+0x60>
 8000b06:	e0b3      	b.n	8000c70 <__aeabi_ddiv+0x1c8>
 8000b08:	4986      	ldr	r1, [pc, #536]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_ddiv+0x68>
 8000b0e:	e09e      	b.n	8000c4e <__aeabi_ddiv+0x1a6>
 8000b10:	4642      	mov	r2, r8
 8000b12:	00d1      	lsls	r1, r2, #3
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0412      	lsls	r2, r2, #16
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	4651      	mov	r1, sl
 8000b1c:	0f49      	lsrs	r1, r1, #29
 8000b1e:	4311      	orrs	r1, r2
 8000b20:	468b      	mov	fp, r1
 8000b22:	4981      	ldr	r1, [pc, #516]	; (8000d28 <__aeabi_ddiv+0x280>)
 8000b24:	4652      	mov	r2, sl
 8000b26:	468c      	mov	ip, r1
 8000b28:	9900      	ldr	r1, [sp, #0]
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	002b      	movs	r3, r5
 8000b36:	4063      	eors	r3, r4
 8000b38:	469a      	mov	sl, r3
 8000b3a:	2e0f      	cmp	r6, #15
 8000b3c:	d900      	bls.n	8000b40 <__aeabi_ddiv+0x98>
 8000b3e:	e105      	b.n	8000d4c <__aeabi_ddiv+0x2a4>
 8000b40:	4b7a      	ldr	r3, [pc, #488]	; (8000d2c <__aeabi_ddiv+0x284>)
 8000b42:	00b6      	lsls	r6, r6, #2
 8000b44:	599b      	ldr	r3, [r3, r6]
 8000b46:	469f      	mov	pc, r3
 8000b48:	465b      	mov	r3, fp
 8000b4a:	4333      	orrs	r3, r6
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_ddiv+0xaa>
 8000b50:	e0b8      	b.n	8000cc4 <__aeabi_ddiv+0x21c>
 8000b52:	2302      	movs	r3, #2
 8000b54:	2608      	movs	r6, #8
 8000b56:	2700      	movs	r7, #0
 8000b58:	9000      	str	r0, [sp, #0]
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	e7ca      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000b5e:	46cb      	mov	fp, r9
 8000b60:	003a      	movs	r2, r7
 8000b62:	9902      	ldr	r1, [sp, #8]
 8000b64:	9501      	str	r5, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
 8000b68:	469a      	mov	sl, r3
 8000b6a:	2902      	cmp	r1, #2
 8000b6c:	d027      	beq.n	8000bbe <__aeabi_ddiv+0x116>
 8000b6e:	2903      	cmp	r1, #3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_ddiv+0xcc>
 8000b72:	e280      	b.n	8001076 <__aeabi_ddiv+0x5ce>
 8000b74:	2901      	cmp	r1, #1
 8000b76:	d044      	beq.n	8000c02 <__aeabi_ddiv+0x15a>
 8000b78:	496d      	ldr	r1, [pc, #436]	; (8000d30 <__aeabi_ddiv+0x288>)
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	4463      	add	r3, ip
 8000b80:	001c      	movs	r4, r3
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	dd38      	ble.n	8000bf8 <__aeabi_ddiv+0x150>
 8000b86:	0753      	lsls	r3, r2, #29
 8000b88:	d000      	beq.n	8000b8c <__aeabi_ddiv+0xe4>
 8000b8a:	e213      	b.n	8000fb4 <__aeabi_ddiv+0x50c>
 8000b8c:	08d2      	lsrs	r2, r2, #3
 8000b8e:	465b      	mov	r3, fp
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	d509      	bpl.n	8000ba8 <__aeabi_ddiv+0x100>
 8000b94:	4659      	mov	r1, fp
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <__aeabi_ddiv+0x28c>)
 8000b98:	4019      	ands	r1, r3
 8000b9a:	468b      	mov	fp, r1
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	00c9      	lsls	r1, r1, #3
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	9b00      	ldr	r3, [sp, #0]
 8000ba4:	4463      	add	r3, ip
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	4b63      	ldr	r3, [pc, #396]	; (8000d38 <__aeabi_ddiv+0x290>)
 8000baa:	429c      	cmp	r4, r3
 8000bac:	dc07      	bgt.n	8000bbe <__aeabi_ddiv+0x116>
 8000bae:	465b      	mov	r3, fp
 8000bb0:	0564      	lsls	r4, r4, #21
 8000bb2:	075f      	lsls	r7, r3, #29
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	0b1b      	lsrs	r3, r3, #12
 8000bba:	0d62      	lsrs	r2, r4, #21
 8000bbc:	e002      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	4a58      	ldr	r2, [pc, #352]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	031b      	lsls	r3, r3, #12
 8000bc8:	0b1c      	lsrs	r4, r3, #12
 8000bca:	0d0b      	lsrs	r3, r1, #20
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	0514      	lsls	r4, r2, #20
 8000bd2:	4a5a      	ldr	r2, [pc, #360]	; (8000d3c <__aeabi_ddiv+0x294>)
 8000bd4:	0038      	movs	r0, r7
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	431c      	orrs	r4, r3
 8000bda:	4653      	mov	r3, sl
 8000bdc:	0064      	lsls	r4, r4, #1
 8000bde:	07db      	lsls	r3, r3, #31
 8000be0:	0864      	lsrs	r4, r4, #1
 8000be2:	431c      	orrs	r4, r3
 8000be4:	0021      	movs	r1, r4
 8000be6:	b005      	add	sp, #20
 8000be8:	bc3c      	pop	{r2, r3, r4, r5}
 8000bea:	4690      	mov	r8, r2
 8000bec:	4699      	mov	r9, r3
 8000bee:	46a2      	mov	sl, r4
 8000bf0:	46ab      	mov	fp, r5
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4252      	negs	r2, r2
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	1b1b      	subs	r3, r3, r4
 8000bfc:	2b38      	cmp	r3, #56	; 0x38
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_ddiv+0x15a>
 8000c00:	e1ad      	b.n	8000f5e <__aeabi_ddiv+0x4b6>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2300      	movs	r3, #0
 8000c06:	2700      	movs	r7, #0
 8000c08:	e7dc      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000c0a:	465b      	mov	r3, fp
 8000c0c:	4333      	orrs	r3, r6
 8000c0e:	4699      	mov	r9, r3
 8000c10:	d05e      	beq.n	8000cd0 <__aeabi_ddiv+0x228>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_ddiv+0x170>
 8000c16:	e18a      	b.n	8000f2e <__aeabi_ddiv+0x486>
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f001 f9ab 	bl	8001f74 <__clzsi2>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	3b0b      	subs	r3, #11
 8000c22:	2b1c      	cmp	r3, #28
 8000c24:	dd00      	ble.n	8000c28 <__aeabi_ddiv+0x180>
 8000c26:	e17b      	b.n	8000f20 <__aeabi_ddiv+0x478>
 8000c28:	221d      	movs	r2, #29
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	465a      	mov	r2, fp
 8000c2e:	0001      	movs	r1, r0
 8000c30:	40da      	lsrs	r2, r3
 8000c32:	3908      	subs	r1, #8
 8000c34:	408e      	lsls	r6, r1
 8000c36:	0013      	movs	r3, r2
 8000c38:	465f      	mov	r7, fp
 8000c3a:	4333      	orrs	r3, r6
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	408f      	lsls	r7, r1
 8000c40:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <__aeabi_ddiv+0x298>)
 8000c42:	2600      	movs	r6, #0
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9302      	str	r3, [sp, #8]
 8000c4c:	e752      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000c4e:	4641      	mov	r1, r8
 8000c50:	4653      	mov	r3, sl
 8000c52:	430b      	orrs	r3, r1
 8000c54:	493b      	ldr	r1, [pc, #236]	; (8000d44 <__aeabi_ddiv+0x29c>)
 8000c56:	469b      	mov	fp, r3
 8000c58:	468c      	mov	ip, r1
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	4463      	add	r3, ip
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	465b      	mov	r3, fp
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d13b      	bne.n	8000cde <__aeabi_ddiv+0x236>
 8000c66:	2302      	movs	r3, #2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	e761      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000c70:	4643      	mov	r3, r8
 8000c72:	4313      	orrs	r3, r2
 8000c74:	469b      	mov	fp, r3
 8000c76:	d037      	beq.n	8000ce8 <__aeabi_ddiv+0x240>
 8000c78:	4643      	mov	r3, r8
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_ddiv+0x1d8>
 8000c7e:	e162      	b.n	8000f46 <__aeabi_ddiv+0x49e>
 8000c80:	4640      	mov	r0, r8
 8000c82:	f001 f977 	bl	8001f74 <__clzsi2>
 8000c86:	0003      	movs	r3, r0
 8000c88:	3b0b      	subs	r3, #11
 8000c8a:	2b1c      	cmp	r3, #28
 8000c8c:	dd00      	ble.n	8000c90 <__aeabi_ddiv+0x1e8>
 8000c8e:	e153      	b.n	8000f38 <__aeabi_ddiv+0x490>
 8000c90:	0002      	movs	r2, r0
 8000c92:	4641      	mov	r1, r8
 8000c94:	3a08      	subs	r2, #8
 8000c96:	4091      	lsls	r1, r2
 8000c98:	4688      	mov	r8, r1
 8000c9a:	211d      	movs	r1, #29
 8000c9c:	1acb      	subs	r3, r1, r3
 8000c9e:	4651      	mov	r1, sl
 8000ca0:	40d9      	lsrs	r1, r3
 8000ca2:	000b      	movs	r3, r1
 8000ca4:	4641      	mov	r1, r8
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	469b      	mov	fp, r3
 8000caa:	4653      	mov	r3, sl
 8000cac:	4093      	lsls	r3, r2
 8000cae:	001a      	movs	r2, r3
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	4925      	ldr	r1, [pc, #148]	; (8000d48 <__aeabi_ddiv+0x2a0>)
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	4460      	add	r0, ip
 8000cb8:	0003      	movs	r3, r0
 8000cba:	468c      	mov	ip, r1
 8000cbc:	4463      	add	r3, ip
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e737      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	46b1      	mov	r9, r6
 8000cc8:	9000      	str	r0, [sp, #0]
 8000cca:	260c      	movs	r6, #12
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	e711      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2604      	movs	r6, #4
 8000cd8:	2700      	movs	r7, #0
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	e70a      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	46c3      	mov	fp, r8
 8000ce2:	431e      	orrs	r6, r3
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	e725      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000ce8:	3301      	adds	r3, #1
 8000cea:	431e      	orrs	r6, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	e720      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	031b      	lsls	r3, r3, #12
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000cfe:	e761      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	4649      	mov	r1, r9
 8000d04:	031b      	lsls	r3, r3, #12
 8000d06:	4219      	tst	r1, r3
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x264>
 8000d0a:	e0e2      	b.n	8000ed2 <__aeabi_ddiv+0x42a>
 8000d0c:	4659      	mov	r1, fp
 8000d0e:	4219      	tst	r1, r3
 8000d10:	d000      	beq.n	8000d14 <__aeabi_ddiv+0x26c>
 8000d12:	e0de      	b.n	8000ed2 <__aeabi_ddiv+0x42a>
 8000d14:	430b      	orrs	r3, r1
 8000d16:	031b      	lsls	r3, r3, #12
 8000d18:	0017      	movs	r7, r2
 8000d1a:	0b1b      	lsrs	r3, r3, #12
 8000d1c:	46a2      	mov	sl, r4
 8000d1e:	4a01      	ldr	r2, [pc, #4]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000d20:	e750      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	000007ff 	.word	0x000007ff
 8000d28:	fffffc01 	.word	0xfffffc01
 8000d2c:	080061fc 	.word	0x080061fc
 8000d30:	000003ff 	.word	0x000003ff
 8000d34:	feffffff 	.word	0xfeffffff
 8000d38:	000007fe 	.word	0x000007fe
 8000d3c:	800fffff 	.word	0x800fffff
 8000d40:	fffffc0d 	.word	0xfffffc0d
 8000d44:	fffff801 	.word	0xfffff801
 8000d48:	000003f3 	.word	0x000003f3
 8000d4c:	45d9      	cmp	r9, fp
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x2aa>
 8000d50:	e0cb      	b.n	8000eea <__aeabi_ddiv+0x442>
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x2ae>
 8000d54:	e0c6      	b.n	8000ee4 <__aeabi_ddiv+0x43c>
 8000d56:	003c      	movs	r4, r7
 8000d58:	4648      	mov	r0, r9
 8000d5a:	2700      	movs	r7, #0
 8000d5c:	9b00      	ldr	r3, [sp, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	465b      	mov	r3, fp
 8000d64:	0e16      	lsrs	r6, r2, #24
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	0213      	lsls	r3, r2, #8
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	0433      	lsls	r3, r6, #16
 8000d70:	0c1b      	lsrs	r3, r3, #16
 8000d72:	4699      	mov	r9, r3
 8000d74:	0c31      	lsrs	r1, r6, #16
 8000d76:	9101      	str	r1, [sp, #4]
 8000d78:	f7ff fa4c 	bl	8000214 <__aeabi_uidivmod>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	4342      	muls	r2, r0
 8000d80:	040b      	lsls	r3, r1, #16
 8000d82:	0c21      	lsrs	r1, r4, #16
 8000d84:	0005      	movs	r5, r0
 8000d86:	4319      	orrs	r1, r3
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d907      	bls.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d8c:	1989      	adds	r1, r1, r6
 8000d8e:	3d01      	subs	r5, #1
 8000d90:	428e      	cmp	r6, r1
 8000d92:	d803      	bhi.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	d901      	bls.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d98:	1e85      	subs	r5, r0, #2
 8000d9a:	1989      	adds	r1, r1, r6
 8000d9c:	1a88      	subs	r0, r1, r2
 8000d9e:	9901      	ldr	r1, [sp, #4]
 8000da0:	f7ff fa38 	bl	8000214 <__aeabi_uidivmod>
 8000da4:	0409      	lsls	r1, r1, #16
 8000da6:	468c      	mov	ip, r1
 8000da8:	464a      	mov	r2, r9
 8000daa:	0421      	lsls	r1, r4, #16
 8000dac:	4664      	mov	r4, ip
 8000dae:	4342      	muls	r2, r0
 8000db0:	0c09      	lsrs	r1, r1, #16
 8000db2:	0003      	movs	r3, r0
 8000db4:	4321      	orrs	r1, r4
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d904      	bls.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000dba:	1989      	adds	r1, r1, r6
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	428e      	cmp	r6, r1
 8000dc0:	d800      	bhi.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000dc2:	e0f1      	b.n	8000fa8 <__aeabi_ddiv+0x500>
 8000dc4:	042d      	lsls	r5, r5, #16
 8000dc6:	431d      	orrs	r5, r3
 8000dc8:	46ab      	mov	fp, r5
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a89      	subs	r1, r1, r2
 8000dce:	4642      	mov	r2, r8
 8000dd0:	0c28      	lsrs	r0, r5, #16
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	0c1d      	lsrs	r5, r3, #16
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	0c14      	lsrs	r4, r2, #16
 8000dda:	0022      	movs	r2, r4
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	435a      	muls	r2, r3
 8000de2:	9403      	str	r4, [sp, #12]
 8000de4:	436b      	muls	r3, r5
 8000de6:	4344      	muls	r4, r0
 8000de8:	9502      	str	r5, [sp, #8]
 8000dea:	4368      	muls	r0, r5
 8000dec:	191b      	adds	r3, r3, r4
 8000dee:	0c15      	lsrs	r5, r2, #16
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d903      	bls.n	8000dfe <__aeabi_ddiv+0x356>
 8000df6:	2480      	movs	r4, #128	; 0x80
 8000df8:	0264      	lsls	r4, r4, #9
 8000dfa:	46a4      	mov	ip, r4
 8000dfc:	4460      	add	r0, ip
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	0415      	lsls	r5, r2, #16
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	0c2d      	lsrs	r5, r5, #16
 8000e06:	1820      	adds	r0, r4, r0
 8000e08:	195d      	adds	r5, r3, r5
 8000e0a:	4281      	cmp	r1, r0
 8000e0c:	d377      	bcc.n	8000efe <__aeabi_ddiv+0x456>
 8000e0e:	d073      	beq.n	8000ef8 <__aeabi_ddiv+0x450>
 8000e10:	1a0c      	subs	r4, r1, r0
 8000e12:	4aa2      	ldr	r2, [pc, #648]	; (800109c <__aeabi_ddiv+0x5f4>)
 8000e14:	1b7d      	subs	r5, r7, r5
 8000e16:	42af      	cmp	r7, r5
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	4694      	mov	ip, r2
 8000e1c:	9b00      	ldr	r3, [sp, #0]
 8000e1e:	427f      	negs	r7, r7
 8000e20:	4463      	add	r3, ip
 8000e22:	1be0      	subs	r0, r4, r7
 8000e24:	001c      	movs	r4, r3
 8000e26:	4286      	cmp	r6, r0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x384>
 8000e2a:	e0db      	b.n	8000fe4 <__aeabi_ddiv+0x53c>
 8000e2c:	9901      	ldr	r1, [sp, #4]
 8000e2e:	f7ff f9f1 	bl	8000214 <__aeabi_uidivmod>
 8000e32:	464a      	mov	r2, r9
 8000e34:	4342      	muls	r2, r0
 8000e36:	040b      	lsls	r3, r1, #16
 8000e38:	0c29      	lsrs	r1, r5, #16
 8000e3a:	0007      	movs	r7, r0
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	428a      	cmp	r2, r1
 8000e40:	d907      	bls.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e42:	1989      	adds	r1, r1, r6
 8000e44:	3f01      	subs	r7, #1
 8000e46:	428e      	cmp	r6, r1
 8000e48:	d803      	bhi.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e4a:	428a      	cmp	r2, r1
 8000e4c:	d901      	bls.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e4e:	1e87      	subs	r7, r0, #2
 8000e50:	1989      	adds	r1, r1, r6
 8000e52:	1a88      	subs	r0, r1, r2
 8000e54:	9901      	ldr	r1, [sp, #4]
 8000e56:	f7ff f9dd 	bl	8000214 <__aeabi_uidivmod>
 8000e5a:	0409      	lsls	r1, r1, #16
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4689      	mov	r9, r1
 8000e60:	0429      	lsls	r1, r5, #16
 8000e62:	464d      	mov	r5, r9
 8000e64:	4342      	muls	r2, r0
 8000e66:	0c09      	lsrs	r1, r1, #16
 8000e68:	0003      	movs	r3, r0
 8000e6a:	4329      	orrs	r1, r5
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d907      	bls.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e70:	1989      	adds	r1, r1, r6
 8000e72:	3b01      	subs	r3, #1
 8000e74:	428e      	cmp	r6, r1
 8000e76:	d803      	bhi.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d901      	bls.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e7c:	1e83      	subs	r3, r0, #2
 8000e7e:	1989      	adds	r1, r1, r6
 8000e80:	043f      	lsls	r7, r7, #16
 8000e82:	1a89      	subs	r1, r1, r2
 8000e84:	003a      	movs	r2, r7
 8000e86:	9f03      	ldr	r7, [sp, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	0038      	movs	r0, r7
 8000e8c:	0413      	lsls	r3, r2, #16
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	4358      	muls	r0, r3
 8000e92:	4681      	mov	r9, r0
 8000e94:	9802      	ldr	r0, [sp, #8]
 8000e96:	0c15      	lsrs	r5, r2, #16
 8000e98:	436f      	muls	r7, r5
 8000e9a:	4343      	muls	r3, r0
 8000e9c:	4345      	muls	r5, r0
 8000e9e:	4648      	mov	r0, r9
 8000ea0:	0c00      	lsrs	r0, r0, #16
 8000ea2:	4684      	mov	ip, r0
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	4463      	add	r3, ip
 8000ea8:	429f      	cmp	r7, r3
 8000eaa:	d903      	bls.n	8000eb4 <__aeabi_ddiv+0x40c>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	0240      	lsls	r0, r0, #9
 8000eb0:	4684      	mov	ip, r0
 8000eb2:	4465      	add	r5, ip
 8000eb4:	4648      	mov	r0, r9
 8000eb6:	0c1f      	lsrs	r7, r3, #16
 8000eb8:	0400      	lsls	r0, r0, #16
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	0c00      	lsrs	r0, r0, #16
 8000ebe:	197d      	adds	r5, r7, r5
 8000ec0:	1818      	adds	r0, r3, r0
 8000ec2:	42a9      	cmp	r1, r5
 8000ec4:	d200      	bcs.n	8000ec8 <__aeabi_ddiv+0x420>
 8000ec6:	e084      	b.n	8000fd2 <__aeabi_ddiv+0x52a>
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_ddiv+0x424>
 8000eca:	e07f      	b.n	8000fcc <__aeabi_ddiv+0x524>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	e657      	b.n	8000b82 <__aeabi_ddiv+0xda>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	031b      	lsls	r3, r3, #12
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	0b1b      	lsrs	r3, r3, #12
 8000ede:	46aa      	mov	sl, r5
 8000ee0:	4a6f      	ldr	r2, [pc, #444]	; (80010a0 <__aeabi_ddiv+0x5f8>)
 8000ee2:	e66f      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000ee4:	42ba      	cmp	r2, r7
 8000ee6:	d900      	bls.n	8000eea <__aeabi_ddiv+0x442>
 8000ee8:	e735      	b.n	8000d56 <__aeabi_ddiv+0x2ae>
 8000eea:	464b      	mov	r3, r9
 8000eec:	07dc      	lsls	r4, r3, #31
 8000eee:	0858      	lsrs	r0, r3, #1
 8000ef0:	087b      	lsrs	r3, r7, #1
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	07ff      	lsls	r7, r7, #31
 8000ef6:	e734      	b.n	8000d62 <__aeabi_ddiv+0x2ba>
 8000ef8:	2400      	movs	r4, #0
 8000efa:	42af      	cmp	r7, r5
 8000efc:	d289      	bcs.n	8000e12 <__aeabi_ddiv+0x36a>
 8000efe:	4447      	add	r7, r8
 8000f00:	4547      	cmp	r7, r8
 8000f02:	41a4      	sbcs	r4, r4
 8000f04:	465b      	mov	r3, fp
 8000f06:	4264      	negs	r4, r4
 8000f08:	19a4      	adds	r4, r4, r6
 8000f0a:	1864      	adds	r4, r4, r1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	42a6      	cmp	r6, r4
 8000f10:	d21e      	bcs.n	8000f50 <__aeabi_ddiv+0x4a8>
 8000f12:	42a0      	cmp	r0, r4
 8000f14:	d86d      	bhi.n	8000ff2 <__aeabi_ddiv+0x54a>
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x472>
 8000f18:	e0b6      	b.n	8001088 <__aeabi_ddiv+0x5e0>
 8000f1a:	1a24      	subs	r4, r4, r0
 8000f1c:	469b      	mov	fp, r3
 8000f1e:	e778      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8000f20:	0003      	movs	r3, r0
 8000f22:	465a      	mov	r2, fp
 8000f24:	3b28      	subs	r3, #40	; 0x28
 8000f26:	409a      	lsls	r2, r3
 8000f28:	2700      	movs	r7, #0
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	e688      	b.n	8000c40 <__aeabi_ddiv+0x198>
 8000f2e:	4658      	mov	r0, fp
 8000f30:	f001 f820 	bl	8001f74 <__clzsi2>
 8000f34:	3020      	adds	r0, #32
 8000f36:	e672      	b.n	8000c1e <__aeabi_ddiv+0x176>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	3b28      	subs	r3, #40	; 0x28
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4693      	mov	fp, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	e6b4      	b.n	8000cb0 <__aeabi_ddiv+0x208>
 8000f46:	4650      	mov	r0, sl
 8000f48:	f001 f814 	bl	8001f74 <__clzsi2>
 8000f4c:	3020      	adds	r0, #32
 8000f4e:	e69a      	b.n	8000c86 <__aeabi_ddiv+0x1de>
 8000f50:	42a6      	cmp	r6, r4
 8000f52:	d1e2      	bne.n	8000f1a <__aeabi_ddiv+0x472>
 8000f54:	45b8      	cmp	r8, r7
 8000f56:	d9dc      	bls.n	8000f12 <__aeabi_ddiv+0x46a>
 8000f58:	1a34      	subs	r4, r6, r0
 8000f5a:	469b      	mov	fp, r3
 8000f5c:	e759      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8000f5e:	2b1f      	cmp	r3, #31
 8000f60:	dc65      	bgt.n	800102e <__aeabi_ddiv+0x586>
 8000f62:	4c50      	ldr	r4, [pc, #320]	; (80010a4 <__aeabi_ddiv+0x5fc>)
 8000f64:	9900      	ldr	r1, [sp, #0]
 8000f66:	46a4      	mov	ip, r4
 8000f68:	465c      	mov	r4, fp
 8000f6a:	4461      	add	r1, ip
 8000f6c:	0008      	movs	r0, r1
 8000f6e:	408c      	lsls	r4, r1
 8000f70:	0011      	movs	r1, r2
 8000f72:	4082      	lsls	r2, r0
 8000f74:	40d9      	lsrs	r1, r3
 8000f76:	1e50      	subs	r0, r2, #1
 8000f78:	4182      	sbcs	r2, r0
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	4314      	orrs	r4, r2
 8000f7e:	465a      	mov	r2, fp
 8000f80:	40da      	lsrs	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	0762      	lsls	r2, r4, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_ddiv+0x4f4>
 8000f88:	220f      	movs	r2, #15
 8000f8a:	4022      	ands	r2, r4
 8000f8c:	2a04      	cmp	r2, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_ddiv+0x4f4>
 8000f90:	0022      	movs	r2, r4
 8000f92:	1d14      	adds	r4, r2, #4
 8000f94:	4294      	cmp	r4, r2
 8000f96:	4189      	sbcs	r1, r1
 8000f98:	4249      	negs	r1, r1
 8000f9a:	185b      	adds	r3, r3, r1
 8000f9c:	021a      	lsls	r2, r3, #8
 8000f9e:	d562      	bpl.n	8001066 <__aeabi_ddiv+0x5be>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2700      	movs	r7, #0
 8000fa6:	e60d      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000fa8:	428a      	cmp	r2, r1
 8000faa:	d800      	bhi.n	8000fae <__aeabi_ddiv+0x506>
 8000fac:	e70a      	b.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000fae:	1e83      	subs	r3, r0, #2
 8000fb0:	1989      	adds	r1, r1, r6
 8000fb2:	e707      	b.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x516>
 8000fbc:	e5e6      	b.n	8000b8c <__aeabi_ddiv+0xe4>
 8000fbe:	1d17      	adds	r7, r2, #4
 8000fc0:	4297      	cmp	r7, r2
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4253      	negs	r3, r2
 8000fc6:	449b      	add	fp, r3
 8000fc8:	08fa      	lsrs	r2, r7, #3
 8000fca:	e5e0      	b.n	8000b8e <__aeabi_ddiv+0xe6>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x52a>
 8000fd0:	e5d7      	b.n	8000b82 <__aeabi_ddiv+0xda>
 8000fd2:	1871      	adds	r1, r6, r1
 8000fd4:	1e53      	subs	r3, r2, #1
 8000fd6:	42b1      	cmp	r1, r6
 8000fd8:	d327      	bcc.n	800102a <__aeabi_ddiv+0x582>
 8000fda:	42a9      	cmp	r1, r5
 8000fdc:	d315      	bcc.n	800100a <__aeabi_ddiv+0x562>
 8000fde:	d058      	beq.n	8001092 <__aeabi_ddiv+0x5ea>
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	e773      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_ddiv+0x542>
 8000fe8:	e604      	b.n	8000bf4 <__aeabi_ddiv+0x14c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	2200      	movs	r2, #0
 8000fee:	449b      	add	fp, r3
 8000ff0:	e5cd      	b.n	8000b8e <__aeabi_ddiv+0xe6>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	4447      	add	r7, r8
 8000ff6:	4547      	cmp	r7, r8
 8000ff8:	4189      	sbcs	r1, r1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	4249      	negs	r1, r1
 8001000:	1989      	adds	r1, r1, r6
 8001002:	190c      	adds	r4, r1, r4
 8001004:	44e3      	add	fp, ip
 8001006:	1a24      	subs	r4, r4, r0
 8001008:	e703      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 800100a:	4643      	mov	r3, r8
 800100c:	005f      	lsls	r7, r3, #1
 800100e:	4547      	cmp	r7, r8
 8001010:	419b      	sbcs	r3, r3
 8001012:	46b8      	mov	r8, r7
 8001014:	425b      	negs	r3, r3
 8001016:	199e      	adds	r6, r3, r6
 8001018:	3a02      	subs	r2, #2
 800101a:	1989      	adds	r1, r1, r6
 800101c:	42a9      	cmp	r1, r5
 800101e:	d000      	beq.n	8001022 <__aeabi_ddiv+0x57a>
 8001020:	e754      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8001022:	4540      	cmp	r0, r8
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0x580>
 8001026:	e751      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8001028:	e5ab      	b.n	8000b82 <__aeabi_ddiv+0xda>
 800102a:	001a      	movs	r2, r3
 800102c:	e7f6      	b.n	800101c <__aeabi_ddiv+0x574>
 800102e:	211f      	movs	r1, #31
 8001030:	465f      	mov	r7, fp
 8001032:	4249      	negs	r1, r1
 8001034:	1b0c      	subs	r4, r1, r4
 8001036:	40e7      	lsrs	r7, r4
 8001038:	2b20      	cmp	r3, #32
 800103a:	d007      	beq.n	800104c <__aeabi_ddiv+0x5a4>
 800103c:	491a      	ldr	r1, [pc, #104]	; (80010a8 <__aeabi_ddiv+0x600>)
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	468c      	mov	ip, r1
 8001042:	4463      	add	r3, ip
 8001044:	0018      	movs	r0, r3
 8001046:	465b      	mov	r3, fp
 8001048:	4083      	lsls	r3, r0
 800104a:	431a      	orrs	r2, r3
 800104c:	1e50      	subs	r0, r2, #1
 800104e:	4182      	sbcs	r2, r0
 8001050:	433a      	orrs	r2, r7
 8001052:	2707      	movs	r7, #7
 8001054:	2300      	movs	r3, #0
 8001056:	4017      	ands	r7, r2
 8001058:	d009      	beq.n	800106e <__aeabi_ddiv+0x5c6>
 800105a:	210f      	movs	r1, #15
 800105c:	2300      	movs	r3, #0
 800105e:	4011      	ands	r1, r2
 8001060:	0014      	movs	r4, r2
 8001062:	2904      	cmp	r1, #4
 8001064:	d195      	bne.n	8000f92 <__aeabi_ddiv+0x4ea>
 8001066:	0022      	movs	r2, r4
 8001068:	075f      	lsls	r7, r3, #29
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	0b1b      	lsrs	r3, r3, #12
 800106e:	08d2      	lsrs	r2, r2, #3
 8001070:	4317      	orrs	r7, r2
 8001072:	2200      	movs	r2, #0
 8001074:	e5a6      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	4659      	mov	r1, fp
 800107a:	031b      	lsls	r3, r3, #12
 800107c:	430b      	orrs	r3, r1
 800107e:	031b      	lsls	r3, r3, #12
 8001080:	0017      	movs	r7, r2
 8001082:	0b1b      	lsrs	r3, r3, #12
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <__aeabi_ddiv+0x5f8>)
 8001086:	e59d      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8001088:	42bd      	cmp	r5, r7
 800108a:	d8b2      	bhi.n	8000ff2 <__aeabi_ddiv+0x54a>
 800108c:	469b      	mov	fp, r3
 800108e:	2400      	movs	r4, #0
 8001090:	e6bf      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8001092:	4580      	cmp	r8, r0
 8001094:	d3b9      	bcc.n	800100a <__aeabi_ddiv+0x562>
 8001096:	001a      	movs	r2, r3
 8001098:	e7c3      	b.n	8001022 <__aeabi_ddiv+0x57a>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	000003ff 	.word	0x000003ff
 80010a0:	000007ff 	.word	0x000007ff
 80010a4:	0000041e 	.word	0x0000041e
 80010a8:	0000043e 	.word	0x0000043e

080010ac <__eqdf2>:
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	464f      	mov	r7, r9
 80010b0:	4646      	mov	r6, r8
 80010b2:	46d6      	mov	lr, sl
 80010b4:	4684      	mov	ip, r0
 80010b6:	b5c0      	push	{r6, r7, lr}
 80010b8:	4680      	mov	r8, r0
 80010ba:	4e19      	ldr	r6, [pc, #100]	; (8001120 <__eqdf2+0x74>)
 80010bc:	0318      	lsls	r0, r3, #12
 80010be:	030f      	lsls	r7, r1, #12
 80010c0:	004d      	lsls	r5, r1, #1
 80010c2:	0b00      	lsrs	r0, r0, #12
 80010c4:	005c      	lsls	r4, r3, #1
 80010c6:	4682      	mov	sl, r0
 80010c8:	0b3f      	lsrs	r7, r7, #12
 80010ca:	0d6d      	lsrs	r5, r5, #21
 80010cc:	0fc9      	lsrs	r1, r1, #31
 80010ce:	4691      	mov	r9, r2
 80010d0:	0d64      	lsrs	r4, r4, #21
 80010d2:	0fdb      	lsrs	r3, r3, #31
 80010d4:	2001      	movs	r0, #1
 80010d6:	42b5      	cmp	r5, r6
 80010d8:	d00a      	beq.n	80010f0 <__eqdf2+0x44>
 80010da:	42b4      	cmp	r4, r6
 80010dc:	d003      	beq.n	80010e6 <__eqdf2+0x3a>
 80010de:	42a5      	cmp	r5, r4
 80010e0:	d101      	bne.n	80010e6 <__eqdf2+0x3a>
 80010e2:	4557      	cmp	r7, sl
 80010e4:	d00c      	beq.n	8001100 <__eqdf2+0x54>
 80010e6:	bc1c      	pop	{r2, r3, r4}
 80010e8:	4690      	mov	r8, r2
 80010ea:	4699      	mov	r9, r3
 80010ec:	46a2      	mov	sl, r4
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	4666      	mov	r6, ip
 80010f2:	433e      	orrs	r6, r7
 80010f4:	d1f7      	bne.n	80010e6 <__eqdf2+0x3a>
 80010f6:	42ac      	cmp	r4, r5
 80010f8:	d1f5      	bne.n	80010e6 <__eqdf2+0x3a>
 80010fa:	4654      	mov	r4, sl
 80010fc:	4314      	orrs	r4, r2
 80010fe:	d1f2      	bne.n	80010e6 <__eqdf2+0x3a>
 8001100:	2001      	movs	r0, #1
 8001102:	45c8      	cmp	r8, r9
 8001104:	d1ef      	bne.n	80010e6 <__eqdf2+0x3a>
 8001106:	4299      	cmp	r1, r3
 8001108:	d007      	beq.n	800111a <__eqdf2+0x6e>
 800110a:	2d00      	cmp	r5, #0
 800110c:	d1eb      	bne.n	80010e6 <__eqdf2+0x3a>
 800110e:	4663      	mov	r3, ip
 8001110:	431f      	orrs	r7, r3
 8001112:	0038      	movs	r0, r7
 8001114:	1e47      	subs	r7, r0, #1
 8001116:	41b8      	sbcs	r0, r7
 8001118:	e7e5      	b.n	80010e6 <__eqdf2+0x3a>
 800111a:	2000      	movs	r0, #0
 800111c:	e7e3      	b.n	80010e6 <__eqdf2+0x3a>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff

08001124 <__gedf2>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	464f      	mov	r7, r9
 8001128:	4646      	mov	r6, r8
 800112a:	46d6      	mov	lr, sl
 800112c:	004d      	lsls	r5, r1, #1
 800112e:	b5c0      	push	{r6, r7, lr}
 8001130:	030e      	lsls	r6, r1, #12
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	468a      	mov	sl, r1
 8001136:	492c      	ldr	r1, [pc, #176]	; (80011e8 <__gedf2+0xc4>)
 8001138:	031f      	lsls	r7, r3, #12
 800113a:	005c      	lsls	r4, r3, #1
 800113c:	4680      	mov	r8, r0
 800113e:	0b36      	lsrs	r6, r6, #12
 8001140:	0d6d      	lsrs	r5, r5, #21
 8001142:	4691      	mov	r9, r2
 8001144:	0b3f      	lsrs	r7, r7, #12
 8001146:	0d64      	lsrs	r4, r4, #21
 8001148:	0fdb      	lsrs	r3, r3, #31
 800114a:	428d      	cmp	r5, r1
 800114c:	d01e      	beq.n	800118c <__gedf2+0x68>
 800114e:	428c      	cmp	r4, r1
 8001150:	d016      	beq.n	8001180 <__gedf2+0x5c>
 8001152:	2d00      	cmp	r5, #0
 8001154:	d11e      	bne.n	8001194 <__gedf2+0x70>
 8001156:	4330      	orrs	r0, r6
 8001158:	4684      	mov	ip, r0
 800115a:	2c00      	cmp	r4, #0
 800115c:	d101      	bne.n	8001162 <__gedf2+0x3e>
 800115e:	433a      	orrs	r2, r7
 8001160:	d023      	beq.n	80011aa <__gedf2+0x86>
 8001162:	4662      	mov	r2, ip
 8001164:	2a00      	cmp	r2, #0
 8001166:	d01a      	beq.n	800119e <__gedf2+0x7a>
 8001168:	459a      	cmp	sl, r3
 800116a:	d029      	beq.n	80011c0 <__gedf2+0x9c>
 800116c:	4651      	mov	r1, sl
 800116e:	2002      	movs	r0, #2
 8001170:	3901      	subs	r1, #1
 8001172:	4008      	ands	r0, r1
 8001174:	3801      	subs	r0, #1
 8001176:	bc1c      	pop	{r2, r3, r4}
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	46a2      	mov	sl, r4
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	0039      	movs	r1, r7
 8001182:	4311      	orrs	r1, r2
 8001184:	d0e5      	beq.n	8001152 <__gedf2+0x2e>
 8001186:	2002      	movs	r0, #2
 8001188:	4240      	negs	r0, r0
 800118a:	e7f4      	b.n	8001176 <__gedf2+0x52>
 800118c:	4330      	orrs	r0, r6
 800118e:	d1fa      	bne.n	8001186 <__gedf2+0x62>
 8001190:	42ac      	cmp	r4, r5
 8001192:	d00f      	beq.n	80011b4 <__gedf2+0x90>
 8001194:	2c00      	cmp	r4, #0
 8001196:	d10f      	bne.n	80011b8 <__gedf2+0x94>
 8001198:	433a      	orrs	r2, r7
 800119a:	d0e7      	beq.n	800116c <__gedf2+0x48>
 800119c:	e00c      	b.n	80011b8 <__gedf2+0x94>
 800119e:	2201      	movs	r2, #1
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4393      	bics	r3, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	3001      	adds	r0, #1
 80011a8:	e7e5      	b.n	8001176 <__gedf2+0x52>
 80011aa:	4663      	mov	r3, ip
 80011ac:	2000      	movs	r0, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0e1      	beq.n	8001176 <__gedf2+0x52>
 80011b2:	e7db      	b.n	800116c <__gedf2+0x48>
 80011b4:	433a      	orrs	r2, r7
 80011b6:	d1e6      	bne.n	8001186 <__gedf2+0x62>
 80011b8:	459a      	cmp	sl, r3
 80011ba:	d1d7      	bne.n	800116c <__gedf2+0x48>
 80011bc:	42a5      	cmp	r5, r4
 80011be:	dcd5      	bgt.n	800116c <__gedf2+0x48>
 80011c0:	42a5      	cmp	r5, r4
 80011c2:	db05      	blt.n	80011d0 <__gedf2+0xac>
 80011c4:	42be      	cmp	r6, r7
 80011c6:	d8d1      	bhi.n	800116c <__gedf2+0x48>
 80011c8:	d008      	beq.n	80011dc <__gedf2+0xb8>
 80011ca:	2000      	movs	r0, #0
 80011cc:	42be      	cmp	r6, r7
 80011ce:	d2d2      	bcs.n	8001176 <__gedf2+0x52>
 80011d0:	4650      	mov	r0, sl
 80011d2:	2301      	movs	r3, #1
 80011d4:	3801      	subs	r0, #1
 80011d6:	4398      	bics	r0, r3
 80011d8:	3001      	adds	r0, #1
 80011da:	e7cc      	b.n	8001176 <__gedf2+0x52>
 80011dc:	45c8      	cmp	r8, r9
 80011de:	d8c5      	bhi.n	800116c <__gedf2+0x48>
 80011e0:	2000      	movs	r0, #0
 80011e2:	45c8      	cmp	r8, r9
 80011e4:	d3f4      	bcc.n	80011d0 <__gedf2+0xac>
 80011e6:	e7c6      	b.n	8001176 <__gedf2+0x52>
 80011e8:	000007ff 	.word	0x000007ff

080011ec <__ledf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464f      	mov	r7, r9
 80011f0:	4646      	mov	r6, r8
 80011f2:	46d6      	mov	lr, sl
 80011f4:	004d      	lsls	r5, r1, #1
 80011f6:	b5c0      	push	{r6, r7, lr}
 80011f8:	030e      	lsls	r6, r1, #12
 80011fa:	0fc9      	lsrs	r1, r1, #31
 80011fc:	468a      	mov	sl, r1
 80011fe:	492e      	ldr	r1, [pc, #184]	; (80012b8 <__ledf2+0xcc>)
 8001200:	031f      	lsls	r7, r3, #12
 8001202:	005c      	lsls	r4, r3, #1
 8001204:	4680      	mov	r8, r0
 8001206:	0b36      	lsrs	r6, r6, #12
 8001208:	0d6d      	lsrs	r5, r5, #21
 800120a:	4691      	mov	r9, r2
 800120c:	0b3f      	lsrs	r7, r7, #12
 800120e:	0d64      	lsrs	r4, r4, #21
 8001210:	0fdb      	lsrs	r3, r3, #31
 8001212:	428d      	cmp	r5, r1
 8001214:	d018      	beq.n	8001248 <__ledf2+0x5c>
 8001216:	428c      	cmp	r4, r1
 8001218:	d011      	beq.n	800123e <__ledf2+0x52>
 800121a:	2d00      	cmp	r5, #0
 800121c:	d118      	bne.n	8001250 <__ledf2+0x64>
 800121e:	4330      	orrs	r0, r6
 8001220:	4684      	mov	ip, r0
 8001222:	2c00      	cmp	r4, #0
 8001224:	d11e      	bne.n	8001264 <__ledf2+0x78>
 8001226:	433a      	orrs	r2, r7
 8001228:	d11c      	bne.n	8001264 <__ledf2+0x78>
 800122a:	4663      	mov	r3, ip
 800122c:	2000      	movs	r0, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d030      	beq.n	8001294 <__ledf2+0xa8>
 8001232:	4651      	mov	r1, sl
 8001234:	2002      	movs	r0, #2
 8001236:	3901      	subs	r1, #1
 8001238:	4008      	ands	r0, r1
 800123a:	3801      	subs	r0, #1
 800123c:	e02a      	b.n	8001294 <__ledf2+0xa8>
 800123e:	0039      	movs	r1, r7
 8001240:	4311      	orrs	r1, r2
 8001242:	d0ea      	beq.n	800121a <__ledf2+0x2e>
 8001244:	2002      	movs	r0, #2
 8001246:	e025      	b.n	8001294 <__ledf2+0xa8>
 8001248:	4330      	orrs	r0, r6
 800124a:	d1fb      	bne.n	8001244 <__ledf2+0x58>
 800124c:	42ac      	cmp	r4, r5
 800124e:	d026      	beq.n	800129e <__ledf2+0xb2>
 8001250:	2c00      	cmp	r4, #0
 8001252:	d126      	bne.n	80012a2 <__ledf2+0xb6>
 8001254:	433a      	orrs	r2, r7
 8001256:	d124      	bne.n	80012a2 <__ledf2+0xb6>
 8001258:	4651      	mov	r1, sl
 800125a:	2002      	movs	r0, #2
 800125c:	3901      	subs	r1, #1
 800125e:	4008      	ands	r0, r1
 8001260:	3801      	subs	r0, #1
 8001262:	e017      	b.n	8001294 <__ledf2+0xa8>
 8001264:	4662      	mov	r2, ip
 8001266:	2a00      	cmp	r2, #0
 8001268:	d00f      	beq.n	800128a <__ledf2+0x9e>
 800126a:	459a      	cmp	sl, r3
 800126c:	d1e1      	bne.n	8001232 <__ledf2+0x46>
 800126e:	42a5      	cmp	r5, r4
 8001270:	db05      	blt.n	800127e <__ledf2+0x92>
 8001272:	42be      	cmp	r6, r7
 8001274:	d8dd      	bhi.n	8001232 <__ledf2+0x46>
 8001276:	d019      	beq.n	80012ac <__ledf2+0xc0>
 8001278:	2000      	movs	r0, #0
 800127a:	42be      	cmp	r6, r7
 800127c:	d20a      	bcs.n	8001294 <__ledf2+0xa8>
 800127e:	4650      	mov	r0, sl
 8001280:	2301      	movs	r3, #1
 8001282:	3801      	subs	r0, #1
 8001284:	4398      	bics	r0, r3
 8001286:	3001      	adds	r0, #1
 8001288:	e004      	b.n	8001294 <__ledf2+0xa8>
 800128a:	2201      	movs	r2, #1
 800128c:	3b01      	subs	r3, #1
 800128e:	4393      	bics	r3, r2
 8001290:	0018      	movs	r0, r3
 8001292:	3001      	adds	r0, #1
 8001294:	bc1c      	pop	{r2, r3, r4}
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	46a2      	mov	sl, r4
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	433a      	orrs	r2, r7
 80012a0:	d1d0      	bne.n	8001244 <__ledf2+0x58>
 80012a2:	459a      	cmp	sl, r3
 80012a4:	d1c5      	bne.n	8001232 <__ledf2+0x46>
 80012a6:	42a5      	cmp	r5, r4
 80012a8:	dcc3      	bgt.n	8001232 <__ledf2+0x46>
 80012aa:	e7e0      	b.n	800126e <__ledf2+0x82>
 80012ac:	45c8      	cmp	r8, r9
 80012ae:	d8c0      	bhi.n	8001232 <__ledf2+0x46>
 80012b0:	2000      	movs	r0, #0
 80012b2:	45c8      	cmp	r8, r9
 80012b4:	d3e3      	bcc.n	800127e <__ledf2+0x92>
 80012b6:	e7ed      	b.n	8001294 <__ledf2+0xa8>
 80012b8:	000007ff 	.word	0x000007ff

080012bc <__aeabi_dmul>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	4657      	mov	r7, sl
 80012c0:	46de      	mov	lr, fp
 80012c2:	464e      	mov	r6, r9
 80012c4:	4645      	mov	r5, r8
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	4683      	mov	fp, r0
 80012ca:	0006      	movs	r6, r0
 80012cc:	030f      	lsls	r7, r1, #12
 80012ce:	0048      	lsls	r0, r1, #1
 80012d0:	b087      	sub	sp, #28
 80012d2:	4692      	mov	sl, r2
 80012d4:	001d      	movs	r5, r3
 80012d6:	0b3f      	lsrs	r7, r7, #12
 80012d8:	0d40      	lsrs	r0, r0, #21
 80012da:	0fcc      	lsrs	r4, r1, #31
 80012dc:	2800      	cmp	r0, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_dmul+0x26>
 80012e0:	e06f      	b.n	80013c2 <__aeabi_dmul+0x106>
 80012e2:	4bde      	ldr	r3, [pc, #888]	; (800165c <__aeabi_dmul+0x3a0>)
 80012e4:	4298      	cmp	r0, r3
 80012e6:	d038      	beq.n	800135a <__aeabi_dmul+0x9e>
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	00ff      	lsls	r7, r7, #3
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	431f      	orrs	r7, r3
 80012f0:	0f73      	lsrs	r3, r6, #29
 80012f2:	433b      	orrs	r3, r7
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4bda      	ldr	r3, [pc, #872]	; (8001660 <__aeabi_dmul+0x3a4>)
 80012f8:	2700      	movs	r7, #0
 80012fa:	4699      	mov	r9, r3
 80012fc:	2300      	movs	r3, #0
 80012fe:	469b      	mov	fp, r3
 8001300:	00f6      	lsls	r6, r6, #3
 8001302:	4481      	add	r9, r0
 8001304:	032b      	lsls	r3, r5, #12
 8001306:	0069      	lsls	r1, r5, #1
 8001308:	0b1b      	lsrs	r3, r3, #12
 800130a:	4652      	mov	r2, sl
 800130c:	4698      	mov	r8, r3
 800130e:	0d49      	lsrs	r1, r1, #21
 8001310:	0fed      	lsrs	r5, r5, #31
 8001312:	2900      	cmp	r1, #0
 8001314:	d100      	bne.n	8001318 <__aeabi_dmul+0x5c>
 8001316:	e085      	b.n	8001424 <__aeabi_dmul+0x168>
 8001318:	4bd0      	ldr	r3, [pc, #832]	; (800165c <__aeabi_dmul+0x3a0>)
 800131a:	4299      	cmp	r1, r3
 800131c:	d100      	bne.n	8001320 <__aeabi_dmul+0x64>
 800131e:	e073      	b.n	8001408 <__aeabi_dmul+0x14c>
 8001320:	4643      	mov	r3, r8
 8001322:	00da      	lsls	r2, r3, #3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	4313      	orrs	r3, r2
 800132a:	4652      	mov	r2, sl
 800132c:	48cc      	ldr	r0, [pc, #816]	; (8001660 <__aeabi_dmul+0x3a4>)
 800132e:	0f52      	lsrs	r2, r2, #29
 8001330:	4684      	mov	ip, r0
 8001332:	4313      	orrs	r3, r2
 8001334:	4652      	mov	r2, sl
 8001336:	2000      	movs	r0, #0
 8001338:	4461      	add	r1, ip
 800133a:	00d2      	lsls	r2, r2, #3
 800133c:	4489      	add	r9, r1
 800133e:	0021      	movs	r1, r4
 8001340:	4069      	eors	r1, r5
 8001342:	9100      	str	r1, [sp, #0]
 8001344:	468c      	mov	ip, r1
 8001346:	2101      	movs	r1, #1
 8001348:	4449      	add	r1, r9
 800134a:	468a      	mov	sl, r1
 800134c:	2f0f      	cmp	r7, #15
 800134e:	d900      	bls.n	8001352 <__aeabi_dmul+0x96>
 8001350:	e090      	b.n	8001474 <__aeabi_dmul+0x1b8>
 8001352:	49c4      	ldr	r1, [pc, #784]	; (8001664 <__aeabi_dmul+0x3a8>)
 8001354:	00bf      	lsls	r7, r7, #2
 8001356:	59cf      	ldr	r7, [r1, r7]
 8001358:	46bf      	mov	pc, r7
 800135a:	465b      	mov	r3, fp
 800135c:	433b      	orrs	r3, r7
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	d000      	beq.n	8001364 <__aeabi_dmul+0xa8>
 8001362:	e16a      	b.n	800163a <__aeabi_dmul+0x37e>
 8001364:	2302      	movs	r3, #2
 8001366:	2708      	movs	r7, #8
 8001368:	2600      	movs	r6, #0
 800136a:	4681      	mov	r9, r0
 800136c:	469b      	mov	fp, r3
 800136e:	e7c9      	b.n	8001304 <__aeabi_dmul+0x48>
 8001370:	0032      	movs	r2, r6
 8001372:	4658      	mov	r0, fp
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	4661      	mov	r1, ip
 8001378:	9100      	str	r1, [sp, #0]
 800137a:	2802      	cmp	r0, #2
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0xc4>
 800137e:	e075      	b.n	800146c <__aeabi_dmul+0x1b0>
 8001380:	2803      	cmp	r0, #3
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0xca>
 8001384:	e1fe      	b.n	8001784 <__aeabi_dmul+0x4c8>
 8001386:	2801      	cmp	r0, #1
 8001388:	d000      	beq.n	800138c <__aeabi_dmul+0xd0>
 800138a:	e12c      	b.n	80015e6 <__aeabi_dmul+0x32a>
 800138c:	2300      	movs	r3, #0
 800138e:	2700      	movs	r7, #0
 8001390:	2600      	movs	r6, #0
 8001392:	2500      	movs	r5, #0
 8001394:	033f      	lsls	r7, r7, #12
 8001396:	0d2a      	lsrs	r2, r5, #20
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	48b3      	ldr	r0, [pc, #716]	; (8001668 <__aeabi_dmul+0x3ac>)
 800139c:	0512      	lsls	r2, r2, #20
 800139e:	433a      	orrs	r2, r7
 80013a0:	4002      	ands	r2, r0
 80013a2:	051b      	lsls	r3, r3, #20
 80013a4:	4313      	orrs	r3, r2
 80013a6:	9a00      	ldr	r2, [sp, #0]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	07d1      	lsls	r1, r2, #31
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	430b      	orrs	r3, r1
 80013b0:	0030      	movs	r0, r6
 80013b2:	0019      	movs	r1, r3
 80013b4:	b007      	add	sp, #28
 80013b6:	bc3c      	pop	{r2, r3, r4, r5}
 80013b8:	4690      	mov	r8, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	46a2      	mov	sl, r4
 80013be:	46ab      	mov	fp, r5
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	465b      	mov	r3, fp
 80013c4:	433b      	orrs	r3, r7
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	d100      	bne.n	80013cc <__aeabi_dmul+0x110>
 80013ca:	e12f      	b.n	800162c <__aeabi_dmul+0x370>
 80013cc:	2f00      	cmp	r7, #0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dmul+0x116>
 80013d0:	e1a5      	b.n	800171e <__aeabi_dmul+0x462>
 80013d2:	0038      	movs	r0, r7
 80013d4:	f000 fdce 	bl	8001f74 <__clzsi2>
 80013d8:	0003      	movs	r3, r0
 80013da:	3b0b      	subs	r3, #11
 80013dc:	2b1c      	cmp	r3, #28
 80013de:	dd00      	ble.n	80013e2 <__aeabi_dmul+0x126>
 80013e0:	e196      	b.n	8001710 <__aeabi_dmul+0x454>
 80013e2:	221d      	movs	r2, #29
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	465a      	mov	r2, fp
 80013e8:	0001      	movs	r1, r0
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	465e      	mov	r6, fp
 80013ee:	3908      	subs	r1, #8
 80013f0:	408f      	lsls	r7, r1
 80013f2:	0013      	movs	r3, r2
 80013f4:	408e      	lsls	r6, r1
 80013f6:	433b      	orrs	r3, r7
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	4b9c      	ldr	r3, [pc, #624]	; (800166c <__aeabi_dmul+0x3b0>)
 80013fc:	2700      	movs	r7, #0
 80013fe:	1a1b      	subs	r3, r3, r0
 8001400:	4699      	mov	r9, r3
 8001402:	2300      	movs	r3, #0
 8001404:	469b      	mov	fp, r3
 8001406:	e77d      	b.n	8001304 <__aeabi_dmul+0x48>
 8001408:	4641      	mov	r1, r8
 800140a:	4653      	mov	r3, sl
 800140c:	430b      	orrs	r3, r1
 800140e:	4993      	ldr	r1, [pc, #588]	; (800165c <__aeabi_dmul+0x3a0>)
 8001410:	468c      	mov	ip, r1
 8001412:	44e1      	add	r9, ip
 8001414:	2b00      	cmp	r3, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dmul+0x15e>
 8001418:	e11a      	b.n	8001650 <__aeabi_dmul+0x394>
 800141a:	2202      	movs	r2, #2
 800141c:	2002      	movs	r0, #2
 800141e:	4317      	orrs	r7, r2
 8001420:	2200      	movs	r2, #0
 8001422:	e78c      	b.n	800133e <__aeabi_dmul+0x82>
 8001424:	4313      	orrs	r3, r2
 8001426:	d100      	bne.n	800142a <__aeabi_dmul+0x16e>
 8001428:	e10d      	b.n	8001646 <__aeabi_dmul+0x38a>
 800142a:	4643      	mov	r3, r8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x176>
 8001430:	e181      	b.n	8001736 <__aeabi_dmul+0x47a>
 8001432:	4640      	mov	r0, r8
 8001434:	f000 fd9e 	bl	8001f74 <__clzsi2>
 8001438:	0002      	movs	r2, r0
 800143a:	3a0b      	subs	r2, #11
 800143c:	2a1c      	cmp	r2, #28
 800143e:	dd00      	ble.n	8001442 <__aeabi_dmul+0x186>
 8001440:	e172      	b.n	8001728 <__aeabi_dmul+0x46c>
 8001442:	0001      	movs	r1, r0
 8001444:	4643      	mov	r3, r8
 8001446:	3908      	subs	r1, #8
 8001448:	408b      	lsls	r3, r1
 800144a:	4698      	mov	r8, r3
 800144c:	231d      	movs	r3, #29
 800144e:	1a9a      	subs	r2, r3, r2
 8001450:	4653      	mov	r3, sl
 8001452:	40d3      	lsrs	r3, r2
 8001454:	001a      	movs	r2, r3
 8001456:	4643      	mov	r3, r8
 8001458:	4313      	orrs	r3, r2
 800145a:	4652      	mov	r2, sl
 800145c:	408a      	lsls	r2, r1
 800145e:	4649      	mov	r1, r9
 8001460:	1a08      	subs	r0, r1, r0
 8001462:	4982      	ldr	r1, [pc, #520]	; (800166c <__aeabi_dmul+0x3b0>)
 8001464:	4689      	mov	r9, r1
 8001466:	4481      	add	r9, r0
 8001468:	2000      	movs	r0, #0
 800146a:	e768      	b.n	800133e <__aeabi_dmul+0x82>
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <__aeabi_dmul+0x3a0>)
 800146e:	2700      	movs	r7, #0
 8001470:	2600      	movs	r6, #0
 8001472:	e78e      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001474:	0c14      	lsrs	r4, r2, #16
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	0c12      	lsrs	r2, r2, #16
 800147a:	0011      	movs	r1, r2
 800147c:	0c37      	lsrs	r7, r6, #16
 800147e:	0436      	lsls	r6, r6, #16
 8001480:	0c35      	lsrs	r5, r6, #16
 8001482:	4379      	muls	r1, r7
 8001484:	0028      	movs	r0, r5
 8001486:	468c      	mov	ip, r1
 8001488:	002e      	movs	r6, r5
 800148a:	4360      	muls	r0, r4
 800148c:	4460      	add	r0, ip
 800148e:	4683      	mov	fp, r0
 8001490:	4356      	muls	r6, r2
 8001492:	0021      	movs	r1, r4
 8001494:	0c30      	lsrs	r0, r6, #16
 8001496:	4680      	mov	r8, r0
 8001498:	4658      	mov	r0, fp
 800149a:	4379      	muls	r1, r7
 800149c:	4440      	add	r0, r8
 800149e:	9102      	str	r1, [sp, #8]
 80014a0:	4584      	cmp	ip, r0
 80014a2:	d906      	bls.n	80014b2 <__aeabi_dmul+0x1f6>
 80014a4:	4688      	mov	r8, r1
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0249      	lsls	r1, r1, #9
 80014aa:	468c      	mov	ip, r1
 80014ac:	44e0      	add	r8, ip
 80014ae:	4641      	mov	r1, r8
 80014b0:	9102      	str	r1, [sp, #8]
 80014b2:	0436      	lsls	r6, r6, #16
 80014b4:	0c01      	lsrs	r1, r0, #16
 80014b6:	0c36      	lsrs	r6, r6, #16
 80014b8:	0400      	lsls	r0, r0, #16
 80014ba:	468b      	mov	fp, r1
 80014bc:	1981      	adds	r1, r0, r6
 80014be:	0c1e      	lsrs	r6, r3, #16
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	0019      	movs	r1, r3
 80014c8:	4379      	muls	r1, r7
 80014ca:	468c      	mov	ip, r1
 80014cc:	0028      	movs	r0, r5
 80014ce:	4375      	muls	r5, r6
 80014d0:	4465      	add	r5, ip
 80014d2:	46a8      	mov	r8, r5
 80014d4:	4358      	muls	r0, r3
 80014d6:	0c05      	lsrs	r5, r0, #16
 80014d8:	4445      	add	r5, r8
 80014da:	4377      	muls	r7, r6
 80014dc:	42a9      	cmp	r1, r5
 80014de:	d903      	bls.n	80014e8 <__aeabi_dmul+0x22c>
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0249      	lsls	r1, r1, #9
 80014e4:	468c      	mov	ip, r1
 80014e6:	4467      	add	r7, ip
 80014e8:	0c29      	lsrs	r1, r5, #16
 80014ea:	468c      	mov	ip, r1
 80014ec:	0039      	movs	r1, r7
 80014ee:	0400      	lsls	r0, r0, #16
 80014f0:	0c00      	lsrs	r0, r0, #16
 80014f2:	042d      	lsls	r5, r5, #16
 80014f4:	182d      	adds	r5, r5, r0
 80014f6:	4461      	add	r1, ip
 80014f8:	44ab      	add	fp, r5
 80014fa:	9105      	str	r1, [sp, #20]
 80014fc:	4659      	mov	r1, fp
 80014fe:	9104      	str	r1, [sp, #16]
 8001500:	9901      	ldr	r1, [sp, #4]
 8001502:	040f      	lsls	r7, r1, #16
 8001504:	0c3f      	lsrs	r7, r7, #16
 8001506:	0c08      	lsrs	r0, r1, #16
 8001508:	0039      	movs	r1, r7
 800150a:	4351      	muls	r1, r2
 800150c:	4342      	muls	r2, r0
 800150e:	4690      	mov	r8, r2
 8001510:	0002      	movs	r2, r0
 8001512:	468c      	mov	ip, r1
 8001514:	0c09      	lsrs	r1, r1, #16
 8001516:	468b      	mov	fp, r1
 8001518:	4362      	muls	r2, r4
 800151a:	437c      	muls	r4, r7
 800151c:	4444      	add	r4, r8
 800151e:	445c      	add	r4, fp
 8001520:	45a0      	cmp	r8, r4
 8001522:	d903      	bls.n	800152c <__aeabi_dmul+0x270>
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0249      	lsls	r1, r1, #9
 8001528:	4688      	mov	r8, r1
 800152a:	4442      	add	r2, r8
 800152c:	0c21      	lsrs	r1, r4, #16
 800152e:	4688      	mov	r8, r1
 8001530:	4661      	mov	r1, ip
 8001532:	0409      	lsls	r1, r1, #16
 8001534:	0c09      	lsrs	r1, r1, #16
 8001536:	468c      	mov	ip, r1
 8001538:	0039      	movs	r1, r7
 800153a:	4359      	muls	r1, r3
 800153c:	4343      	muls	r3, r0
 800153e:	4370      	muls	r0, r6
 8001540:	437e      	muls	r6, r7
 8001542:	0c0f      	lsrs	r7, r1, #16
 8001544:	18f6      	adds	r6, r6, r3
 8001546:	0424      	lsls	r4, r4, #16
 8001548:	19be      	adds	r6, r7, r6
 800154a:	4464      	add	r4, ip
 800154c:	4442      	add	r2, r8
 800154e:	468c      	mov	ip, r1
 8001550:	42b3      	cmp	r3, r6
 8001552:	d903      	bls.n	800155c <__aeabi_dmul+0x2a0>
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	4698      	mov	r8, r3
 800155a:	4440      	add	r0, r8
 800155c:	9b02      	ldr	r3, [sp, #8]
 800155e:	4661      	mov	r1, ip
 8001560:	4698      	mov	r8, r3
 8001562:	9b04      	ldr	r3, [sp, #16]
 8001564:	0437      	lsls	r7, r6, #16
 8001566:	4443      	add	r3, r8
 8001568:	469b      	mov	fp, r3
 800156a:	45ab      	cmp	fp, r5
 800156c:	41ad      	sbcs	r5, r5
 800156e:	426b      	negs	r3, r5
 8001570:	040d      	lsls	r5, r1, #16
 8001572:	9905      	ldr	r1, [sp, #20]
 8001574:	0c2d      	lsrs	r5, r5, #16
 8001576:	468c      	mov	ip, r1
 8001578:	197f      	adds	r7, r7, r5
 800157a:	4467      	add	r7, ip
 800157c:	18fd      	adds	r5, r7, r3
 800157e:	46a8      	mov	r8, r5
 8001580:	465d      	mov	r5, fp
 8001582:	192d      	adds	r5, r5, r4
 8001584:	42a5      	cmp	r5, r4
 8001586:	41a4      	sbcs	r4, r4
 8001588:	4693      	mov	fp, r2
 800158a:	4264      	negs	r4, r4
 800158c:	46a4      	mov	ip, r4
 800158e:	44c3      	add	fp, r8
 8001590:	44dc      	add	ip, fp
 8001592:	428f      	cmp	r7, r1
 8001594:	41bf      	sbcs	r7, r7
 8001596:	4598      	cmp	r8, r3
 8001598:	419b      	sbcs	r3, r3
 800159a:	4593      	cmp	fp, r2
 800159c:	4192      	sbcs	r2, r2
 800159e:	45a4      	cmp	ip, r4
 80015a0:	41a4      	sbcs	r4, r4
 80015a2:	425b      	negs	r3, r3
 80015a4:	427f      	negs	r7, r7
 80015a6:	431f      	orrs	r7, r3
 80015a8:	0c36      	lsrs	r6, r6, #16
 80015aa:	4252      	negs	r2, r2
 80015ac:	4264      	negs	r4, r4
 80015ae:	19bf      	adds	r7, r7, r6
 80015b0:	4322      	orrs	r2, r4
 80015b2:	18bf      	adds	r7, r7, r2
 80015b4:	4662      	mov	r2, ip
 80015b6:	1838      	adds	r0, r7, r0
 80015b8:	0243      	lsls	r3, r0, #9
 80015ba:	0dd2      	lsrs	r2, r2, #23
 80015bc:	9903      	ldr	r1, [sp, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	026a      	lsls	r2, r5, #9
 80015c2:	430a      	orrs	r2, r1
 80015c4:	1e50      	subs	r0, r2, #1
 80015c6:	4182      	sbcs	r2, r0
 80015c8:	4661      	mov	r1, ip
 80015ca:	0ded      	lsrs	r5, r5, #23
 80015cc:	432a      	orrs	r2, r5
 80015ce:	024e      	lsls	r6, r1, #9
 80015d0:	4332      	orrs	r2, r6
 80015d2:	01d9      	lsls	r1, r3, #7
 80015d4:	d400      	bmi.n	80015d8 <__aeabi_dmul+0x31c>
 80015d6:	e0b3      	b.n	8001740 <__aeabi_dmul+0x484>
 80015d8:	2601      	movs	r6, #1
 80015da:	0850      	lsrs	r0, r2, #1
 80015dc:	4032      	ands	r2, r6
 80015de:	4302      	orrs	r2, r0
 80015e0:	07de      	lsls	r6, r3, #31
 80015e2:	4332      	orrs	r2, r6
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	4c22      	ldr	r4, [pc, #136]	; (8001670 <__aeabi_dmul+0x3b4>)
 80015e8:	4454      	add	r4, sl
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	dd62      	ble.n	80016b4 <__aeabi_dmul+0x3f8>
 80015ee:	0751      	lsls	r1, r2, #29
 80015f0:	d009      	beq.n	8001606 <__aeabi_dmul+0x34a>
 80015f2:	200f      	movs	r0, #15
 80015f4:	4010      	ands	r0, r2
 80015f6:	2804      	cmp	r0, #4
 80015f8:	d005      	beq.n	8001606 <__aeabi_dmul+0x34a>
 80015fa:	1d10      	adds	r0, r2, #4
 80015fc:	4290      	cmp	r0, r2
 80015fe:	4192      	sbcs	r2, r2
 8001600:	4252      	negs	r2, r2
 8001602:	189b      	adds	r3, r3, r2
 8001604:	0002      	movs	r2, r0
 8001606:	01d9      	lsls	r1, r3, #7
 8001608:	d504      	bpl.n	8001614 <__aeabi_dmul+0x358>
 800160a:	2480      	movs	r4, #128	; 0x80
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <__aeabi_dmul+0x3b8>)
 800160e:	00e4      	lsls	r4, r4, #3
 8001610:	4003      	ands	r3, r0
 8001612:	4454      	add	r4, sl
 8001614:	4818      	ldr	r0, [pc, #96]	; (8001678 <__aeabi_dmul+0x3bc>)
 8001616:	4284      	cmp	r4, r0
 8001618:	dd00      	ble.n	800161c <__aeabi_dmul+0x360>
 800161a:	e727      	b.n	800146c <__aeabi_dmul+0x1b0>
 800161c:	075e      	lsls	r6, r3, #29
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	08d2      	lsrs	r2, r2, #3
 8001622:	0b1f      	lsrs	r7, r3, #12
 8001624:	0563      	lsls	r3, r4, #21
 8001626:	4316      	orrs	r6, r2
 8001628:	0d5b      	lsrs	r3, r3, #21
 800162a:	e6b2      	b.n	8001392 <__aeabi_dmul+0xd6>
 800162c:	2300      	movs	r3, #0
 800162e:	4699      	mov	r9, r3
 8001630:	3301      	adds	r3, #1
 8001632:	2704      	movs	r7, #4
 8001634:	2600      	movs	r6, #0
 8001636:	469b      	mov	fp, r3
 8001638:	e664      	b.n	8001304 <__aeabi_dmul+0x48>
 800163a:	2303      	movs	r3, #3
 800163c:	9701      	str	r7, [sp, #4]
 800163e:	4681      	mov	r9, r0
 8001640:	270c      	movs	r7, #12
 8001642:	469b      	mov	fp, r3
 8001644:	e65e      	b.n	8001304 <__aeabi_dmul+0x48>
 8001646:	2201      	movs	r2, #1
 8001648:	2001      	movs	r0, #1
 800164a:	4317      	orrs	r7, r2
 800164c:	2200      	movs	r2, #0
 800164e:	e676      	b.n	800133e <__aeabi_dmul+0x82>
 8001650:	2303      	movs	r3, #3
 8001652:	2003      	movs	r0, #3
 8001654:	431f      	orrs	r7, r3
 8001656:	4643      	mov	r3, r8
 8001658:	e671      	b.n	800133e <__aeabi_dmul+0x82>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	000007ff 	.word	0x000007ff
 8001660:	fffffc01 	.word	0xfffffc01
 8001664:	0800623c 	.word	0x0800623c
 8001668:	800fffff 	.word	0x800fffff
 800166c:	fffffc0d 	.word	0xfffffc0d
 8001670:	000003ff 	.word	0x000003ff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	000007fe 	.word	0x000007fe
 800167c:	2300      	movs	r3, #0
 800167e:	2780      	movs	r7, #128	; 0x80
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	033f      	lsls	r7, r7, #12
 8001684:	2600      	movs	r6, #0
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <__aeabi_dmul+0x4d8>)
 8001688:	e683      	b.n	8001392 <__aeabi_dmul+0xd6>
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	0032      	movs	r2, r6
 800168e:	46a4      	mov	ip, r4
 8001690:	4658      	mov	r0, fp
 8001692:	e670      	b.n	8001376 <__aeabi_dmul+0xba>
 8001694:	46ac      	mov	ip, r5
 8001696:	e66e      	b.n	8001376 <__aeabi_dmul+0xba>
 8001698:	2780      	movs	r7, #128	; 0x80
 800169a:	9901      	ldr	r1, [sp, #4]
 800169c:	033f      	lsls	r7, r7, #12
 800169e:	4239      	tst	r1, r7
 80016a0:	d02d      	beq.n	80016fe <__aeabi_dmul+0x442>
 80016a2:	423b      	tst	r3, r7
 80016a4:	d12b      	bne.n	80016fe <__aeabi_dmul+0x442>
 80016a6:	431f      	orrs	r7, r3
 80016a8:	033f      	lsls	r7, r7, #12
 80016aa:	0b3f      	lsrs	r7, r7, #12
 80016ac:	9500      	str	r5, [sp, #0]
 80016ae:	0016      	movs	r6, r2
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <__aeabi_dmul+0x4d8>)
 80016b2:	e66e      	b.n	8001392 <__aeabi_dmul+0xd6>
 80016b4:	2501      	movs	r5, #1
 80016b6:	1b2d      	subs	r5, r5, r4
 80016b8:	2d38      	cmp	r5, #56	; 0x38
 80016ba:	dd00      	ble.n	80016be <__aeabi_dmul+0x402>
 80016bc:	e666      	b.n	800138c <__aeabi_dmul+0xd0>
 80016be:	2d1f      	cmp	r5, #31
 80016c0:	dc40      	bgt.n	8001744 <__aeabi_dmul+0x488>
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <__aeabi_dmul+0x4dc>)
 80016c4:	001c      	movs	r4, r3
 80016c6:	4450      	add	r0, sl
 80016c8:	0016      	movs	r6, r2
 80016ca:	4082      	lsls	r2, r0
 80016cc:	4084      	lsls	r4, r0
 80016ce:	40ee      	lsrs	r6, r5
 80016d0:	1e50      	subs	r0, r2, #1
 80016d2:	4182      	sbcs	r2, r0
 80016d4:	4334      	orrs	r4, r6
 80016d6:	4314      	orrs	r4, r2
 80016d8:	40eb      	lsrs	r3, r5
 80016da:	0762      	lsls	r2, r4, #29
 80016dc:	d009      	beq.n	80016f2 <__aeabi_dmul+0x436>
 80016de:	220f      	movs	r2, #15
 80016e0:	4022      	ands	r2, r4
 80016e2:	2a04      	cmp	r2, #4
 80016e4:	d005      	beq.n	80016f2 <__aeabi_dmul+0x436>
 80016e6:	0022      	movs	r2, r4
 80016e8:	1d14      	adds	r4, r2, #4
 80016ea:	4294      	cmp	r4, r2
 80016ec:	4180      	sbcs	r0, r0
 80016ee:	4240      	negs	r0, r0
 80016f0:	181b      	adds	r3, r3, r0
 80016f2:	021a      	lsls	r2, r3, #8
 80016f4:	d53e      	bpl.n	8001774 <__aeabi_dmul+0x4b8>
 80016f6:	2301      	movs	r3, #1
 80016f8:	2700      	movs	r7, #0
 80016fa:	2600      	movs	r6, #0
 80016fc:	e649      	b.n	8001392 <__aeabi_dmul+0xd6>
 80016fe:	2780      	movs	r7, #128	; 0x80
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	033f      	lsls	r7, r7, #12
 8001704:	431f      	orrs	r7, r3
 8001706:	033f      	lsls	r7, r7, #12
 8001708:	0b3f      	lsrs	r7, r7, #12
 800170a:	9400      	str	r4, [sp, #0]
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <__aeabi_dmul+0x4d8>)
 800170e:	e640      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001710:	0003      	movs	r3, r0
 8001712:	465a      	mov	r2, fp
 8001714:	3b28      	subs	r3, #40	; 0x28
 8001716:	409a      	lsls	r2, r3
 8001718:	2600      	movs	r6, #0
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	e66d      	b.n	80013fa <__aeabi_dmul+0x13e>
 800171e:	4658      	mov	r0, fp
 8001720:	f000 fc28 	bl	8001f74 <__clzsi2>
 8001724:	3020      	adds	r0, #32
 8001726:	e657      	b.n	80013d8 <__aeabi_dmul+0x11c>
 8001728:	0003      	movs	r3, r0
 800172a:	4652      	mov	r2, sl
 800172c:	3b28      	subs	r3, #40	; 0x28
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	2200      	movs	r2, #0
 8001734:	e693      	b.n	800145e <__aeabi_dmul+0x1a2>
 8001736:	4650      	mov	r0, sl
 8001738:	f000 fc1c 	bl	8001f74 <__clzsi2>
 800173c:	3020      	adds	r0, #32
 800173e:	e67b      	b.n	8001438 <__aeabi_dmul+0x17c>
 8001740:	46ca      	mov	sl, r9
 8001742:	e750      	b.n	80015e6 <__aeabi_dmul+0x32a>
 8001744:	201f      	movs	r0, #31
 8001746:	001e      	movs	r6, r3
 8001748:	4240      	negs	r0, r0
 800174a:	1b04      	subs	r4, r0, r4
 800174c:	40e6      	lsrs	r6, r4
 800174e:	2d20      	cmp	r5, #32
 8001750:	d003      	beq.n	800175a <__aeabi_dmul+0x49e>
 8001752:	4c12      	ldr	r4, [pc, #72]	; (800179c <__aeabi_dmul+0x4e0>)
 8001754:	4454      	add	r4, sl
 8001756:	40a3      	lsls	r3, r4
 8001758:	431a      	orrs	r2, r3
 800175a:	1e50      	subs	r0, r2, #1
 800175c:	4182      	sbcs	r2, r0
 800175e:	4332      	orrs	r2, r6
 8001760:	2607      	movs	r6, #7
 8001762:	2700      	movs	r7, #0
 8001764:	4016      	ands	r6, r2
 8001766:	d009      	beq.n	800177c <__aeabi_dmul+0x4c0>
 8001768:	200f      	movs	r0, #15
 800176a:	2300      	movs	r3, #0
 800176c:	4010      	ands	r0, r2
 800176e:	0014      	movs	r4, r2
 8001770:	2804      	cmp	r0, #4
 8001772:	d1b9      	bne.n	80016e8 <__aeabi_dmul+0x42c>
 8001774:	0022      	movs	r2, r4
 8001776:	075e      	lsls	r6, r3, #29
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	0b1f      	lsrs	r7, r3, #12
 800177c:	08d2      	lsrs	r2, r2, #3
 800177e:	4316      	orrs	r6, r2
 8001780:	2300      	movs	r3, #0
 8001782:	e606      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001784:	2780      	movs	r7, #128	; 0x80
 8001786:	033f      	lsls	r7, r7, #12
 8001788:	431f      	orrs	r7, r3
 800178a:	033f      	lsls	r7, r7, #12
 800178c:	0b3f      	lsrs	r7, r7, #12
 800178e:	0016      	movs	r6, r2
 8001790:	4b00      	ldr	r3, [pc, #0]	; (8001794 <__aeabi_dmul+0x4d8>)
 8001792:	e5fe      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001794:	000007ff 	.word	0x000007ff
 8001798:	0000041e 	.word	0x0000041e
 800179c:	0000043e 	.word	0x0000043e

080017a0 <__aeabi_dsub>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	4657      	mov	r7, sl
 80017a4:	464e      	mov	r6, r9
 80017a6:	4645      	mov	r5, r8
 80017a8:	46de      	mov	lr, fp
 80017aa:	000c      	movs	r4, r1
 80017ac:	0309      	lsls	r1, r1, #12
 80017ae:	b5e0      	push	{r5, r6, r7, lr}
 80017b0:	0a49      	lsrs	r1, r1, #9
 80017b2:	0f46      	lsrs	r6, r0, #29
 80017b4:	005f      	lsls	r7, r3, #1
 80017b6:	4331      	orrs	r1, r6
 80017b8:	031e      	lsls	r6, r3, #12
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	0a76      	lsrs	r6, r6, #9
 80017be:	469b      	mov	fp, r3
 80017c0:	0f53      	lsrs	r3, r2, #29
 80017c2:	4333      	orrs	r3, r6
 80017c4:	4ec8      	ldr	r6, [pc, #800]	; (8001ae8 <__aeabi_dsub+0x348>)
 80017c6:	0065      	lsls	r5, r4, #1
 80017c8:	00c0      	lsls	r0, r0, #3
 80017ca:	0fe4      	lsrs	r4, r4, #31
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	0d6d      	lsrs	r5, r5, #21
 80017d0:	46a2      	mov	sl, r4
 80017d2:	4681      	mov	r9, r0
 80017d4:	0d7f      	lsrs	r7, r7, #21
 80017d6:	469c      	mov	ip, r3
 80017d8:	4690      	mov	r8, r2
 80017da:	42b7      	cmp	r7, r6
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dsub+0x40>
 80017de:	e0b9      	b.n	8001954 <__aeabi_dsub+0x1b4>
 80017e0:	465b      	mov	r3, fp
 80017e2:	2601      	movs	r6, #1
 80017e4:	4073      	eors	r3, r6
 80017e6:	469b      	mov	fp, r3
 80017e8:	1bee      	subs	r6, r5, r7
 80017ea:	45a3      	cmp	fp, r4
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dsub+0x50>
 80017ee:	e083      	b.n	80018f8 <__aeabi_dsub+0x158>
 80017f0:	2e00      	cmp	r6, #0
 80017f2:	dd63      	ble.n	80018bc <__aeabi_dsub+0x11c>
 80017f4:	2f00      	cmp	r7, #0
 80017f6:	d000      	beq.n	80017fa <__aeabi_dsub+0x5a>
 80017f8:	e0b1      	b.n	800195e <__aeabi_dsub+0x1be>
 80017fa:	4663      	mov	r3, ip
 80017fc:	4313      	orrs	r3, r2
 80017fe:	d100      	bne.n	8001802 <__aeabi_dsub+0x62>
 8001800:	e123      	b.n	8001a4a <__aeabi_dsub+0x2aa>
 8001802:	1e73      	subs	r3, r6, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d000      	beq.n	800180a <__aeabi_dsub+0x6a>
 8001808:	e1ba      	b.n	8001b80 <__aeabi_dsub+0x3e0>
 800180a:	1a86      	subs	r6, r0, r2
 800180c:	4663      	mov	r3, ip
 800180e:	42b0      	cmp	r0, r6
 8001810:	4180      	sbcs	r0, r0
 8001812:	2501      	movs	r5, #1
 8001814:	1ac9      	subs	r1, r1, r3
 8001816:	4240      	negs	r0, r0
 8001818:	1a09      	subs	r1, r1, r0
 800181a:	020b      	lsls	r3, r1, #8
 800181c:	d400      	bmi.n	8001820 <__aeabi_dsub+0x80>
 800181e:	e147      	b.n	8001ab0 <__aeabi_dsub+0x310>
 8001820:	0249      	lsls	r1, r1, #9
 8001822:	0a4b      	lsrs	r3, r1, #9
 8001824:	4698      	mov	r8, r3
 8001826:	4643      	mov	r3, r8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x8e>
 800182c:	e189      	b.n	8001b42 <__aeabi_dsub+0x3a2>
 800182e:	4640      	mov	r0, r8
 8001830:	f000 fba0 	bl	8001f74 <__clzsi2>
 8001834:	0003      	movs	r3, r0
 8001836:	3b08      	subs	r3, #8
 8001838:	2b1f      	cmp	r3, #31
 800183a:	dd00      	ble.n	800183e <__aeabi_dsub+0x9e>
 800183c:	e17c      	b.n	8001b38 <__aeabi_dsub+0x398>
 800183e:	2220      	movs	r2, #32
 8001840:	0030      	movs	r0, r6
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	4641      	mov	r1, r8
 8001846:	40d0      	lsrs	r0, r2
 8001848:	4099      	lsls	r1, r3
 800184a:	0002      	movs	r2, r0
 800184c:	409e      	lsls	r6, r3
 800184e:	430a      	orrs	r2, r1
 8001850:	429d      	cmp	r5, r3
 8001852:	dd00      	ble.n	8001856 <__aeabi_dsub+0xb6>
 8001854:	e16a      	b.n	8001b2c <__aeabi_dsub+0x38c>
 8001856:	1b5d      	subs	r5, r3, r5
 8001858:	1c6b      	adds	r3, r5, #1
 800185a:	2b1f      	cmp	r3, #31
 800185c:	dd00      	ble.n	8001860 <__aeabi_dsub+0xc0>
 800185e:	e194      	b.n	8001b8a <__aeabi_dsub+0x3ea>
 8001860:	2120      	movs	r1, #32
 8001862:	0010      	movs	r0, r2
 8001864:	0035      	movs	r5, r6
 8001866:	1ac9      	subs	r1, r1, r3
 8001868:	408e      	lsls	r6, r1
 800186a:	40da      	lsrs	r2, r3
 800186c:	4088      	lsls	r0, r1
 800186e:	40dd      	lsrs	r5, r3
 8001870:	1e71      	subs	r1, r6, #1
 8001872:	418e      	sbcs	r6, r1
 8001874:	0011      	movs	r1, r2
 8001876:	2207      	movs	r2, #7
 8001878:	4328      	orrs	r0, r5
 800187a:	2500      	movs	r5, #0
 800187c:	4306      	orrs	r6, r0
 800187e:	4032      	ands	r2, r6
 8001880:	2a00      	cmp	r2, #0
 8001882:	d009      	beq.n	8001898 <__aeabi_dsub+0xf8>
 8001884:	230f      	movs	r3, #15
 8001886:	4033      	ands	r3, r6
 8001888:	2b04      	cmp	r3, #4
 800188a:	d005      	beq.n	8001898 <__aeabi_dsub+0xf8>
 800188c:	1d33      	adds	r3, r6, #4
 800188e:	42b3      	cmp	r3, r6
 8001890:	41b6      	sbcs	r6, r6
 8001892:	4276      	negs	r6, r6
 8001894:	1989      	adds	r1, r1, r6
 8001896:	001e      	movs	r6, r3
 8001898:	020b      	lsls	r3, r1, #8
 800189a:	d400      	bmi.n	800189e <__aeabi_dsub+0xfe>
 800189c:	e23d      	b.n	8001d1a <__aeabi_dsub+0x57a>
 800189e:	1c6a      	adds	r2, r5, #1
 80018a0:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <__aeabi_dsub+0x348>)
 80018a2:	0555      	lsls	r5, r2, #21
 80018a4:	0d6d      	lsrs	r5, r5, #21
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x10c>
 80018aa:	e119      	b.n	8001ae0 <__aeabi_dsub+0x340>
 80018ac:	4a8f      	ldr	r2, [pc, #572]	; (8001aec <__aeabi_dsub+0x34c>)
 80018ae:	08f6      	lsrs	r6, r6, #3
 80018b0:	400a      	ands	r2, r1
 80018b2:	0757      	lsls	r7, r2, #29
 80018b4:	0252      	lsls	r2, r2, #9
 80018b6:	4337      	orrs	r7, r6
 80018b8:	0b12      	lsrs	r2, r2, #12
 80018ba:	e09b      	b.n	80019f4 <__aeabi_dsub+0x254>
 80018bc:	2e00      	cmp	r6, #0
 80018be:	d000      	beq.n	80018c2 <__aeabi_dsub+0x122>
 80018c0:	e0c5      	b.n	8001a4e <__aeabi_dsub+0x2ae>
 80018c2:	1c6e      	adds	r6, r5, #1
 80018c4:	0576      	lsls	r6, r6, #21
 80018c6:	0d76      	lsrs	r6, r6, #21
 80018c8:	2e01      	cmp	r6, #1
 80018ca:	dc00      	bgt.n	80018ce <__aeabi_dsub+0x12e>
 80018cc:	e148      	b.n	8001b60 <__aeabi_dsub+0x3c0>
 80018ce:	4667      	mov	r7, ip
 80018d0:	1a86      	subs	r6, r0, r2
 80018d2:	1bcb      	subs	r3, r1, r7
 80018d4:	42b0      	cmp	r0, r6
 80018d6:	41bf      	sbcs	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	46b8      	mov	r8, r7
 80018dc:	001f      	movs	r7, r3
 80018de:	4643      	mov	r3, r8
 80018e0:	1aff      	subs	r7, r7, r3
 80018e2:	003b      	movs	r3, r7
 80018e4:	46b8      	mov	r8, r7
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	d500      	bpl.n	80018ec <__aeabi_dsub+0x14c>
 80018ea:	e15f      	b.n	8001bac <__aeabi_dsub+0x40c>
 80018ec:	4337      	orrs	r7, r6
 80018ee:	d19a      	bne.n	8001826 <__aeabi_dsub+0x86>
 80018f0:	2200      	movs	r2, #0
 80018f2:	2400      	movs	r4, #0
 80018f4:	2500      	movs	r5, #0
 80018f6:	e079      	b.n	80019ec <__aeabi_dsub+0x24c>
 80018f8:	2e00      	cmp	r6, #0
 80018fa:	dc00      	bgt.n	80018fe <__aeabi_dsub+0x15e>
 80018fc:	e0fa      	b.n	8001af4 <__aeabi_dsub+0x354>
 80018fe:	2f00      	cmp	r7, #0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x164>
 8001902:	e08d      	b.n	8001a20 <__aeabi_dsub+0x280>
 8001904:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001906:	429d      	cmp	r5, r3
 8001908:	d067      	beq.n	80019da <__aeabi_dsub+0x23a>
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	4667      	mov	r7, ip
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	431f      	orrs	r7, r3
 8001912:	46bc      	mov	ip, r7
 8001914:	2e38      	cmp	r6, #56	; 0x38
 8001916:	dc00      	bgt.n	800191a <__aeabi_dsub+0x17a>
 8001918:	e152      	b.n	8001bc0 <__aeabi_dsub+0x420>
 800191a:	4663      	mov	r3, ip
 800191c:	4313      	orrs	r3, r2
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	4193      	sbcs	r3, r2
 8001922:	181e      	adds	r6, r3, r0
 8001924:	4286      	cmp	r6, r0
 8001926:	4180      	sbcs	r0, r0
 8001928:	4240      	negs	r0, r0
 800192a:	1809      	adds	r1, r1, r0
 800192c:	020b      	lsls	r3, r1, #8
 800192e:	d400      	bmi.n	8001932 <__aeabi_dsub+0x192>
 8001930:	e0be      	b.n	8001ab0 <__aeabi_dsub+0x310>
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001934:	3501      	adds	r5, #1
 8001936:	429d      	cmp	r5, r3
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x19c>
 800193a:	e0d2      	b.n	8001ae2 <__aeabi_dsub+0x342>
 800193c:	4a6b      	ldr	r2, [pc, #428]	; (8001aec <__aeabi_dsub+0x34c>)
 800193e:	0873      	lsrs	r3, r6, #1
 8001940:	400a      	ands	r2, r1
 8001942:	2101      	movs	r1, #1
 8001944:	400e      	ands	r6, r1
 8001946:	431e      	orrs	r6, r3
 8001948:	0851      	lsrs	r1, r2, #1
 800194a:	07d3      	lsls	r3, r2, #31
 800194c:	2207      	movs	r2, #7
 800194e:	431e      	orrs	r6, r3
 8001950:	4032      	ands	r2, r6
 8001952:	e795      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001954:	001e      	movs	r6, r3
 8001956:	4316      	orrs	r6, r2
 8001958:	d000      	beq.n	800195c <__aeabi_dsub+0x1bc>
 800195a:	e745      	b.n	80017e8 <__aeabi_dsub+0x48>
 800195c:	e740      	b.n	80017e0 <__aeabi_dsub+0x40>
 800195e:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001960:	429d      	cmp	r5, r3
 8001962:	d03a      	beq.n	80019da <__aeabi_dsub+0x23a>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	4667      	mov	r7, ip
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431f      	orrs	r7, r3
 800196c:	46bc      	mov	ip, r7
 800196e:	2e38      	cmp	r6, #56	; 0x38
 8001970:	dd00      	ble.n	8001974 <__aeabi_dsub+0x1d4>
 8001972:	e0eb      	b.n	8001b4c <__aeabi_dsub+0x3ac>
 8001974:	2e1f      	cmp	r6, #31
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x1da>
 8001978:	e13a      	b.n	8001bf0 <__aeabi_dsub+0x450>
 800197a:	0033      	movs	r3, r6
 800197c:	4667      	mov	r7, ip
 800197e:	3b20      	subs	r3, #32
 8001980:	40df      	lsrs	r7, r3
 8001982:	003b      	movs	r3, r7
 8001984:	2e20      	cmp	r6, #32
 8001986:	d005      	beq.n	8001994 <__aeabi_dsub+0x1f4>
 8001988:	2740      	movs	r7, #64	; 0x40
 800198a:	1bbf      	subs	r7, r7, r6
 800198c:	4666      	mov	r6, ip
 800198e:	40be      	lsls	r6, r7
 8001990:	4332      	orrs	r2, r6
 8001992:	4690      	mov	r8, r2
 8001994:	4646      	mov	r6, r8
 8001996:	1e72      	subs	r2, r6, #1
 8001998:	4196      	sbcs	r6, r2
 800199a:	4333      	orrs	r3, r6
 800199c:	e0da      	b.n	8001b54 <__aeabi_dsub+0x3b4>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x204>
 80019a2:	e214      	b.n	8001dce <__aeabi_dsub+0x62e>
 80019a4:	4663      	mov	r3, ip
 80019a6:	4313      	orrs	r3, r2
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x20c>
 80019aa:	e168      	b.n	8001c7e <__aeabi_dsub+0x4de>
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	074e      	lsls	r6, r1, #29
 80019b0:	08c0      	lsrs	r0, r0, #3
 80019b2:	08c9      	lsrs	r1, r1, #3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	4306      	orrs	r6, r0
 80019b8:	4219      	tst	r1, r3
 80019ba:	d008      	beq.n	80019ce <__aeabi_dsub+0x22e>
 80019bc:	4660      	mov	r0, ip
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	4218      	tst	r0, r3
 80019c2:	d104      	bne.n	80019ce <__aeabi_dsub+0x22e>
 80019c4:	4663      	mov	r3, ip
 80019c6:	0001      	movs	r1, r0
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	075e      	lsls	r6, r3, #29
 80019cc:	4316      	orrs	r6, r2
 80019ce:	00f3      	lsls	r3, r6, #3
 80019d0:	4699      	mov	r9, r3
 80019d2:	00c9      	lsls	r1, r1, #3
 80019d4:	0f72      	lsrs	r2, r6, #29
 80019d6:	4d44      	ldr	r5, [pc, #272]	; (8001ae8 <__aeabi_dsub+0x348>)
 80019d8:	4311      	orrs	r1, r2
 80019da:	464b      	mov	r3, r9
 80019dc:	08de      	lsrs	r6, r3, #3
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <__aeabi_dsub+0x348>)
 80019e0:	074f      	lsls	r7, r1, #29
 80019e2:	4337      	orrs	r7, r6
 80019e4:	08ca      	lsrs	r2, r1, #3
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x24c>
 80019ea:	e06e      	b.n	8001aca <__aeabi_dsub+0x32a>
 80019ec:	0312      	lsls	r2, r2, #12
 80019ee:	056d      	lsls	r5, r5, #21
 80019f0:	0b12      	lsrs	r2, r2, #12
 80019f2:	0d6d      	lsrs	r5, r5, #21
 80019f4:	2100      	movs	r1, #0
 80019f6:	0312      	lsls	r2, r2, #12
 80019f8:	0b13      	lsrs	r3, r2, #12
 80019fa:	0d0a      	lsrs	r2, r1, #20
 80019fc:	0512      	lsls	r2, r2, #20
 80019fe:	431a      	orrs	r2, r3
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <__aeabi_dsub+0x350>)
 8001a02:	052d      	lsls	r5, r5, #20
 8001a04:	4013      	ands	r3, r2
 8001a06:	432b      	orrs	r3, r5
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	07e4      	lsls	r4, r4, #31
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	0038      	movs	r0, r7
 8001a12:	0019      	movs	r1, r3
 8001a14:	bc3c      	pop	{r2, r3, r4, r5}
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	46a2      	mov	sl, r4
 8001a1c:	46ab      	mov	fp, r5
 8001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a20:	4663      	mov	r3, ip
 8001a22:	4313      	orrs	r3, r2
 8001a24:	d011      	beq.n	8001a4a <__aeabi_dsub+0x2aa>
 8001a26:	1e73      	subs	r3, r6, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x28e>
 8001a2c:	e107      	b.n	8001c3e <__aeabi_dsub+0x49e>
 8001a2e:	1886      	adds	r6, r0, r2
 8001a30:	4286      	cmp	r6, r0
 8001a32:	4180      	sbcs	r0, r0
 8001a34:	4461      	add	r1, ip
 8001a36:	4240      	negs	r0, r0
 8001a38:	1809      	adds	r1, r1, r0
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	020b      	lsls	r3, r1, #8
 8001a3e:	d537      	bpl.n	8001ab0 <__aeabi_dsub+0x310>
 8001a40:	2502      	movs	r5, #2
 8001a42:	e77b      	b.n	800193c <__aeabi_dsub+0x19c>
 8001a44:	003e      	movs	r6, r7
 8001a46:	4661      	mov	r1, ip
 8001a48:	4691      	mov	r9, r2
 8001a4a:	0035      	movs	r5, r6
 8001a4c:	e7c5      	b.n	80019da <__aeabi_dsub+0x23a>
 8001a4e:	465c      	mov	r4, fp
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x2b6>
 8001a54:	e0e1      	b.n	8001c1a <__aeabi_dsub+0x47a>
 8001a56:	000b      	movs	r3, r1
 8001a58:	4303      	orrs	r3, r0
 8001a5a:	d0f3      	beq.n	8001a44 <__aeabi_dsub+0x2a4>
 8001a5c:	1c73      	adds	r3, r6, #1
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x2c2>
 8001a60:	e1ac      	b.n	8001dbc <__aeabi_dsub+0x61c>
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x2ca>
 8001a68:	e13a      	b.n	8001ce0 <__aeabi_dsub+0x540>
 8001a6a:	43f3      	mvns	r3, r6
 8001a6c:	2b38      	cmp	r3, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dsub+0x2d2>
 8001a70:	e16f      	b.n	8001d52 <__aeabi_dsub+0x5b2>
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	dd00      	ble.n	8001a78 <__aeabi_dsub+0x2d8>
 8001a76:	e18c      	b.n	8001d92 <__aeabi_dsub+0x5f2>
 8001a78:	2520      	movs	r5, #32
 8001a7a:	000e      	movs	r6, r1
 8001a7c:	1aed      	subs	r5, r5, r3
 8001a7e:	40ae      	lsls	r6, r5
 8001a80:	46b0      	mov	r8, r6
 8001a82:	0006      	movs	r6, r0
 8001a84:	46aa      	mov	sl, r5
 8001a86:	40de      	lsrs	r6, r3
 8001a88:	4645      	mov	r5, r8
 8001a8a:	4335      	orrs	r5, r6
 8001a8c:	002e      	movs	r6, r5
 8001a8e:	4655      	mov	r5, sl
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	40a8      	lsls	r0, r5
 8001a94:	4663      	mov	r3, ip
 8001a96:	1e45      	subs	r5, r0, #1
 8001a98:	41a8      	sbcs	r0, r5
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	4330      	orrs	r0, r6
 8001aa0:	1a16      	subs	r6, r2, r0
 8001aa2:	42b2      	cmp	r2, r6
 8001aa4:	4192      	sbcs	r2, r2
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	4252      	negs	r2, r2
 8001aaa:	1a99      	subs	r1, r3, r2
 8001aac:	003d      	movs	r5, r7
 8001aae:	e6b4      	b.n	800181a <__aeabi_dsub+0x7a>
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	4032      	ands	r2, r6
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dsub+0x31a>
 8001ab8:	e6e4      	b.n	8001884 <__aeabi_dsub+0xe4>
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001abc:	08f6      	lsrs	r6, r6, #3
 8001abe:	074f      	lsls	r7, r1, #29
 8001ac0:	4337      	orrs	r7, r6
 8001ac2:	08ca      	lsrs	r2, r1, #3
 8001ac4:	429d      	cmp	r5, r3
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x32a>
 8001ac8:	e790      	b.n	80019ec <__aeabi_dsub+0x24c>
 8001aca:	003b      	movs	r3, r7
 8001acc:	4313      	orrs	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x332>
 8001ad0:	e1a6      	b.n	8001e20 <__aeabi_dsub+0x680>
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	031b      	lsls	r3, r3, #12
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	0312      	lsls	r2, r2, #12
 8001ada:	0b12      	lsrs	r2, r2, #12
 8001adc:	4d02      	ldr	r5, [pc, #8]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001ade:	e789      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001ae0:	0015      	movs	r5, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2700      	movs	r7, #0
 8001ae6:	e785      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001ae8:	000007ff 	.word	0x000007ff
 8001aec:	ff7fffff 	.word	0xff7fffff
 8001af0:	800fffff 	.word	0x800fffff
 8001af4:	2e00      	cmp	r6, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x35a>
 8001af8:	e0c7      	b.n	8001c8a <__aeabi_dsub+0x4ea>
 8001afa:	1c6b      	adds	r3, r5, #1
 8001afc:	055e      	lsls	r6, r3, #21
 8001afe:	0d76      	lsrs	r6, r6, #21
 8001b00:	2e01      	cmp	r6, #1
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x366>
 8001b04:	e0f0      	b.n	8001ce8 <__aeabi_dsub+0x548>
 8001b06:	4dc8      	ldr	r5, [pc, #800]	; (8001e28 <__aeabi_dsub+0x688>)
 8001b08:	42ab      	cmp	r3, r5
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x36e>
 8001b0c:	e0b9      	b.n	8001c82 <__aeabi_dsub+0x4e2>
 8001b0e:	1885      	adds	r5, r0, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	4285      	cmp	r5, r0
 8001b14:	4189      	sbcs	r1, r1
 8001b16:	4462      	add	r2, ip
 8001b18:	4249      	negs	r1, r1
 8001b1a:	1851      	adds	r1, r2, r1
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	07ce      	lsls	r6, r1, #31
 8001b20:	086d      	lsrs	r5, r5, #1
 8001b22:	432e      	orrs	r6, r5
 8001b24:	0849      	lsrs	r1, r1, #1
 8001b26:	4032      	ands	r2, r6
 8001b28:	001d      	movs	r5, r3
 8001b2a:	e6a9      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001b2c:	49bf      	ldr	r1, [pc, #764]	; (8001e2c <__aeabi_dsub+0x68c>)
 8001b2e:	1aed      	subs	r5, r5, r3
 8001b30:	4011      	ands	r1, r2
 8001b32:	2207      	movs	r2, #7
 8001b34:	4032      	ands	r2, r6
 8001b36:	e6a3      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001b38:	0032      	movs	r2, r6
 8001b3a:	3828      	subs	r0, #40	; 0x28
 8001b3c:	4082      	lsls	r2, r0
 8001b3e:	2600      	movs	r6, #0
 8001b40:	e686      	b.n	8001850 <__aeabi_dsub+0xb0>
 8001b42:	0030      	movs	r0, r6
 8001b44:	f000 fa16 	bl	8001f74 <__clzsi2>
 8001b48:	3020      	adds	r0, #32
 8001b4a:	e673      	b.n	8001834 <__aeabi_dsub+0x94>
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	4193      	sbcs	r3, r2
 8001b54:	1ac6      	subs	r6, r0, r3
 8001b56:	42b0      	cmp	r0, r6
 8001b58:	4180      	sbcs	r0, r0
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	1a09      	subs	r1, r1, r0
 8001b5e:	e65c      	b.n	800181a <__aeabi_dsub+0x7a>
 8001b60:	000e      	movs	r6, r1
 8001b62:	4667      	mov	r7, ip
 8001b64:	4306      	orrs	r6, r0
 8001b66:	4317      	orrs	r7, r2
 8001b68:	2d00      	cmp	r5, #0
 8001b6a:	d15e      	bne.n	8001c2a <__aeabi_dsub+0x48a>
 8001b6c:	2e00      	cmp	r6, #0
 8001b6e:	d000      	beq.n	8001b72 <__aeabi_dsub+0x3d2>
 8001b70:	e0f3      	b.n	8001d5a <__aeabi_dsub+0x5ba>
 8001b72:	2f00      	cmp	r7, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x3d8>
 8001b76:	e11e      	b.n	8001db6 <__aeabi_dsub+0x616>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4661      	mov	r1, ip
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	e72c      	b.n	80019da <__aeabi_dsub+0x23a>
 8001b80:	4fa9      	ldr	r7, [pc, #676]	; (8001e28 <__aeabi_dsub+0x688>)
 8001b82:	42be      	cmp	r6, r7
 8001b84:	d07b      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001b86:	001e      	movs	r6, r3
 8001b88:	e6f1      	b.n	800196e <__aeabi_dsub+0x1ce>
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	3d1f      	subs	r5, #31
 8001b8e:	40e8      	lsrs	r0, r5
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d003      	beq.n	8001b9c <__aeabi_dsub+0x3fc>
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	1acb      	subs	r3, r1, r3
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	4316      	orrs	r6, r2
 8001b9c:	1e73      	subs	r3, r6, #1
 8001b9e:	419e      	sbcs	r6, r3
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4306      	orrs	r6, r0
 8001ba4:	4032      	ands	r2, r6
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2500      	movs	r5, #0
 8001baa:	e783      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001bac:	1a16      	subs	r6, r2, r0
 8001bae:	4663      	mov	r3, ip
 8001bb0:	42b2      	cmp	r2, r6
 8001bb2:	4180      	sbcs	r0, r0
 8001bb4:	1a59      	subs	r1, r3, r1
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	1a0b      	subs	r3, r1, r0
 8001bba:	4698      	mov	r8, r3
 8001bbc:	465c      	mov	r4, fp
 8001bbe:	e632      	b.n	8001826 <__aeabi_dsub+0x86>
 8001bc0:	2e1f      	cmp	r6, #31
 8001bc2:	dd00      	ble.n	8001bc6 <__aeabi_dsub+0x426>
 8001bc4:	e0ab      	b.n	8001d1e <__aeabi_dsub+0x57e>
 8001bc6:	2720      	movs	r7, #32
 8001bc8:	1bbb      	subs	r3, r7, r6
 8001bca:	469a      	mov	sl, r3
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4657      	mov	r7, sl
 8001bd0:	40bb      	lsls	r3, r7
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	464f      	mov	r7, r9
 8001bd8:	40f3      	lsrs	r3, r6
 8001bda:	431f      	orrs	r7, r3
 8001bdc:	003b      	movs	r3, r7
 8001bde:	4657      	mov	r7, sl
 8001be0:	40ba      	lsls	r2, r7
 8001be2:	1e57      	subs	r7, r2, #1
 8001be4:	41ba      	sbcs	r2, r7
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4662      	mov	r2, ip
 8001bea:	40f2      	lsrs	r2, r6
 8001bec:	1889      	adds	r1, r1, r2
 8001bee:	e698      	b.n	8001922 <__aeabi_dsub+0x182>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1bbb      	subs	r3, r7, r6
 8001bf4:	469a      	mov	sl, r3
 8001bf6:	4663      	mov	r3, ip
 8001bf8:	4657      	mov	r7, sl
 8001bfa:	40bb      	lsls	r3, r7
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	464f      	mov	r7, r9
 8001c02:	40f3      	lsrs	r3, r6
 8001c04:	431f      	orrs	r7, r3
 8001c06:	003b      	movs	r3, r7
 8001c08:	4657      	mov	r7, sl
 8001c0a:	40ba      	lsls	r2, r7
 8001c0c:	1e57      	subs	r7, r2, #1
 8001c0e:	41ba      	sbcs	r2, r7
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4662      	mov	r2, ip
 8001c14:	40f2      	lsrs	r2, r6
 8001c16:	1a89      	subs	r1, r1, r2
 8001c18:	e79c      	b.n	8001b54 <__aeabi_dsub+0x3b4>
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c1c:	429f      	cmp	r7, r3
 8001c1e:	d05f      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001c20:	2580      	movs	r5, #128	; 0x80
 8001c22:	042d      	lsls	r5, r5, #16
 8001c24:	4273      	negs	r3, r6
 8001c26:	4329      	orrs	r1, r5
 8001c28:	e720      	b.n	8001a6c <__aeabi_dsub+0x2cc>
 8001c2a:	2e00      	cmp	r6, #0
 8001c2c:	d10c      	bne.n	8001c48 <__aeabi_dsub+0x4a8>
 8001c2e:	2f00      	cmp	r7, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x494>
 8001c32:	e0d0      	b.n	8001dd6 <__aeabi_dsub+0x636>
 8001c34:	465c      	mov	r4, fp
 8001c36:	4661      	mov	r1, ip
 8001c38:	4691      	mov	r9, r2
 8001c3a:	4d7b      	ldr	r5, [pc, #492]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c3c:	e6cd      	b.n	80019da <__aeabi_dsub+0x23a>
 8001c3e:	4f7a      	ldr	r7, [pc, #488]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c40:	42be      	cmp	r6, r7
 8001c42:	d01c      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001c44:	001e      	movs	r6, r3
 8001c46:	e665      	b.n	8001914 <__aeabi_dsub+0x174>
 8001c48:	2f00      	cmp	r7, #0
 8001c4a:	d018      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001c4c:	08c0      	lsrs	r0, r0, #3
 8001c4e:	074e      	lsls	r6, r1, #29
 8001c50:	4306      	orrs	r6, r0
 8001c52:	2080      	movs	r0, #128	; 0x80
 8001c54:	08c9      	lsrs	r1, r1, #3
 8001c56:	0300      	lsls	r0, r0, #12
 8001c58:	4201      	tst	r1, r0
 8001c5a:	d008      	beq.n	8001c6e <__aeabi_dsub+0x4ce>
 8001c5c:	4663      	mov	r3, ip
 8001c5e:	08dc      	lsrs	r4, r3, #3
 8001c60:	4204      	tst	r4, r0
 8001c62:	d104      	bne.n	8001c6e <__aeabi_dsub+0x4ce>
 8001c64:	0021      	movs	r1, r4
 8001c66:	46da      	mov	sl, fp
 8001c68:	08d2      	lsrs	r2, r2, #3
 8001c6a:	075e      	lsls	r6, r3, #29
 8001c6c:	4316      	orrs	r6, r2
 8001c6e:	00f3      	lsls	r3, r6, #3
 8001c70:	4699      	mov	r9, r3
 8001c72:	2401      	movs	r4, #1
 8001c74:	4653      	mov	r3, sl
 8001c76:	00c9      	lsls	r1, r1, #3
 8001c78:	0f72      	lsrs	r2, r6, #29
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	401c      	ands	r4, r3
 8001c7e:	4d6a      	ldr	r5, [pc, #424]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c80:	e6ab      	b.n	80019da <__aeabi_dsub+0x23a>
 8001c82:	001d      	movs	r5, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	2700      	movs	r7, #0
 8001c88:	e6b4      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	d159      	bne.n	8001d42 <__aeabi_dsub+0x5a2>
 8001c8e:	000b      	movs	r3, r1
 8001c90:	4303      	orrs	r3, r0
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x4f6>
 8001c94:	e6d6      	b.n	8001a44 <__aeabi_dsub+0x2a4>
 8001c96:	1c73      	adds	r3, r6, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4fc>
 8001c9a:	e0b2      	b.n	8001e02 <__aeabi_dsub+0x662>
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	d01e      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001ca2:	43f3      	mvns	r3, r6
 8001ca4:	2b38      	cmp	r3, #56	; 0x38
 8001ca6:	dc6f      	bgt.n	8001d88 <__aeabi_dsub+0x5e8>
 8001ca8:	2b1f      	cmp	r3, #31
 8001caa:	dd00      	ble.n	8001cae <__aeabi_dsub+0x50e>
 8001cac:	e097      	b.n	8001dde <__aeabi_dsub+0x63e>
 8001cae:	2520      	movs	r5, #32
 8001cb0:	000e      	movs	r6, r1
 8001cb2:	1aed      	subs	r5, r5, r3
 8001cb4:	40ae      	lsls	r6, r5
 8001cb6:	46b0      	mov	r8, r6
 8001cb8:	0006      	movs	r6, r0
 8001cba:	46aa      	mov	sl, r5
 8001cbc:	40de      	lsrs	r6, r3
 8001cbe:	4645      	mov	r5, r8
 8001cc0:	4335      	orrs	r5, r6
 8001cc2:	002e      	movs	r6, r5
 8001cc4:	4655      	mov	r5, sl
 8001cc6:	40a8      	lsls	r0, r5
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	1e45      	subs	r5, r0, #1
 8001ccc:	41a8      	sbcs	r0, r5
 8001cce:	448c      	add	ip, r1
 8001cd0:	4306      	orrs	r6, r0
 8001cd2:	18b6      	adds	r6, r6, r2
 8001cd4:	4296      	cmp	r6, r2
 8001cd6:	4192      	sbcs	r2, r2
 8001cd8:	4251      	negs	r1, r2
 8001cda:	4461      	add	r1, ip
 8001cdc:	003d      	movs	r5, r7
 8001cde:	e625      	b.n	800192c <__aeabi_dsub+0x18c>
 8001ce0:	003d      	movs	r5, r7
 8001ce2:	4661      	mov	r1, ip
 8001ce4:	4691      	mov	r9, r2
 8001ce6:	e678      	b.n	80019da <__aeabi_dsub+0x23a>
 8001ce8:	000b      	movs	r3, r1
 8001cea:	4303      	orrs	r3, r0
 8001cec:	2d00      	cmp	r5, #0
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x552>
 8001cf0:	e655      	b.n	800199e <__aeabi_dsub+0x1fe>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f5      	beq.n	8001ce2 <__aeabi_dsub+0x542>
 8001cf6:	4663      	mov	r3, ip
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x55e>
 8001cfc:	e66d      	b.n	80019da <__aeabi_dsub+0x23a>
 8001cfe:	1886      	adds	r6, r0, r2
 8001d00:	4286      	cmp	r6, r0
 8001d02:	4180      	sbcs	r0, r0
 8001d04:	4461      	add	r1, ip
 8001d06:	4240      	negs	r0, r0
 8001d08:	1809      	adds	r1, r1, r0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	020b      	lsls	r3, r1, #8
 8001d0e:	d400      	bmi.n	8001d12 <__aeabi_dsub+0x572>
 8001d10:	e6d0      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <__aeabi_dsub+0x68c>)
 8001d14:	3501      	adds	r5, #1
 8001d16:	4019      	ands	r1, r3
 8001d18:	e5b2      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001d1a:	46b1      	mov	r9, r6
 8001d1c:	e65d      	b.n	80019da <__aeabi_dsub+0x23a>
 8001d1e:	0033      	movs	r3, r6
 8001d20:	4667      	mov	r7, ip
 8001d22:	3b20      	subs	r3, #32
 8001d24:	40df      	lsrs	r7, r3
 8001d26:	003b      	movs	r3, r7
 8001d28:	2e20      	cmp	r6, #32
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_dsub+0x598>
 8001d2c:	2740      	movs	r7, #64	; 0x40
 8001d2e:	1bbf      	subs	r7, r7, r6
 8001d30:	4666      	mov	r6, ip
 8001d32:	40be      	lsls	r6, r7
 8001d34:	4332      	orrs	r2, r6
 8001d36:	4690      	mov	r8, r2
 8001d38:	4646      	mov	r6, r8
 8001d3a:	1e72      	subs	r2, r6, #1
 8001d3c:	4196      	sbcs	r6, r2
 8001d3e:	4333      	orrs	r3, r6
 8001d40:	e5ef      	b.n	8001922 <__aeabi_dsub+0x182>
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <__aeabi_dsub+0x688>)
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d0cb      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001d48:	2580      	movs	r5, #128	; 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	4273      	negs	r3, r6
 8001d4e:	4329      	orrs	r1, r5
 8001d50:	e7a8      	b.n	8001ca4 <__aeabi_dsub+0x504>
 8001d52:	4308      	orrs	r0, r1
 8001d54:	1e41      	subs	r1, r0, #1
 8001d56:	4188      	sbcs	r0, r1
 8001d58:	e6a2      	b.n	8001aa0 <__aeabi_dsub+0x300>
 8001d5a:	2f00      	cmp	r7, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x5c0>
 8001d5e:	e63c      	b.n	80019da <__aeabi_dsub+0x23a>
 8001d60:	4663      	mov	r3, ip
 8001d62:	1a86      	subs	r6, r0, r2
 8001d64:	1acf      	subs	r7, r1, r3
 8001d66:	42b0      	cmp	r0, r6
 8001d68:	419b      	sbcs	r3, r3
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	1afb      	subs	r3, r7, r3
 8001d6e:	4698      	mov	r8, r3
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d54e      	bpl.n	8001e12 <__aeabi_dsub+0x672>
 8001d74:	1a16      	subs	r6, r2, r0
 8001d76:	4663      	mov	r3, ip
 8001d78:	42b2      	cmp	r2, r6
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	1a59      	subs	r1, r3, r1
 8001d7e:	4252      	negs	r2, r2
 8001d80:	1a89      	subs	r1, r1, r2
 8001d82:	465c      	mov	r4, fp
 8001d84:	2200      	movs	r2, #0
 8001d86:	e57b      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001d88:	4301      	orrs	r1, r0
 8001d8a:	000e      	movs	r6, r1
 8001d8c:	1e71      	subs	r1, r6, #1
 8001d8e:	418e      	sbcs	r6, r1
 8001d90:	e79f      	b.n	8001cd2 <__aeabi_dsub+0x532>
 8001d92:	001d      	movs	r5, r3
 8001d94:	000e      	movs	r6, r1
 8001d96:	3d20      	subs	r5, #32
 8001d98:	40ee      	lsrs	r6, r5
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d004      	beq.n	8001daa <__aeabi_dsub+0x60a>
 8001da0:	2540      	movs	r5, #64	; 0x40
 8001da2:	1aeb      	subs	r3, r5, r3
 8001da4:	4099      	lsls	r1, r3
 8001da6:	4308      	orrs	r0, r1
 8001da8:	4681      	mov	r9, r0
 8001daa:	4648      	mov	r0, r9
 8001dac:	4643      	mov	r3, r8
 8001dae:	1e41      	subs	r1, r0, #1
 8001db0:	4188      	sbcs	r0, r1
 8001db2:	4318      	orrs	r0, r3
 8001db4:	e674      	b.n	8001aa0 <__aeabi_dsub+0x300>
 8001db6:	2200      	movs	r2, #0
 8001db8:	2400      	movs	r4, #0
 8001dba:	e617      	b.n	80019ec <__aeabi_dsub+0x24c>
 8001dbc:	1a16      	subs	r6, r2, r0
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	42b2      	cmp	r2, r6
 8001dc2:	4192      	sbcs	r2, r2
 8001dc4:	1a59      	subs	r1, r3, r1
 8001dc6:	4252      	negs	r2, r2
 8001dc8:	1a89      	subs	r1, r1, r2
 8001dca:	003d      	movs	r5, r7
 8001dcc:	e525      	b.n	800181a <__aeabi_dsub+0x7a>
 8001dce:	4661      	mov	r1, ip
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	4d15      	ldr	r5, [pc, #84]	; (8001e28 <__aeabi_dsub+0x688>)
 8001dd4:	e601      	b.n	80019da <__aeabi_dsub+0x23a>
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	2400      	movs	r4, #0
 8001dda:	0312      	lsls	r2, r2, #12
 8001ddc:	e679      	b.n	8001ad2 <__aeabi_dsub+0x332>
 8001dde:	001d      	movs	r5, r3
 8001de0:	000e      	movs	r6, r1
 8001de2:	3d20      	subs	r5, #32
 8001de4:	40ee      	lsrs	r6, r5
 8001de6:	46b0      	mov	r8, r6
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d004      	beq.n	8001df6 <__aeabi_dsub+0x656>
 8001dec:	2540      	movs	r5, #64	; 0x40
 8001dee:	1aeb      	subs	r3, r5, r3
 8001df0:	4099      	lsls	r1, r3
 8001df2:	4308      	orrs	r0, r1
 8001df4:	4681      	mov	r9, r0
 8001df6:	464e      	mov	r6, r9
 8001df8:	4643      	mov	r3, r8
 8001dfa:	1e71      	subs	r1, r6, #1
 8001dfc:	418e      	sbcs	r6, r1
 8001dfe:	431e      	orrs	r6, r3
 8001e00:	e767      	b.n	8001cd2 <__aeabi_dsub+0x532>
 8001e02:	1886      	adds	r6, r0, r2
 8001e04:	4296      	cmp	r6, r2
 8001e06:	419b      	sbcs	r3, r3
 8001e08:	4461      	add	r1, ip
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	18c9      	adds	r1, r1, r3
 8001e0e:	003d      	movs	r5, r7
 8001e10:	e58c      	b.n	800192c <__aeabi_dsub+0x18c>
 8001e12:	4647      	mov	r7, r8
 8001e14:	4337      	orrs	r7, r6
 8001e16:	d0ce      	beq.n	8001db6 <__aeabi_dsub+0x616>
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	4032      	ands	r2, r6
 8001e1e:	e649      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001e20:	2700      	movs	r7, #0
 8001e22:	003a      	movs	r2, r7
 8001e24:	e5e6      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	ff7fffff 	.word	0xff7fffff

08001e30 <__aeabi_d2iz>:
 8001e30:	b530      	push	{r4, r5, lr}
 8001e32:	4d14      	ldr	r5, [pc, #80]	; (8001e84 <__aeabi_d2iz+0x54>)
 8001e34:	030a      	lsls	r2, r1, #12
 8001e36:	004b      	lsls	r3, r1, #1
 8001e38:	0b12      	lsrs	r2, r2, #12
 8001e3a:	0d5b      	lsrs	r3, r3, #21
 8001e3c:	0fc9      	lsrs	r1, r1, #31
 8001e3e:	2400      	movs	r4, #0
 8001e40:	42ab      	cmp	r3, r5
 8001e42:	dd11      	ble.n	8001e68 <__aeabi_d2iz+0x38>
 8001e44:	4c10      	ldr	r4, [pc, #64]	; (8001e88 <__aeabi_d2iz+0x58>)
 8001e46:	42a3      	cmp	r3, r4
 8001e48:	dc10      	bgt.n	8001e6c <__aeabi_d2iz+0x3c>
 8001e4a:	2480      	movs	r4, #128	; 0x80
 8001e4c:	0364      	lsls	r4, r4, #13
 8001e4e:	4322      	orrs	r2, r4
 8001e50:	4c0e      	ldr	r4, [pc, #56]	; (8001e8c <__aeabi_d2iz+0x5c>)
 8001e52:	1ae4      	subs	r4, r4, r3
 8001e54:	2c1f      	cmp	r4, #31
 8001e56:	dd0c      	ble.n	8001e72 <__aeabi_d2iz+0x42>
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <__aeabi_d2iz+0x60>)
 8001e5a:	1ac3      	subs	r3, r0, r3
 8001e5c:	40da      	lsrs	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	425c      	negs	r4, r3
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d100      	bne.n	8001e68 <__aeabi_d2iz+0x38>
 8001e66:	001c      	movs	r4, r3
 8001e68:	0020      	movs	r0, r4
 8001e6a:	bd30      	pop	{r4, r5, pc}
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <__aeabi_d2iz+0x64>)
 8001e6e:	18cc      	adds	r4, r1, r3
 8001e70:	e7fa      	b.n	8001e68 <__aeabi_d2iz+0x38>
 8001e72:	4d09      	ldr	r5, [pc, #36]	; (8001e98 <__aeabi_d2iz+0x68>)
 8001e74:	40e0      	lsrs	r0, r4
 8001e76:	46ac      	mov	ip, r5
 8001e78:	4463      	add	r3, ip
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	4303      	orrs	r3, r0
 8001e80:	e7ee      	b.n	8001e60 <__aeabi_d2iz+0x30>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	000003fe 	.word	0x000003fe
 8001e88:	0000041d 	.word	0x0000041d
 8001e8c:	00000433 	.word	0x00000433
 8001e90:	00000413 	.word	0x00000413
 8001e94:	7fffffff 	.word	0x7fffffff
 8001e98:	fffffbed 	.word	0xfffffbed

08001e9c <__aeabi_i2d>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d02d      	beq.n	8001efe <__aeabi_i2d+0x62>
 8001ea2:	17c3      	asrs	r3, r0, #31
 8001ea4:	18c5      	adds	r5, r0, r3
 8001ea6:	405d      	eors	r5, r3
 8001ea8:	0fc4      	lsrs	r4, r0, #31
 8001eaa:	0028      	movs	r0, r5
 8001eac:	f000 f862 	bl	8001f74 <__clzsi2>
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <__aeabi_i2d+0x6c>)
 8001eb2:	1a1b      	subs	r3, r3, r0
 8001eb4:	055b      	lsls	r3, r3, #21
 8001eb6:	0d5b      	lsrs	r3, r3, #21
 8001eb8:	280a      	cmp	r0, #10
 8001eba:	dd15      	ble.n	8001ee8 <__aeabi_i2d+0x4c>
 8001ebc:	380b      	subs	r0, #11
 8001ebe:	4085      	lsls	r5, r0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	032d      	lsls	r5, r5, #12
 8001ec4:	0b2d      	lsrs	r5, r5, #12
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	0010      	movs	r0, r2
 8001eca:	032d      	lsls	r5, r5, #12
 8001ecc:	0d0a      	lsrs	r2, r1, #20
 8001ece:	0b2d      	lsrs	r5, r5, #12
 8001ed0:	0512      	lsls	r2, r2, #20
 8001ed2:	432a      	orrs	r2, r5
 8001ed4:	4d0d      	ldr	r5, [pc, #52]	; (8001f0c <__aeabi_i2d+0x70>)
 8001ed6:	051b      	lsls	r3, r3, #20
 8001ed8:	402a      	ands	r2, r5
 8001eda:	4313      	orrs	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	07e4      	lsls	r4, r4, #31
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
 8001ee8:	0002      	movs	r2, r0
 8001eea:	0029      	movs	r1, r5
 8001eec:	3215      	adds	r2, #21
 8001eee:	4091      	lsls	r1, r2
 8001ef0:	000a      	movs	r2, r1
 8001ef2:	210b      	movs	r1, #11
 8001ef4:	1a08      	subs	r0, r1, r0
 8001ef6:	40c5      	lsrs	r5, r0
 8001ef8:	032d      	lsls	r5, r5, #12
 8001efa:	0b2d      	lsrs	r5, r5, #12
 8001efc:	e7e3      	b.n	8001ec6 <__aeabi_i2d+0x2a>
 8001efe:	2400      	movs	r4, #0
 8001f00:	2300      	movs	r3, #0
 8001f02:	2500      	movs	r5, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	e7de      	b.n	8001ec6 <__aeabi_i2d+0x2a>
 8001f08:	0000041e 	.word	0x0000041e
 8001f0c:	800fffff 	.word	0x800fffff

08001f10 <__aeabi_ui2d>:
 8001f10:	b510      	push	{r4, lr}
 8001f12:	1e04      	subs	r4, r0, #0
 8001f14:	d025      	beq.n	8001f62 <__aeabi_ui2d+0x52>
 8001f16:	f000 f82d 	bl	8001f74 <__clzsi2>
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <__aeabi_ui2d+0x5c>)
 8001f1c:	1a1b      	subs	r3, r3, r0
 8001f1e:	055b      	lsls	r3, r3, #21
 8001f20:	0d5b      	lsrs	r3, r3, #21
 8001f22:	280a      	cmp	r0, #10
 8001f24:	dd12      	ble.n	8001f4c <__aeabi_ui2d+0x3c>
 8001f26:	380b      	subs	r0, #11
 8001f28:	4084      	lsls	r4, r0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	0b24      	lsrs	r4, r4, #12
 8001f30:	2100      	movs	r1, #0
 8001f32:	0010      	movs	r0, r2
 8001f34:	0324      	lsls	r4, r4, #12
 8001f36:	0d0a      	lsrs	r2, r1, #20
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	0512      	lsls	r2, r2, #20
 8001f3c:	4322      	orrs	r2, r4
 8001f3e:	4c0c      	ldr	r4, [pc, #48]	; (8001f70 <__aeabi_ui2d+0x60>)
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	4022      	ands	r2, r4
 8001f44:	4313      	orrs	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	0859      	lsrs	r1, r3, #1
 8001f4a:	bd10      	pop	{r4, pc}
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	0021      	movs	r1, r4
 8001f50:	3215      	adds	r2, #21
 8001f52:	4091      	lsls	r1, r2
 8001f54:	000a      	movs	r2, r1
 8001f56:	210b      	movs	r1, #11
 8001f58:	1a08      	subs	r0, r1, r0
 8001f5a:	40c4      	lsrs	r4, r0
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	0b24      	lsrs	r4, r4, #12
 8001f60:	e7e6      	b.n	8001f30 <__aeabi_ui2d+0x20>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2400      	movs	r4, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	e7e2      	b.n	8001f30 <__aeabi_ui2d+0x20>
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	0000041e 	.word	0x0000041e
 8001f70:	800fffff 	.word	0x800fffff

08001f74 <__clzsi2>:
 8001f74:	211c      	movs	r1, #28
 8001f76:	2301      	movs	r3, #1
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	d301      	bcc.n	8001f82 <__clzsi2+0xe>
 8001f7e:	0c00      	lsrs	r0, r0, #16
 8001f80:	3910      	subs	r1, #16
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	4298      	cmp	r0, r3
 8001f86:	d301      	bcc.n	8001f8c <__clzsi2+0x18>
 8001f88:	0a00      	lsrs	r0, r0, #8
 8001f8a:	3908      	subs	r1, #8
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	4298      	cmp	r0, r3
 8001f90:	d301      	bcc.n	8001f96 <__clzsi2+0x22>
 8001f92:	0900      	lsrs	r0, r0, #4
 8001f94:	3904      	subs	r1, #4
 8001f96:	a202      	add	r2, pc, #8	; (adr r2, 8001fa0 <__clzsi2+0x2c>)
 8001f98:	5c10      	ldrb	r0, [r2, r0]
 8001f9a:	1840      	adds	r0, r0, r1
 8001f9c:	4770      	bx	lr
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	02020304 	.word	0x02020304
 8001fa4:	01010101 	.word	0x01010101
	...

08001fb0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8001fb8:	230e      	movs	r3, #14
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8001fc0:	230d      	movs	r3, #13
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001fc8:	250f      	movs	r5, #15
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f001 fbb2 	bl	8003738 <null_ptr_check>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001fd8:	197b      	adds	r3, r7, r5
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d14e      	bne.n	8002080 <bme280_init+0xd0>
    {
        while (try_count)
 8001fe2:	e03d      	b.n	8002060 <bme280_init+0xb0>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001fe4:	250f      	movs	r5, #15
 8001fe6:	197c      	adds	r4, r7, r5
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	220d      	movs	r2, #13
 8001fec:	18b9      	adds	r1, r7, r2
 8001fee:	2201      	movs	r2, #1
 8001ff0:	20d0      	movs	r0, #208	; 0xd0
 8001ff2:	f000 f84d 	bl	8002090 <bme280_get_regs>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	7023      	strb	r3, [r4, #0]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8001ffa:	197b      	adds	r3, r7, r5
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11f      	bne.n	8002044 <bme280_init+0x94>
 8002004:	230d      	movs	r3, #13
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b60      	cmp	r3, #96	; 0x60
 800200c:	d11a      	bne.n	8002044 <bme280_init+0x94>
            {
                dev->chip_id = chip_id;
 800200e:	230d      	movs	r3, #13
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8002018:	250f      	movs	r5, #15
 800201a:	197c      	adds	r4, r7, r5
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fa0c 	bl	800243c <bme280_soft_reset>
 8002024:	0003      	movs	r3, r0
 8002026:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8002028:	197b      	adds	r3, r7, r5
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11c      	bne.n	800206c <bme280_init+0xbc>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002032:	230f      	movs	r3, #15
 8002034:	18fc      	adds	r4, r7, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f001 f9cf 	bl	80033dc <get_calib_data>
 800203e:	0003      	movs	r3, r0
 8002040:	7023      	strb	r3, [r4, #0]
                }

                break;
 8002042:	e013      	b.n	800206c <bme280_init+0xbc>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	23fa      	movs	r3, #250	; 0xfa
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	0018      	movs	r0, r3
 8002052:	4790      	blx	r2
            --try_count;
 8002054:	220e      	movs	r2, #14
 8002056:	18bb      	adds	r3, r7, r2
 8002058:	18ba      	adds	r2, r7, r2
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	3a01      	subs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8002060:	230e      	movs	r3, #14
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1bc      	bne.n	8001fe4 <bme280_init+0x34>
 800206a:	e000      	b.n	800206e <bme280_init+0xbe>
                break;
 800206c:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 800206e:	230e      	movs	r3, #14
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <bme280_init+0xd0>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8002078:	230f      	movs	r3, #15
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	22fe      	movs	r2, #254	; 0xfe
 800207e:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8002080:	230f      	movs	r3, #15
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b25b      	sxtb	r3, r3
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bdb0      	pop	{r4, r5, r7, pc}

08002090 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	0011      	movs	r1, r2
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	230f      	movs	r3, #15
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	1c02      	adds	r2, r0, #0
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	230c      	movs	r3, #12
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	1c0a      	adds	r2, r1, #0
 80020aa:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80020ac:	2517      	movs	r5, #23
 80020ae:	197c      	adds	r4, r7, r5
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fb40 	bl	8003738 <null_ptr_check>
 80020b8:	0003      	movs	r3, r0
 80020ba:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80020bc:	197b      	adds	r3, r7, r5
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d12a      	bne.n	800211c <bme280_get_regs+0x8c>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d027      	beq.n	800211c <bme280_get_regs+0x8c>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7a1b      	ldrb	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d007      	beq.n	80020e4 <bme280_get_regs+0x54>
        {
            reg_addr = reg_addr | 0x80;
 80020d4:	220f      	movs	r2, #15
 80020d6:	18bb      	adds	r3, r7, r2
 80020d8:	18ba      	adds	r2, r7, r2
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	4249      	negs	r1, r1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68dc      	ldr	r4, [r3, #12]
 80020e8:	230c      	movs	r3, #12
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685d      	ldr	r5, [r3, #4]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	7818      	ldrb	r0, [r3, #0]
 80020fa:	002b      	movs	r3, r5
 80020fc:	47a0      	blx	r4
 80020fe:	0003      	movs	r3, r0
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2245      	movs	r2, #69	; 0x45
 8002106:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2245      	movs	r2, #69	; 0x45
 800210c:	569b      	ldrsb	r3, [r3, r2]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <bme280_get_regs+0x94>
        {
            rslt = BME280_E_COMM_FAIL;
 8002112:	2317      	movs	r3, #23
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	22fc      	movs	r2, #252	; 0xfc
 8002118:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800211a:	e003      	b.n	8002124 <bme280_get_regs+0x94>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800211c:	2317      	movs	r3, #23
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	22ff      	movs	r2, #255	; 0xff
 8002122:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002124:	2317      	movs	r3, #23
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b25b      	sxtb	r3, r3
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b006      	add	sp, #24
 8002132:	bdb0      	pop	{r4, r5, r7, pc}

08002134 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b0a      	cmp	r3, #10
 800214a:	d902      	bls.n	8002152 <bme280_set_regs+0x1e>
    {
        len = 10;
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	220a      	movs	r2, #10
 8002150:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002152:	252f      	movs	r5, #47	; 0x2f
 8002154:	197c      	adds	r4, r7, r5
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	0018      	movs	r0, r3
 800215a:	f001 faed 	bl	8003738 <null_ptr_check>
 800215e:	0003      	movs	r3, r0
 8002160:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8002162:	197b      	adds	r3, r7, r5
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d000      	beq.n	800216e <bme280_set_regs+0x3a>
 800216c:	e06c      	b.n	8002248 <bme280_set_regs+0x114>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d069      	beq.n	8002248 <bme280_set_regs+0x114>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d066      	beq.n	8002248 <bme280_set_regs+0x114>
    {
        if (len != 0)
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d05d      	beq.n	800223e <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	2314      	movs	r3, #20
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	7a1b      	ldrb	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d01e      	beq.n	80021d2 <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002194:	232b      	movs	r3, #43	; 0x2b
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e012      	b.n	80021c4 <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800219e:	202b      	movs	r0, #43	; 0x2b
 80021a0:	183b      	adds	r3, r7, r0
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	18d3      	adds	r3, r2, r3
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	183b      	adds	r3, r7, r0
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	18cb      	adds	r3, r1, r3
 80021b2:	217f      	movs	r1, #127	; 0x7f
 80021b4:	400a      	ands	r2, r1
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	183b      	adds	r3, r7, r0
 80021c0:	3201      	adds	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	232b      	movs	r3, #43	; 0x2b
 80021c6:	18fa      	adds	r2, r7, r3
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3e5      	bcc.n	800219e <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d911      	bls.n	80021fe <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	2114      	movs	r1, #20
 80021e2:	1879      	adds	r1, r7, r1
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f001 f946 	bl	8003476 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	18db      	adds	r3, r3, r3
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	232c      	movs	r3, #44	; 0x2c
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	3a01      	subs	r2, #1
 80021fa:	801a      	strh	r2, [r3, #0]
 80021fc:	e004      	b.n	8002208 <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 80021fe:	232c      	movs	r3, #44	; 0x2c
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	1dfa      	adds	r2, r7, #7
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691c      	ldr	r4, [r3, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	7818      	ldrb	r0, [r3, #0]
 8002210:	232c      	movs	r3, #44	; 0x2c
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2114      	movs	r1, #20
 800221c:	1879      	adds	r1, r7, r1
 800221e:	47a0      	blx	r4
 8002220:	0003      	movs	r3, r0
 8002222:	0019      	movs	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2245      	movs	r2, #69	; 0x45
 8002228:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2245      	movs	r2, #69	; 0x45
 800222e:	569b      	ldrsb	r3, [r3, r2]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8002234:	232f      	movs	r3, #47	; 0x2f
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	22fc      	movs	r2, #252	; 0xfc
 800223a:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 800223c:	e009      	b.n	8002252 <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800223e:	232f      	movs	r3, #47	; 0x2f
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	22fd      	movs	r2, #253	; 0xfd
 8002244:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8002246:	e004      	b.n	8002252 <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002248:	232f      	movs	r3, #47	; 0x2f
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	22ff      	movs	r2, #255	; 0xff
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e000      	b.n	8002254 <bme280_set_regs+0x120>
        if (len != 0)
 8002252:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8002254:	232f      	movs	r3, #47	; 0x2f
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b25b      	sxtb	r3, r3
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b00c      	add	sp, #48	; 0x30
 8002262:	bdb0      	pop	{r4, r5, r7, pc}

08002264 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002272:	250f      	movs	r5, #15
 8002274:	197c      	adds	r4, r7, r5
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f001 fa5d 	bl	8003738 <null_ptr_check>
 800227e:	0003      	movs	r3, r0
 8002280:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8002282:	197b      	adds	r3, r7, r5
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b25b      	sxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d152      	bne.n	8002332 <bme280_set_sensor_settings+0xce>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800228c:	250f      	movs	r5, #15
 800228e:	197c      	adds	r4, r7, r5
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	230e      	movs	r3, #14
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f89c 	bl	80023d6 <bme280_get_sensor_mode>
 800229e:	0003      	movs	r3, r0
 80022a0:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80022a2:	197b      	adds	r3, r7, r5
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10c      	bne.n	80022c6 <bme280_set_sensor_settings+0x62>
 80022ac:	230e      	movs	r3, #14
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <bme280_set_sensor_settings+0x62>
        {
            rslt = put_device_to_sleep(dev);
 80022b6:	230f      	movs	r3, #15
 80022b8:	18fc      	adds	r4, r7, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 fc99 	bl	8002bf4 <put_device_to_sleep>
 80022c2:	0003      	movs	r3, r0
 80022c4:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 80022c6:	230f      	movs	r3, #15
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d12f      	bne.n	8002332 <bme280_set_sensor_settings+0xce>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80022d2:	1dfb      	adds	r3, r7, #7
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	0019      	movs	r1, r3
 80022d8:	2007      	movs	r0, #7
 80022da:	f001 fa08 	bl	80036ee <are_settings_changed>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d00c      	beq.n	80022fc <bme280_set_sensor_settings+0x98>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	3340      	adds	r3, #64	; 0x40
 80022e6:	0019      	movs	r1, r3
 80022e8:	230f      	movs	r3, #15
 80022ea:	18fc      	adds	r4, r7, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 fa8e 	bl	8002814 <set_osr_settings>
 80022f8:	0003      	movs	r3, r0
 80022fa:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b25b      	sxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d114      	bne.n	8002332 <bme280_set_sensor_settings+0xce>
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	0019      	movs	r1, r3
 800230e:	2018      	movs	r0, #24
 8002310:	f001 f9ed 	bl	80036ee <are_settings_changed>
 8002314:	1e03      	subs	r3, r0, #0
 8002316:	d00c      	beq.n	8002332 <bme280_set_sensor_settings+0xce>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3340      	adds	r3, #64	; 0x40
 800231c:	0019      	movs	r1, r3
 800231e:	230f      	movs	r3, #15
 8002320:	18fc      	adds	r4, r7, r3
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fb3e 	bl	80029aa <set_filter_standby_settings>
 800232e:	0003      	movs	r3, r0
 8002330:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8002332:	230f      	movs	r3, #15
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b25b      	sxtb	r3, r3
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bdb0      	pop	{r4, r5, r7, pc}

08002342 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002342:	b5b0      	push	{r4, r5, r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	0002      	movs	r2, r0
 800234a:	6039      	str	r1, [r7, #0]
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002350:	250f      	movs	r5, #15
 8002352:	197c      	adds	r4, r7, r5
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	0018      	movs	r0, r3
 8002358:	f001 f9ee 	bl	8003738 <null_ptr_check>
 800235c:	0003      	movs	r3, r0
 800235e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002360:	197b      	adds	r3, r7, r5
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d12d      	bne.n	80023c6 <bme280_set_sensor_mode+0x84>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800236a:	250f      	movs	r5, #15
 800236c:	197c      	adds	r4, r7, r5
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	230e      	movs	r3, #14
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	0011      	movs	r1, r2
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f82d 	bl	80023d6 <bme280_get_sensor_mode>
 800237c:	0003      	movs	r3, r0
 800237e:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8002380:	197b      	adds	r3, r7, r5
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b25b      	sxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <bme280_set_sensor_mode+0x62>
 800238a:	230e      	movs	r3, #14
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <bme280_set_sensor_mode+0x62>
        {
            rslt = put_device_to_sleep(dev);
 8002394:	230f      	movs	r3, #15
 8002396:	18fc      	adds	r4, r7, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 fc2a 	bl	8002bf4 <put_device_to_sleep>
 80023a0:	0003      	movs	r3, r0
 80023a2:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80023a4:	230f      	movs	r3, #15
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <bme280_set_sensor_mode+0x84>
        {
            rslt = write_power_mode(sensor_mode, dev);
 80023b0:	230f      	movs	r3, #15
 80023b2:	18fc      	adds	r4, r7, r3
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	0011      	movs	r1, r2
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fbd8 	bl	8002b72 <write_power_mode>
 80023c2:	0003      	movs	r3, r0
 80023c4:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 80023c6:	230f      	movs	r3, #15
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b25b      	sxtb	r3, r3
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bdb0      	pop	{r4, r5, r7, pc}

080023d6 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 80023d6:	b5b0      	push	{r4, r5, r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80023e0:	250f      	movs	r5, #15
 80023e2:	197c      	adds	r4, r7, r5
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f001 f9a6 	bl	8003738 <null_ptr_check>
 80023ec:	0003      	movs	r3, r0
 80023ee:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 80023f0:	197b      	adds	r3, r7, r5
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <bme280_get_sensor_mode+0x4e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d011      	beq.n	8002424 <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8002400:	230f      	movs	r3, #15
 8002402:	18fc      	adds	r4, r7, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	20f4      	movs	r0, #244	; 0xf4
 800240c:	f7ff fe40 	bl	8002090 <bme280_get_regs>
 8002410:	0003      	movs	r3, r0
 8002412:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2203      	movs	r2, #3
 800241a:	4013      	ands	r3, r2
 800241c:	b2da      	uxtb	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e003      	b.n	800242c <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002424:	230f      	movs	r3, #15
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800242c:	230f      	movs	r3, #15
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b25b      	sxtb	r3, r3
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bdb0      	pop	{r4, r5, r7, pc}

0800243c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8002444:	230d      	movs	r3, #13
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	22e0      	movs	r2, #224	; 0xe0
 800244a:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 800244c:	230c      	movs	r3, #12
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8002454:	230e      	movs	r3, #14
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2205      	movs	r2, #5
 800245a:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 800245c:	230b      	movs	r3, #11
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	22b6      	movs	r2, #182	; 0xb6
 8002462:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002464:	250f      	movs	r5, #15
 8002466:	197c      	adds	r4, r7, r5
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f001 f964 	bl	8003738 <null_ptr_check>
 8002470:	0003      	movs	r3, r0
 8002472:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8002474:	197b      	adds	r3, r7, r5
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b25b      	sxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d142      	bne.n	8002504 <bme280_soft_reset+0xc8>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800247e:	250f      	movs	r5, #15
 8002480:	197c      	adds	r4, r7, r5
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	220b      	movs	r2, #11
 8002486:	18b9      	adds	r1, r7, r2
 8002488:	220d      	movs	r2, #13
 800248a:	18b8      	adds	r0, r7, r2
 800248c:	2201      	movs	r2, #1
 800248e:	f7ff fe51 	bl	8002134 <bme280_set_regs>
 8002492:	0003      	movs	r3, r0
 8002494:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002496:	197b      	adds	r3, r7, r5
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b25b      	sxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d131      	bne.n	8002504 <bme280_soft_reset+0xc8>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	23fa      	movs	r3, #250	; 0xfa
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	0018      	movs	r0, r3
 80024ae:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80024b0:	250f      	movs	r5, #15
 80024b2:	197c      	adds	r4, r7, r5
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	220c      	movs	r2, #12
 80024b8:	18b9      	adds	r1, r7, r2
 80024ba:	2201      	movs	r2, #1
 80024bc:	20f3      	movs	r0, #243	; 0xf3
 80024be:	f7ff fde7 	bl	8002090 <bme280_get_regs>
 80024c2:	0003      	movs	r3, r0
 80024c4:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80024c6:	197b      	adds	r3, r7, r5
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10e      	bne.n	80024ee <bme280_soft_reset+0xb2>
 80024d0:	220e      	movs	r2, #14
 80024d2:	18bb      	adds	r3, r7, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	18ba      	adds	r2, r7, r2
 80024d8:	1e59      	subs	r1, r3, #1
 80024da:	7011      	strb	r1, [r2, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <bme280_soft_reset+0xb2>
 80024e0:	230c      	movs	r3, #12
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	001a      	movs	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	d1d8      	bne.n	80024a0 <bme280_soft_reset+0x64>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80024ee:	230c      	movs	r3, #12
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	001a      	movs	r2, r3
 80024f6:	2301      	movs	r3, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d003      	beq.n	8002504 <bme280_soft_reset+0xc8>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	22fa      	movs	r2, #250	; 0xfa
 8002502:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8002504:	230f      	movs	r3, #15
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b25b      	sxtb	r3, r3
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b004      	add	sp, #16
 8002512:	bdb0      	pop	{r4, r5, r7, pc}

08002514 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8002514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	230f      	movs	r3, #15
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	1c02      	adds	r2, r0, #0
 8002524:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8002526:	231c      	movs	r3, #28
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	0018      	movs	r0, r3
 800252c:	2308      	movs	r3, #8
 800252e:	001a      	movs	r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	f003 fe3b 	bl	80061ac <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 8002536:	2310      	movs	r3, #16
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	0018      	movs	r0, r3
 800253c:	230c      	movs	r3, #12
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f003 fe33 	bl	80061ac <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002546:	2527      	movs	r5, #39	; 0x27
 8002548:	197c      	adds	r4, r7, r5
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0018      	movs	r0, r3
 800254e:	f001 f8f3 	bl	8003738 <null_ptr_check>
 8002552:	0003      	movs	r3, r0
 8002554:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8002556:	197b      	adds	r3, r7, r5
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b25b      	sxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d12a      	bne.n	80025b6 <bme280_get_sensor_data+0xa2>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d027      	beq.n	80025b6 <bme280_get_sensor_data+0xa2>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8002566:	2527      	movs	r5, #39	; 0x27
 8002568:	197c      	adds	r4, r7, r5
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	221c      	movs	r2, #28
 800256e:	18b9      	adds	r1, r7, r2
 8002570:	2208      	movs	r2, #8
 8002572:	20f7      	movs	r0, #247	; 0xf7
 8002574:	f7ff fd8c 	bl	8002090 <bme280_get_regs>
 8002578:	0003      	movs	r3, r0
 800257a:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800257c:	197b      	adds	r3, r7, r5
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b25b      	sxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11b      	bne.n	80025be <bme280_get_sensor_data+0xaa>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8002586:	2610      	movs	r6, #16
 8002588:	19ba      	adds	r2, r7, r6
 800258a:	231c      	movs	r3, #28
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f81c 	bl	80025ce <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3318      	adds	r3, #24
 800259a:	001d      	movs	r5, r3
 800259c:	2327      	movs	r3, #39	; 0x27
 800259e:	18fc      	adds	r4, r7, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	19b9      	adds	r1, r7, r6
 80025a4:	230f      	movs	r3, #15
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	7818      	ldrb	r0, [r3, #0]
 80025aa:	002b      	movs	r3, r5
 80025ac:	f000 f853 	bl	8002656 <bme280_compensate_data>
 80025b0:	0003      	movs	r3, r0
 80025b2:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80025b4:	e003      	b.n	80025be <bme280_get_sensor_data+0xaa>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80025b6:	2327      	movs	r3, #39	; 0x27
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	22ff      	movs	r2, #255	; 0xff
 80025bc:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80025be:	2327      	movs	r3, #39	; 0x27
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b25b      	sxtb	r3, r3
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b00b      	add	sp, #44	; 0x2c
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ce <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	031b      	lsls	r3, r3, #12
 80025de:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3301      	adds	r3, #1
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3302      	adds	r3, #2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	431a      	orrs	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3303      	adds	r3, #3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	031b      	lsls	r3, r3, #12
 800260c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3305      	adds	r3, #5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	b2db      	uxtb	r3, r3
 8002622:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	431a      	orrs	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3306      	adds	r3, #6
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3307      	adds	r3, #7
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	431a      	orrs	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b006      	add	sp, #24
 8002654:	bd80      	pop	{r7, pc}

08002656 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8002656:	b590      	push	{r4, r7, lr}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	230f      	movs	r3, #15
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	1c02      	adds	r2, r0, #0
 8002668:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800266a:	2317      	movs	r3, #23
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d048      	beq.n	800270a <bme280_compensate_data+0xb4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d045      	beq.n	800270a <bme280_compensate_data+0xb4>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d042      	beq.n	800270a <bme280_compensate_data+0xb4>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	2300      	movs	r3, #0
 8002688:	2400      	movs	r4, #0
 800268a:	6093      	str	r3, [r2, #8]
 800268c:	60d4      	str	r4, [r2, #12]
        comp_data->pressure = 0;
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	2300      	movs	r3, #0
 8002692:	2400      	movs	r4, #0
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	6054      	str	r4, [r2, #4]
        comp_data->humidity = 0;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	2300      	movs	r3, #0
 800269c:	2400      	movs	r4, #0
 800269e:	6113      	str	r3, [r2, #16]
 80026a0:	6154      	str	r4, [r2, #20]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80026a2:	230f      	movs	r3, #15
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2207      	movs	r2, #7
 80026aa:	4013      	ands	r3, r2
 80026ac:	d00a      	beq.n	80026c4 <bme280_compensate_data+0x6e>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	0011      	movs	r1, r2
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 faff 	bl	8002cb8 <compensate_temperature>
 80026ba:	0003      	movs	r3, r0
 80026bc:	000c      	movs	r4, r1
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6093      	str	r3, [r2, #8]
 80026c2:	60d4      	str	r4, [r2, #12]
        }

        if (sensor_comp & BME280_PRESS)
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	d00a      	beq.n	80026e6 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0011      	movs	r1, r2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fbb6 	bl	8002e48 <compensate_pressure>
 80026dc:	0003      	movs	r3, r0
 80026de:	000c      	movs	r4, r1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	6054      	str	r4, [r2, #4]
        }

        if (sensor_comp & BME280_HUM)
 80026e6:	230f      	movs	r3, #15
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2204      	movs	r2, #4
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00f      	beq.n	8002712 <bme280_compensate_data+0xbc>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 fd5d 	bl	80031b8 <compensate_humidity>
 80026fe:	0003      	movs	r3, r0
 8002700:	000c      	movs	r4, r1
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6113      	str	r3, [r2, #16]
 8002706:	6154      	str	r4, [r2, #20]
        if (sensor_comp & BME280_HUM)
 8002708:	e003      	b.n	8002712 <bme280_compensate_data+0xbc>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800270a:	2317      	movs	r3, #23
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002712:	2317      	movs	r3, #23
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b25b      	sxtb	r3, r3
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b007      	add	sp, #28
 8002720:	bd90      	pop	{r4, r7, pc}
	...

08002724 <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = { 0, 1, 2, 4, 8, 16 };
 800272c:	2308      	movs	r3, #8
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	4a35      	ldr	r2, [pc, #212]	; (8002808 <bme280_cal_meas_delay+0xe4>)
 8002732:	6811      	ldr	r1, [r2, #0]
 8002734:	6019      	str	r1, [r3, #0]
 8002736:	8892      	ldrh	r2, [r2, #4]
 8002738:	809a      	strh	r2, [r3, #4]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d809      	bhi.n	8002756 <bme280_cal_meas_delay+0x32>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	0019      	movs	r1, r3
 8002748:	2317      	movs	r3, #23
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2208      	movs	r2, #8
 800274e:	18ba      	adds	r2, r7, r2
 8002750:	5c52      	ldrb	r2, [r2, r1]
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e003      	b.n	800275e <bme280_cal_meas_delay+0x3a>
    }
    else
    {
        temp_osr = 16;
 8002756:	2317      	movs	r3, #23
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2210      	movs	r2, #16
 800275c:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_p <= 5)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d809      	bhi.n	800277a <bme280_cal_meas_delay+0x56>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	0019      	movs	r1, r3
 800276c:	2316      	movs	r3, #22
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2208      	movs	r2, #8
 8002772:	18ba      	adds	r2, r7, r2
 8002774:	5c52      	ldrb	r2, [r2, r1]
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e003      	b.n	8002782 <bme280_cal_meas_delay+0x5e>
    }
    else
    {
        pres_osr = 16;
 800277a:	2316      	movs	r3, #22
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2210      	movs	r2, #16
 8002780:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_h <= 5)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	789b      	ldrb	r3, [r3, #2]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d809      	bhi.n	800279e <bme280_cal_meas_delay+0x7a>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	0019      	movs	r1, r3
 8002790:	2315      	movs	r3, #21
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2208      	movs	r2, #8
 8002796:	18ba      	adds	r2, r7, r2
 8002798:	5c52      	ldrb	r2, [r2, r1]
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e003      	b.n	80027a6 <bme280_cal_meas_delay+0x82>
    }
    else
    {
        hum_osr = 16;
 800279e:	2315      	movs	r3, #21
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2210      	movs	r2, #16
 80027a4:	701a      	strb	r2, [r3, #0]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 80027a6:	2317      	movs	r3, #23
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	0013      	movs	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	189b      	adds	r3, r3, r2
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <bme280_cal_meas_delay+0xe8>)
 80027ba:	1899      	adds	r1, r3, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 80027bc:	2316      	movs	r3, #22
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	0013      	movs	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	189b      	adds	r3, r3, r2
 80027c8:	019b      	lsls	r3, r3, #6
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <bme280_cal_meas_delay+0xec>)
 80027d0:	4694      	mov	ip, r2
 80027d2:	4463      	add	r3, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 80027d4:	18c9      	adds	r1, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 80027d6:	2315      	movs	r3, #21
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	0013      	movs	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	189b      	adds	r3, r3, r2
 80027e2:	019b      	lsls	r3, r3, #6
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <bme280_cal_meas_delay+0xec>)
 80027ea:	4694      	mov	ip, r2
 80027ec:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 80027ee:	18ca      	adds	r2, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) / BME280_MEAS_SCALING_FACTOR);
 80027f0:	23fa      	movs	r3, #250	; 0xfa
 80027f2:	0099      	lsls	r1, r3, #2
 80027f4:	0010      	movs	r0, r2
 80027f6:	f7fd fd11 	bl	800021c <__divsi3>
 80027fa:	0003      	movs	r3, r0
    max_delay =
 80027fc:	613b      	str	r3, [r7, #16]

    return max_delay;
 80027fe:	693b      	ldr	r3, [r7, #16]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}
 8002808:	080061d4 	.word	0x080061d4
 800280c:	000004e2 	.word	0x000004e2
 8002810:	0000023f 	.word	0x0000023f

08002814 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	210f      	movs	r1, #15
 8002820:	187b      	adds	r3, r7, r1
 8002822:	1c02      	adds	r2, r0, #0
 8002824:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8002826:	2317      	movs	r3, #23
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800282e:	187b      	adds	r3, r7, r1
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2204      	movs	r2, #4
 8002834:	4013      	ands	r3, r2
 8002836:	d009      	beq.n	800284c <set_osr_settings+0x38>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8002838:	2317      	movs	r3, #23
 800283a:	18fc      	adds	r4, r7, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f81c 	bl	8002880 <set_osr_humidity_settings>
 8002848:	0003      	movs	r3, r0
 800284a:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800284c:	230f      	movs	r3, #15
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2203      	movs	r2, #3
 8002854:	4013      	ands	r3, r2
 8002856:	d00b      	beq.n	8002870 <set_osr_settings+0x5c>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8002858:	2317      	movs	r3, #23
 800285a:	18fc      	adds	r4, r7, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	230f      	movs	r3, #15
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f853 	bl	8002912 <set_osr_press_temp_settings>
 800286c:	0003      	movs	r3, r0
 800286e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002870:	2317      	movs	r3, #23
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b25b      	sxtb	r3, r3
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b007      	add	sp, #28
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800288a:	200c      	movs	r0, #12
 800288c:	183b      	adds	r3, r7, r0
 800288e:	22f2      	movs	r2, #242	; 0xf2
 8002890:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	789b      	ldrb	r3, [r3, #2]
 8002896:	2207      	movs	r2, #7
 8002898:	4013      	ands	r3, r2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	210e      	movs	r1, #14
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80028a2:	250f      	movs	r5, #15
 80028a4:	197c      	adds	r4, r7, r5
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	1879      	adds	r1, r7, r1
 80028aa:	1838      	adds	r0, r7, r0
 80028ac:	2201      	movs	r2, #1
 80028ae:	f7ff fc41 	bl	8002134 <bme280_set_regs>
 80028b2:	0003      	movs	r3, r0
 80028b4:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80028b6:	197b      	adds	r3, r7, r5
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d120      	bne.n	8002902 <set_osr_humidity_settings+0x82>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80028c0:	210c      	movs	r1, #12
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	22f4      	movs	r2, #244	; 0xf4
 80028c6:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	7818      	ldrb	r0, [r3, #0]
 80028cc:	250f      	movs	r5, #15
 80028ce:	197c      	adds	r4, r7, r5
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	220d      	movs	r2, #13
 80028d4:	18b9      	adds	r1, r7, r2
 80028d6:	2201      	movs	r2, #1
 80028d8:	f7ff fbda 	bl	8002090 <bme280_get_regs>
 80028dc:	0003      	movs	r3, r0
 80028de:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80028e0:	197b      	adds	r3, r7, r5
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <set_osr_humidity_settings+0x82>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80028ea:	230f      	movs	r3, #15
 80028ec:	18fc      	adds	r4, r7, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	220d      	movs	r2, #13
 80028f2:	18b9      	adds	r1, r7, r2
 80028f4:	220c      	movs	r2, #12
 80028f6:	18b8      	adds	r0, r7, r2
 80028f8:	2201      	movs	r2, #1
 80028fa:	f7ff fc1b 	bl	8002134 <bme280_set_regs>
 80028fe:	0003      	movs	r3, r0
 8002900:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002902:	230f      	movs	r3, #15
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b25b      	sxtb	r3, r3
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bdb0      	pop	{r4, r5, r7, pc}

08002912 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8002912:	b5b0      	push	{r4, r5, r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	1c02      	adds	r2, r0, #0
 8002922:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8002924:	2116      	movs	r1, #22
 8002926:	187b      	adds	r3, r7, r1
 8002928:	22f4      	movs	r2, #244	; 0xf4
 800292a:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800292c:	187b      	adds	r3, r7, r1
 800292e:	7818      	ldrb	r0, [r3, #0]
 8002930:	2517      	movs	r5, #23
 8002932:	197c      	adds	r4, r7, r5
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2215      	movs	r2, #21
 8002938:	18b9      	adds	r1, r7, r2
 800293a:	2201      	movs	r2, #1
 800293c:	f7ff fba8 	bl	8002090 <bme280_get_regs>
 8002940:	0003      	movs	r3, r0
 8002942:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002944:	197b      	adds	r3, r7, r5
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b25b      	sxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d125      	bne.n	800299a <set_osr_press_temp_settings+0x88>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800294e:	230f      	movs	r3, #15
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2201      	movs	r2, #1
 8002956:	4013      	ands	r3, r2
 8002958:	d006      	beq.n	8002968 <set_osr_press_temp_settings+0x56>
        {
            fill_osr_press_settings(&reg_data, settings);
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	2315      	movs	r3, #21
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f8a0 	bl	8002aa8 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 8002968:	230f      	movs	r3, #15
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d006      	beq.n	8002982 <set_osr_press_temp_settings+0x70>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	2315      	movs	r3, #21
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	0011      	movs	r1, r2
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f8ae 	bl	8002ade <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8002982:	2317      	movs	r3, #23
 8002984:	18fc      	adds	r4, r7, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2215      	movs	r2, #21
 800298a:	18b9      	adds	r1, r7, r2
 800298c:	2216      	movs	r2, #22
 800298e:	18b8      	adds	r0, r7, r2
 8002990:	2201      	movs	r2, #1
 8002992:	f7ff fbcf 	bl	8002134 <bme280_set_regs>
 8002996:	0003      	movs	r3, r0
 8002998:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800299a:	2317      	movs	r3, #23
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b25b      	sxtb	r3, r3
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b006      	add	sp, #24
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}

080029aa <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 80029aa:	b5b0      	push	{r4, r5, r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	230f      	movs	r3, #15
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	1c02      	adds	r2, r0, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80029bc:	2116      	movs	r1, #22
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	22f5      	movs	r2, #245	; 0xf5
 80029c2:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	7818      	ldrb	r0, [r3, #0]
 80029c8:	2517      	movs	r5, #23
 80029ca:	197c      	adds	r4, r7, r5
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2215      	movs	r2, #21
 80029d0:	18b9      	adds	r1, r7, r2
 80029d2:	2201      	movs	r2, #1
 80029d4:	f7ff fb5c 	bl	8002090 <bme280_get_regs>
 80029d8:	0003      	movs	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 80029dc:	197b      	adds	r3, r7, r5
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d125      	bne.n	8002a32 <set_filter_standby_settings+0x88>
    {
        if (desired_settings & BME280_FILTER_SEL)
 80029e6:	230f      	movs	r3, #15
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2208      	movs	r2, #8
 80029ee:	4013      	ands	r3, r2
 80029f0:	d006      	beq.n	8002a00 <set_filter_standby_settings+0x56>
        {
            fill_filter_settings(&reg_data, settings);
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	2315      	movs	r3, #21
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f821 	bl	8002a42 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8002a00:	230f      	movs	r3, #15
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2210      	movs	r2, #16
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d006      	beq.n	8002a1a <set_filter_standby_settings+0x70>
        {
            fill_standby_settings(&reg_data, settings);
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	2315      	movs	r3, #21
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f82f 	bl	8002a78 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8002a1a:	2317      	movs	r3, #23
 8002a1c:	18fc      	adds	r4, r7, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2215      	movs	r2, #21
 8002a22:	18b9      	adds	r1, r7, r2
 8002a24:	2216      	movs	r2, #22
 8002a26:	18b8      	adds	r0, r7, r2
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f7ff fb83 	bl	8002134 <bme280_set_regs>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b25b      	sxtb	r3, r3
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b006      	add	sp, #24
 8002a40:	bdb0      	pop	{r4, r5, r7, pc}

08002a42 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	221c      	movs	r2, #28
 8002a54:	4393      	bics	r3, r2
 8002a56:	b25a      	sxtb	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	78db      	ldrb	r3, [r3, #3]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	211c      	movs	r1, #28
 8002a62:	400b      	ands	r3, r1
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	4313      	orrs	r3, r2
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	701a      	strb	r2, [r3, #0]
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	221f      	movs	r2, #31
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	791b      	ldrb	r3, [r3, #4]
 8002a92:	015b      	lsls	r3, r3, #5
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	701a      	strb	r2, [r3, #0]
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	221c      	movs	r2, #28
 8002aba:	4393      	bics	r3, r2
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	211c      	movs	r1, #28
 8002ac8:	400b      	ands	r3, r1
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	701a      	strb	r2, [r3, #0]
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}

08002ade <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	221f      	movs	r2, #31
 8002af0:	4013      	ands	r3, r2
 8002af2:	b25a      	sxtb	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	785b      	ldrb	r3, [r3, #1]
 8002af8:	015b      	lsls	r3, r3, #5
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	4313      	orrs	r3, r2
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	701a      	strb	r2, [r3, #0]
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b002      	add	sp, #8
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	109b      	asrs	r3, r3, #2
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2207      	movs	r2, #7
 8002b32:	4013      	ands	r3, r2
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3303      	adds	r3, #3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	109b      	asrs	r3, r3, #2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2207      	movs	r2, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3303      	adds	r3, #3
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	711a      	strb	r2, [r3, #4]
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002b72:	b5b0      	push	{r4, r5, r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	0002      	movs	r2, r0
 8002b7a:	6039      	str	r1, [r7, #0]
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8002b80:	210e      	movs	r1, #14
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	22f4      	movs	r2, #244	; 0xf4
 8002b86:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	7818      	ldrb	r0, [r3, #0]
 8002b8c:	250f      	movs	r5, #15
 8002b8e:	197c      	adds	r4, r7, r5
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	220d      	movs	r2, #13
 8002b94:	18b9      	adds	r1, r7, r2
 8002b96:	2201      	movs	r2, #1
 8002b98:	f7ff fa7a 	bl	8002090 <bme280_get_regs>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8002ba0:	197b      	adds	r3, r7, r5
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11c      	bne.n	8002be4 <write_power_mode+0x72>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8002baa:	200d      	movs	r0, #13
 8002bac:	183b      	adds	r3, r7, r0
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	b25a      	sxtb	r2, r3
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fc      	adds	r4, r7, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	1839      	adds	r1, r7, r0
 8002bd6:	220e      	movs	r2, #14
 8002bd8:	18b8      	adds	r0, r7, r2
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f7ff faaa 	bl	8002134 <bme280_set_regs>
 8002be0:	0003      	movs	r3, r0
 8002be2:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}

08002bf4 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8002bfc:	2517      	movs	r5, #23
 8002bfe:	197c      	adds	r4, r7, r5
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2210      	movs	r2, #16
 8002c04:	18b9      	adds	r1, r7, r2
 8002c06:	2204      	movs	r2, #4
 8002c08:	20f2      	movs	r0, #242	; 0xf2
 8002c0a:	f7ff fa41 	bl	8002090 <bme280_get_regs>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002c12:	197b      	adds	r3, r7, r5
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11f      	bne.n	8002c5c <put_device_to_sleep+0x68>
    {
        parse_device_settings(reg_data, &settings);
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	18fa      	adds	r2, r7, r3
 8002c20:	2310      	movs	r3, #16
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	0011      	movs	r1, r2
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff ff71 	bl	8002b0e <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8002c2c:	2517      	movs	r5, #23
 8002c2e:	197c      	adds	r4, r7, r5
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7ff fc02 	bl	800243c <bme280_soft_reset>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002c3c:	197b      	adds	r3, r7, r5
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <put_device_to_sleep+0x68>
        {
            rslt = reload_device_settings(&settings, dev);
 8002c46:	2317      	movs	r3, #23
 8002c48:	18fc      	adds	r4, r7, r3
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	0011      	movs	r1, r2
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f80a 	bl	8002c6c <reload_device_settings>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002c5c:	2317      	movs	r3, #23
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b25b      	sxtb	r3, r3
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bdb0      	pop	{r4, r5, r7, pc}

08002c6c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002c76:	250f      	movs	r5, #15
 8002c78:	197c      	adds	r4, r7, r5
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0019      	movs	r1, r3
 8002c80:	201f      	movs	r0, #31
 8002c82:	f7ff fdc7 	bl	8002814 <set_osr_settings>
 8002c86:	0003      	movs	r3, r0
 8002c88:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002c8a:	197b      	adds	r3, r7, r5
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <reload_device_settings+0x3c>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002c94:	230f      	movs	r3, #15
 8002c96:	18fc      	adds	r4, r7, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	201f      	movs	r0, #31
 8002ca0:	f7ff fe83 	bl	80029aa <set_filter_standby_settings>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b25b      	sxtb	r3, r3
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b004      	add	sp, #16
 8002cb6:	bdb0      	pop	{r4, r5, r7, pc}

08002cb8 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	4c5a      	ldr	r4, [pc, #360]	; (8002e30 <compensate_temperature+0x178>)
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	627c      	str	r4, [r7, #36]	; 0x24
    double temperature_max = 85;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4c59      	ldr	r4, [pc, #356]	; (8002e34 <compensate_temperature+0x17c>)
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	61fc      	str	r4, [r7, #28]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f7ff f91a 	bl	8001f10 <__aeabi_ui2d>
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <compensate_temperature+0x180>)
 8002ce0:	f7fd fee2 	bl	8000aa8 <__aeabi_ddiv>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	000c      	movs	r4, r1
 8002ce8:	0025      	movs	r5, r4
 8002cea:	001c      	movs	r4, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff f90d 	bl	8001f10 <__aeabi_ui2d>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <compensate_temperature+0x184>)
 8002cfa:	f7fd fed5 	bl	8000aa8 <__aeabi_ddiv>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	000b      	movs	r3, r1
 8002d02:	0020      	movs	r0, r4
 8002d04:	0029      	movs	r1, r5
 8002d06:	f7fe fd4b 	bl	80017a0 <__aeabi_dsub>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	000c      	movs	r4, r1
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	617c      	str	r4, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2202      	movs	r2, #2
 8002d16:	5e9b      	ldrsh	r3, [r3, r2]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff f8bf 	bl	8001e9c <__aeabi_i2d>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	000c      	movs	r4, r1
 8002d22:	001a      	movs	r2, r3
 8002d24:	0023      	movs	r3, r4
 8002d26:	6938      	ldr	r0, [r7, #16]
 8002d28:	6979      	ldr	r1, [r7, #20]
 8002d2a:	f7fe fac7 	bl	80012bc <__aeabi_dmul>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	000c      	movs	r4, r1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	617c      	str	r4, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff f8e8 	bl	8001f10 <__aeabi_ui2d>
 8002d40:	2200      	movs	r2, #0
 8002d42:	2382      	movs	r3, #130	; 0x82
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	f7fd feaf 	bl	8000aa8 <__aeabi_ddiv>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	000c      	movs	r4, r1
 8002d4e:	0025      	movs	r5, r4
 8002d50:	001c      	movs	r4, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff f8da 	bl	8001f10 <__aeabi_ui2d>
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <compensate_temperature+0x188>)
 8002d60:	f7fd fea2 	bl	8000aa8 <__aeabi_ddiv>
 8002d64:	0002      	movs	r2, r0
 8002d66:	000b      	movs	r3, r1
 8002d68:	0020      	movs	r0, r4
 8002d6a:	0029      	movs	r1, r5
 8002d6c:	f7fe fd18 	bl	80017a0 <__aeabi_dsub>
 8002d70:	0003      	movs	r3, r0
 8002d72:	000c      	movs	r4, r1
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	60fc      	str	r4, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	f7fe fa9c 	bl	80012bc <__aeabi_dmul>
 8002d84:	0003      	movs	r3, r0
 8002d86:	000c      	movs	r4, r1
 8002d88:	0025      	movs	r5, r4
 8002d8a:	001c      	movs	r4, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	5e9b      	ldrsh	r3, [r3, r2]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff f882 	bl	8001e9c <__aeabi_i2d>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	000b      	movs	r3, r1
 8002d9c:	0020      	movs	r0, r4
 8002d9e:	0029      	movs	r1, r5
 8002da0:	f7fe fa8c 	bl	80012bc <__aeabi_dmul>
 8002da4:	0003      	movs	r3, r0
 8002da6:	000c      	movs	r4, r1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	60fc      	str	r4, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6938      	ldr	r0, [r7, #16]
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	f7fd fb5c 	bl	8000470 <__aeabi_dadd>
 8002db8:	0003      	movs	r3, r0
 8002dba:	000c      	movs	r4, r1
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	0021      	movs	r1, r4
 8002dc0:	f7ff f836 	bl	8001e30 <__aeabi_d2iz>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	6979      	ldr	r1, [r7, #20]
 8002dd2:	f7fd fb4d 	bl	8000470 <__aeabi_dadd>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	000c      	movs	r4, r1
 8002dda:	0018      	movs	r0, r3
 8002ddc:	0021      	movs	r1, r4
 8002dde:	2200      	movs	r2, #0
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <compensate_temperature+0x18c>)
 8002de2:	f7fd fe61 	bl	8000aa8 <__aeabi_ddiv>
 8002de6:	0003      	movs	r3, r0
 8002de8:	000c      	movs	r4, r1
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dec:	62fc      	str	r4, [r7, #44]	; 0x2c

    if (temperature < temperature_min)
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df6:	f7fd fb13 	bl	8000420 <__aeabi_dcmplt>
 8002dfa:	1e03      	subs	r3, r0, #0
 8002dfc:	d004      	beq.n	8002e08 <compensate_temperature+0x150>
    {
        temperature = temperature_min;
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e04:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002e06:	e00b      	b.n	8002e20 <compensate_temperature+0x168>
    }
    else if (temperature > temperature_max)
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e10:	f7fd fb1a 	bl	8000448 <__aeabi_dcmpgt>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d003      	beq.n	8002e20 <compensate_temperature+0x168>
    {
        temperature = temperature_max;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	69fc      	ldr	r4, [r7, #28]
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1e:	62fc      	str	r4, [r7, #44]	; 0x2c
    }

    return temperature;
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	0021      	movs	r1, r4
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b00c      	add	sp, #48	; 0x30
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	c0440000 	.word	0xc0440000
 8002e34:	40554000 	.word	0x40554000
 8002e38:	40d00000 	.word	0x40d00000
 8002e3c:	40900000 	.word	0x40900000
 8002e40:	40c00000 	.word	0x40c00000
 8002e44:	40b40000 	.word	0x40b40000

08002e48 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	4ccb      	ldr	r4, [pc, #812]	; (8003184 <compensate_pressure+0x33c>)
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e58:	62fc      	str	r4, [r7, #44]	; 0x2c
    double pressure_max = 110000.0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4cca      	ldr	r4, [pc, #808]	; (8003188 <compensate_pressure+0x340>)
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	627c      	str	r4, [r7, #36]	; 0x24

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff f818 	bl	8001e9c <__aeabi_i2d>
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	05db      	lsls	r3, r3, #23
 8002e72:	f7fd fe19 	bl	8000aa8 <__aeabi_ddiv>
 8002e76:	0003      	movs	r3, r0
 8002e78:	000c      	movs	r4, r1
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	0021      	movs	r1, r4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4bc2      	ldr	r3, [pc, #776]	; (800318c <compensate_pressure+0x344>)
 8002e82:	f7fe fc8d 	bl	80017a0 <__aeabi_dsub>
 8002e86:	0003      	movs	r3, r0
 8002e88:	000c      	movs	r4, r1
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	61fc      	str	r4, [r7, #28]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	69b8      	ldr	r0, [r7, #24]
 8002e94:	69f9      	ldr	r1, [r7, #28]
 8002e96:	f7fe fa11 	bl	80012bc <__aeabi_dmul>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	000c      	movs	r4, r1
 8002e9e:	0025      	movs	r5, r4
 8002ea0:	001c      	movs	r4, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7fe fff7 	bl	8001e9c <__aeabi_i2d>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	000b      	movs	r3, r1
 8002eb2:	0020      	movs	r0, r4
 8002eb4:	0029      	movs	r1, r5
 8002eb6:	f7fe fa01 	bl	80012bc <__aeabi_dmul>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	000c      	movs	r4, r1
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	0021      	movs	r1, r4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4bb2      	ldr	r3, [pc, #712]	; (8003190 <compensate_pressure+0x348>)
 8002ec6:	f7fd fdef 	bl	8000aa8 <__aeabi_ddiv>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	000c      	movs	r4, r1
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	617c      	str	r4, [r7, #20]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	220e      	movs	r2, #14
 8002ed6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fe ffdf 	bl	8001e9c <__aeabi_i2d>
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f7fe f9eb 	bl	80012bc <__aeabi_dmul>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	000c      	movs	r4, r1
 8002eea:	0018      	movs	r0, r3
 8002eec:	0021      	movs	r1, r4
 8002eee:	0002      	movs	r2, r0
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	f7fd fabd 	bl	8000470 <__aeabi_dadd>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	000c      	movs	r4, r1
 8002efa:	001a      	movs	r2, r3
 8002efc:	0023      	movs	r3, r4
 8002efe:	6938      	ldr	r0, [r7, #16]
 8002f00:	6979      	ldr	r1, [r7, #20]
 8002f02:	f7fd fab5 	bl	8000470 <__aeabi_dadd>
 8002f06:	0003      	movs	r3, r0
 8002f08:	000c      	movs	r4, r1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	617c      	str	r4, [r7, #20]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4ba0      	ldr	r3, [pc, #640]	; (8003194 <compensate_pressure+0x34c>)
 8002f12:	6938      	ldr	r0, [r7, #16]
 8002f14:	6979      	ldr	r1, [r7, #20]
 8002f16:	f7fd fdc7 	bl	8000aa8 <__aeabi_ddiv>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	000c      	movs	r4, r1
 8002f1e:	0025      	movs	r5, r4
 8002f20:	001c      	movs	r4, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	220c      	movs	r2, #12
 8002f26:	5e9b      	ldrsh	r3, [r3, r2]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7fe ffb7 	bl	8001e9c <__aeabi_i2d>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b99      	ldr	r3, [pc, #612]	; (8003198 <compensate_pressure+0x350>)
 8002f32:	f7fe f9c3 	bl	80012bc <__aeabi_dmul>
 8002f36:	0002      	movs	r2, r0
 8002f38:	000b      	movs	r3, r1
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	0029      	movs	r1, r5
 8002f3e:	f7fd fa97 	bl	8000470 <__aeabi_dadd>
 8002f42:	0003      	movs	r3, r0
 8002f44:	000c      	movs	r4, r1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	617c      	str	r4, [r7, #20]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7fe ffa3 	bl	8001e9c <__aeabi_i2d>
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f7fe f9af 	bl	80012bc <__aeabi_dmul>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	000c      	movs	r4, r1
 8002f62:	0018      	movs	r0, r3
 8002f64:	0021      	movs	r1, r4
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f7fe f9a7 	bl	80012bc <__aeabi_dmul>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	000c      	movs	r4, r1
 8002f72:	0018      	movs	r0, r3
 8002f74:	0021      	movs	r1, r4
 8002f76:	2200      	movs	r2, #0
 8002f78:	4b88      	ldr	r3, [pc, #544]	; (800319c <compensate_pressure+0x354>)
 8002f7a:	f7fd fd95 	bl	8000aa8 <__aeabi_ddiv>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	000c      	movs	r4, r1
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	60fc      	str	r4, [r7, #12]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fe ff85 	bl	8001e9c <__aeabi_i2d>
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f7fe f991 	bl	80012bc <__aeabi_dmul>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	000c      	movs	r4, r1
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	0021      	movs	r1, r4
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f7fd fa63 	bl	8000470 <__aeabi_dadd>
 8002faa:	0003      	movs	r3, r0
 8002fac:	000c      	movs	r4, r1
 8002fae:	0018      	movs	r0, r3
 8002fb0:	0021      	movs	r1, r4
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4b79      	ldr	r3, [pc, #484]	; (800319c <compensate_pressure+0x354>)
 8002fb6:	f7fd fd77 	bl	8000aa8 <__aeabi_ddiv>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	000c      	movs	r4, r1
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	61fc      	str	r4, [r7, #28]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4b72      	ldr	r3, [pc, #456]	; (8003190 <compensate_pressure+0x348>)
 8002fc6:	69b8      	ldr	r0, [r7, #24]
 8002fc8:	69f9      	ldr	r1, [r7, #28]
 8002fca:	f7fd fd6d 	bl	8000aa8 <__aeabi_ddiv>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	000c      	movs	r4, r1
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	0021      	movs	r1, r4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <compensate_pressure+0x358>)
 8002fda:	f7fd fa49 	bl	8000470 <__aeabi_dadd>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	000c      	movs	r4, r1
 8002fe2:	0025      	movs	r5, r4
 8002fe4:	001c      	movs	r4, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	88db      	ldrh	r3, [r3, #6]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7fe ff90 	bl	8001f10 <__aeabi_ui2d>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	0020      	movs	r0, r4
 8002ff6:	0029      	movs	r1, r5
 8002ff8:	f7fe f960 	bl	80012bc <__aeabi_dmul>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	000c      	movs	r4, r1
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	61fc      	str	r4, [r7, #28]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8003004:	2200      	movs	r2, #0
 8003006:	2300      	movs	r3, #0
 8003008:	69b8      	ldr	r0, [r7, #24]
 800300a:	69f9      	ldr	r1, [r7, #28]
 800300c:	f7fd fa1c 	bl	8000448 <__aeabi_dcmpgt>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d100      	bne.n	8003016 <compensate_pressure+0x1ce>
 8003014:	e0aa      	b.n	800316c <compensate_pressure+0x324>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	f7fe ff78 	bl	8001f10 <__aeabi_ui2d>
 8003020:	0003      	movs	r3, r0
 8003022:	000c      	movs	r4, r1
 8003024:	001a      	movs	r2, r3
 8003026:	0023      	movs	r3, r4
 8003028:	2000      	movs	r0, #0
 800302a:	495e      	ldr	r1, [pc, #376]	; (80031a4 <compensate_pressure+0x35c>)
 800302c:	f7fe fbb8 	bl	80017a0 <__aeabi_dsub>
 8003030:	0003      	movs	r3, r0
 8003032:	000c      	movs	r4, r1
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
 8003036:	637c      	str	r4, [r7, #52]	; 0x34
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8003038:	2200      	movs	r2, #0
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <compensate_pressure+0x360>)
 800303c:	6938      	ldr	r0, [r7, #16]
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	f7fd fd32 	bl	8000aa8 <__aeabi_ddiv>
 8003044:	0003      	movs	r3, r0
 8003046:	000c      	movs	r4, r1
 8003048:	001a      	movs	r2, r3
 800304a:	0023      	movs	r3, r4
 800304c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003050:	f7fe fba6 	bl	80017a0 <__aeabi_dsub>
 8003054:	0003      	movs	r3, r0
 8003056:	000c      	movs	r4, r1
 8003058:	0018      	movs	r0, r3
 800305a:	0021      	movs	r1, r4
 800305c:	2200      	movs	r2, #0
 800305e:	4b53      	ldr	r3, [pc, #332]	; (80031ac <compensate_pressure+0x364>)
 8003060:	f7fe f92c 	bl	80012bc <__aeabi_dmul>
 8003064:	0003      	movs	r3, r0
 8003066:	000c      	movs	r4, r1
 8003068:	0018      	movs	r0, r3
 800306a:	0021      	movs	r1, r4
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f7fd fd1a 	bl	8000aa8 <__aeabi_ddiv>
 8003074:	0003      	movs	r3, r0
 8003076:	000c      	movs	r4, r1
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
 800307a:	637c      	str	r4, [r7, #52]	; 0x34
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2216      	movs	r2, #22
 8003080:	5e9b      	ldrsh	r3, [r3, r2]
 8003082:	0018      	movs	r0, r3
 8003084:	f7fe ff0a 	bl	8001e9c <__aeabi_i2d>
 8003088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308c:	f7fe f916 	bl	80012bc <__aeabi_dmul>
 8003090:	0003      	movs	r3, r0
 8003092:	000c      	movs	r4, r1
 8003094:	0018      	movs	r0, r3
 8003096:	0021      	movs	r1, r4
 8003098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	f7fe f90e 	bl	80012bc <__aeabi_dmul>
 80030a0:	0003      	movs	r3, r0
 80030a2:	000c      	movs	r4, r1
 80030a4:	0018      	movs	r0, r3
 80030a6:	0021      	movs	r1, r4
 80030a8:	2200      	movs	r2, #0
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <compensate_pressure+0x368>)
 80030ac:	f7fd fcfc 	bl	8000aa8 <__aeabi_ddiv>
 80030b0:	0003      	movs	r3, r0
 80030b2:	000c      	movs	r4, r1
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	61fc      	str	r4, [r7, #28]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2214      	movs	r2, #20
 80030bc:	5e9b      	ldrsh	r3, [r3, r2]
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fe feec 	bl	8001e9c <__aeabi_i2d>
 80030c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	f7fe f8f8 	bl	80012bc <__aeabi_dmul>
 80030cc:	0003      	movs	r3, r0
 80030ce:	000c      	movs	r4, r1
 80030d0:	0018      	movs	r0, r3
 80030d2:	0021      	movs	r1, r4
 80030d4:	2200      	movs	r2, #0
 80030d6:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <compensate_pressure+0x348>)
 80030d8:	f7fd fce6 	bl	8000aa8 <__aeabi_ddiv>
 80030dc:	0003      	movs	r3, r0
 80030de:	000c      	movs	r4, r1
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	617c      	str	r4, [r7, #20]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	69b8      	ldr	r0, [r7, #24]
 80030ea:	69f9      	ldr	r1, [r7, #28]
 80030ec:	f7fd f9c0 	bl	8000470 <__aeabi_dadd>
 80030f0:	0003      	movs	r3, r0
 80030f2:	000c      	movs	r4, r1
 80030f4:	0025      	movs	r5, r4
 80030f6:	001c      	movs	r4, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2212      	movs	r2, #18
 80030fc:	5e9b      	ldrsh	r3, [r3, r2]
 80030fe:	0018      	movs	r0, r3
 8003100:	f7fe fecc 	bl	8001e9c <__aeabi_i2d>
 8003104:	0002      	movs	r2, r0
 8003106:	000b      	movs	r3, r1
 8003108:	0020      	movs	r0, r4
 800310a:	0029      	movs	r1, r5
 800310c:	f7fd f9b0 	bl	8000470 <__aeabi_dadd>
 8003110:	0003      	movs	r3, r0
 8003112:	000c      	movs	r4, r1
 8003114:	0018      	movs	r0, r3
 8003116:	0021      	movs	r1, r4
 8003118:	2200      	movs	r2, #0
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <compensate_pressure+0x36c>)
 800311c:	f7fd fcc4 	bl	8000aa8 <__aeabi_ddiv>
 8003120:	0003      	movs	r3, r0
 8003122:	000c      	movs	r4, r1
 8003124:	001a      	movs	r2, r3
 8003126:	0023      	movs	r3, r4
 8003128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800312a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800312c:	f7fd f9a0 	bl	8000470 <__aeabi_dadd>
 8003130:	0003      	movs	r3, r0
 8003132:	000c      	movs	r4, r1
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
 8003136:	637c      	str	r4, [r7, #52]	; 0x34

        if (pressure < pressure_min)
 8003138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800313e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003140:	f7fd f96e 	bl	8000420 <__aeabi_dcmplt>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d004      	beq.n	8003152 <compensate_pressure+0x30a>
        {
            pressure = pressure_min;
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
 800314e:	637c      	str	r4, [r7, #52]	; 0x34
 8003150:	e010      	b.n	8003174 <compensate_pressure+0x32c>
        }
        else if (pressure > pressure_max)
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800315a:	f7fd f975 	bl	8000448 <__aeabi_dcmpgt>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d008      	beq.n	8003174 <compensate_pressure+0x32c>
        {
            pressure = pressure_max;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
 8003168:	637c      	str	r4, [r7, #52]	; 0x34
 800316a:	e003      	b.n	8003174 <compensate_pressure+0x32c>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	637c      	str	r4, [r7, #52]	; 0x34
    }

    return pressure;
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	6b7c      	ldr	r4, [r7, #52]	; 0x34
}
 8003178:	0018      	movs	r0, r3
 800317a:	0021      	movs	r1, r4
 800317c:	46bd      	mov	sp, r7
 800317e:	b00e      	add	sp, #56	; 0x38
 8003180:	bdb0      	pop	{r4, r5, r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	40dd4c00 	.word	0x40dd4c00
 8003188:	40fadb00 	.word	0x40fadb00
 800318c:	40ef4000 	.word	0x40ef4000
 8003190:	40e00000 	.word	0x40e00000
 8003194:	40100000 	.word	0x40100000
 8003198:	40f00000 	.word	0x40f00000
 800319c:	41200000 	.word	0x41200000
 80031a0:	3ff00000 	.word	0x3ff00000
 80031a4:	41300000 	.word	0x41300000
 80031a8:	40b00000 	.word	0x40b00000
 80031ac:	40b86a00 	.word	0x40b86a00
 80031b0:	41e00000 	.word	0x41e00000
 80031b4:	40300000 	.word	0x40300000

080031b8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80031b8:	b5b0      	push	{r4, r5, r7, lr}
 80031ba:	b094      	sub	sp, #80	; 0x50
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	2400      	movs	r4, #0
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
 80031c8:	647c      	str	r4, [r7, #68]	; 0x44
    double humidity_max = 100.0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	4c7b      	ldr	r4, [pc, #492]	; (80033bc <compensate_humidity+0x204>)
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d0:	63fc      	str	r4, [r7, #60]	; 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7fe fe60 	bl	8001e9c <__aeabi_i2d>
 80031dc:	2200      	movs	r2, #0
 80031de:	4b78      	ldr	r3, [pc, #480]	; (80033c0 <compensate_humidity+0x208>)
 80031e0:	f7fe fade 	bl	80017a0 <__aeabi_dsub>
 80031e4:	0003      	movs	r3, r0
 80031e6:	000c      	movs	r4, r1
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ea:	637c      	str	r4, [r7, #52]	; 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	221e      	movs	r2, #30
 80031f0:	5e9b      	ldrsh	r3, [r3, r2]
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7fe fe52 	bl	8001e9c <__aeabi_i2d>
 80031f8:	2200      	movs	r2, #0
 80031fa:	4b72      	ldr	r3, [pc, #456]	; (80033c4 <compensate_humidity+0x20c>)
 80031fc:	f7fe f85e 	bl	80012bc <__aeabi_dmul>
 8003200:	0003      	movs	r3, r0
 8003202:	000c      	movs	r4, r1
 8003204:	0025      	movs	r5, r4
 8003206:	001c      	movs	r4, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	5e9b      	ldrsh	r3, [r3, r2]
 800320e:	0018      	movs	r0, r3
 8003210:	f7fe fe44 	bl	8001e9c <__aeabi_i2d>
 8003214:	2200      	movs	r2, #0
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <compensate_humidity+0x210>)
 8003218:	f7fd fc46 	bl	8000aa8 <__aeabi_ddiv>
 800321c:	0002      	movs	r2, r0
 800321e:	000b      	movs	r3, r1
 8003220:	0010      	movs	r0, r2
 8003222:	0019      	movs	r1, r3
 8003224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	f7fe f848 	bl	80012bc <__aeabi_dmul>
 800322c:	0002      	movs	r2, r0
 800322e:	000b      	movs	r3, r1
 8003230:	0020      	movs	r0, r4
 8003232:	0029      	movs	r1, r5
 8003234:	f7fd f91c 	bl	8000470 <__aeabi_dadd>
 8003238:	0003      	movs	r3, r0
 800323a:	000c      	movs	r4, r1
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
 800323e:	62fc      	str	r4, [r7, #44]	; 0x2c
    var3 = uncomp_data->humidity - var2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	0018      	movs	r0, r3
 8003246:	f7fe fe63 	bl	8001f10 <__aeabi_ui2d>
 800324a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	f7fe faa7 	bl	80017a0 <__aeabi_dsub>
 8003252:	0003      	movs	r3, r0
 8003254:	000c      	movs	r4, r1
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	627c      	str	r4, [r7, #36]	; 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	221a      	movs	r2, #26
 800325e:	5e9b      	ldrsh	r3, [r3, r2]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fe fe1b 	bl	8001e9c <__aeabi_i2d>
 8003266:	2200      	movs	r2, #0
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <compensate_humidity+0x214>)
 800326a:	f7fd fc1d 	bl	8000aa8 <__aeabi_ddiv>
 800326e:	0003      	movs	r3, r0
 8003270:	000c      	movs	r4, r1
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	61fc      	str	r4, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	7f1b      	ldrb	r3, [r3, #28]
 800327a:	0018      	movs	r0, r3
 800327c:	f7fe fe48 	bl	8001f10 <__aeabi_ui2d>
 8003280:	2200      	movs	r2, #0
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <compensate_humidity+0x218>)
 8003284:	f7fd fc10 	bl	8000aa8 <__aeabi_ddiv>
 8003288:	0003      	movs	r3, r0
 800328a:	000c      	movs	r4, r1
 800328c:	0018      	movs	r0, r3
 800328e:	0021      	movs	r1, r4
 8003290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	f7fe f812 	bl	80012bc <__aeabi_dmul>
 8003298:	0003      	movs	r3, r0
 800329a:	000c      	movs	r4, r1
 800329c:	0018      	movs	r0, r3
 800329e:	0021      	movs	r1, r4
 80032a0:	2200      	movs	r2, #0
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <compensate_humidity+0x21c>)
 80032a4:	f7fd f8e4 	bl	8000470 <__aeabi_dadd>
 80032a8:	0003      	movs	r3, r0
 80032aa:	000c      	movs	r4, r1
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	617c      	str	r4, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2222      	movs	r2, #34	; 0x22
 80032b4:	569b      	ldrsb	r3, [r3, r2]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fe fdf0 	bl	8001e9c <__aeabi_i2d>
 80032bc:	2200      	movs	r2, #0
 80032be:	4b44      	ldr	r3, [pc, #272]	; (80033d0 <compensate_humidity+0x218>)
 80032c0:	f7fd fbf2 	bl	8000aa8 <__aeabi_ddiv>
 80032c4:	0003      	movs	r3, r0
 80032c6:	000c      	movs	r4, r1
 80032c8:	0018      	movs	r0, r3
 80032ca:	0021      	movs	r1, r4
 80032cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d0:	f7fd fff4 	bl	80012bc <__aeabi_dmul>
 80032d4:	0003      	movs	r3, r0
 80032d6:	000c      	movs	r4, r1
 80032d8:	0018      	movs	r0, r3
 80032da:	0021      	movs	r1, r4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f7fd ffec 	bl	80012bc <__aeabi_dmul>
 80032e4:	0003      	movs	r3, r0
 80032e6:	000c      	movs	r4, r1
 80032e8:	0018      	movs	r0, r3
 80032ea:	0021      	movs	r1, r4
 80032ec:	2200      	movs	r2, #0
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <compensate_humidity+0x21c>)
 80032f0:	f7fd f8be 	bl	8000470 <__aeabi_dadd>
 80032f4:	0003      	movs	r3, r0
 80032f6:	000c      	movs	r4, r1
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	60fc      	str	r4, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	6a38      	ldr	r0, [r7, #32]
 8003302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003304:	f7fd ffda 	bl	80012bc <__aeabi_dmul>
 8003308:	0003      	movs	r3, r0
 800330a:	000c      	movs	r4, r1
 800330c:	0025      	movs	r5, r4
 800330e:	001c      	movs	r4, r3
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6938      	ldr	r0, [r7, #16]
 8003316:	6979      	ldr	r1, [r7, #20]
 8003318:	f7fd ffd0 	bl	80012bc <__aeabi_dmul>
 800331c:	0002      	movs	r2, r0
 800331e:	000b      	movs	r3, r1
 8003320:	0020      	movs	r0, r4
 8003322:	0029      	movs	r1, r5
 8003324:	f7fd ffca 	bl	80012bc <__aeabi_dmul>
 8003328:	0003      	movs	r3, r0
 800332a:	000c      	movs	r4, r1
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	60fc      	str	r4, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	7e1b      	ldrb	r3, [r3, #24]
 8003334:	0018      	movs	r0, r3
 8003336:	f7fe fdeb 	bl	8001f10 <__aeabi_ui2d>
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f7fd ffbd 	bl	80012bc <__aeabi_dmul>
 8003342:	0003      	movs	r3, r0
 8003344:	000c      	movs	r4, r1
 8003346:	0018      	movs	r0, r3
 8003348:	0021      	movs	r1, r4
 800334a:	2200      	movs	r2, #0
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <compensate_humidity+0x220>)
 800334e:	f7fd fbab 	bl	8000aa8 <__aeabi_ddiv>
 8003352:	0003      	movs	r3, r0
 8003354:	000c      	movs	r4, r1
 8003356:	001a      	movs	r2, r3
 8003358:	0023      	movs	r3, r4
 800335a:	2000      	movs	r0, #0
 800335c:	491d      	ldr	r1, [pc, #116]	; (80033d4 <compensate_humidity+0x21c>)
 800335e:	f7fe fa1f 	bl	80017a0 <__aeabi_dsub>
 8003362:	0003      	movs	r3, r0
 8003364:	000c      	movs	r4, r1
 8003366:	001a      	movs	r2, r3
 8003368:	0023      	movs	r3, r4
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	f7fd ffa5 	bl	80012bc <__aeabi_dmul>
 8003372:	0003      	movs	r3, r0
 8003374:	000c      	movs	r4, r1
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
 8003378:	64fc      	str	r4, [r7, #76]	; 0x4c

    if (humidity > humidity_max)
 800337a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800337c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003380:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003382:	f7fd f861 	bl	8000448 <__aeabi_dcmpgt>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d004      	beq.n	8003394 <compensate_humidity+0x1dc>
    {
        humidity = humidity_max;
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003390:	64fc      	str	r4, [r7, #76]	; 0x4c
 8003392:	e00b      	b.n	80033ac <compensate_humidity+0x1f4>
    }
    else if (humidity < humidity_min)
 8003394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003398:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800339a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800339c:	f7fd f840 	bl	8000420 <__aeabi_dcmplt>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d003      	beq.n	80033ac <compensate_humidity+0x1f4>
    {
        humidity = humidity_min;
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033aa:	64fc      	str	r4, [r7, #76]	; 0x4c
    }

    return humidity;
 80033ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ae:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	0021      	movs	r1, r4
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b014      	add	sp, #80	; 0x50
 80033b8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	40590000 	.word	0x40590000
 80033c0:	40f2c000 	.word	0x40f2c000
 80033c4:	40500000 	.word	0x40500000
 80033c8:	40d00000 	.word	0x40d00000
 80033cc:	40f00000 	.word	0x40f00000
 80033d0:	41900000 	.word	0x41900000
 80033d4:	3ff00000 	.word	0x3ff00000
 80033d8:	41200000 	.word	0x41200000

080033dc <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	b08b      	sub	sp, #44	; 0x2c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80033e4:	2526      	movs	r5, #38	; 0x26
 80033e6:	197b      	adds	r3, r7, r5
 80033e8:	2288      	movs	r2, #136	; 0x88
 80033ea:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 80033ec:	260c      	movs	r6, #12
 80033ee:	19bb      	adds	r3, r7, r6
 80033f0:	0018      	movs	r0, r3
 80033f2:	231a      	movs	r3, #26
 80033f4:	001a      	movs	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f002 fed8 	bl	80061ac <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80033fc:	2327      	movs	r3, #39	; 0x27
 80033fe:	18fc      	adds	r4, r7, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	19b9      	adds	r1, r7, r6
 8003404:	197b      	adds	r3, r7, r5
 8003406:	7818      	ldrb	r0, [r3, #0]
 8003408:	0013      	movs	r3, r2
 800340a:	221a      	movs	r2, #26
 800340c:	f7fe fe40 	bl	8002090 <bme280_get_regs>
 8003410:	0003      	movs	r3, r0
 8003412:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8003414:	2327      	movs	r3, #39	; 0x27
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b25b      	sxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d122      	bne.n	8003466 <get_calib_data+0x8a>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	250c      	movs	r5, #12
 8003424:	197b      	adds	r3, r7, r5
 8003426:	0011      	movs	r1, r2
 8003428:	0018      	movs	r0, r3
 800342a:	f000 f85b 	bl	80034e4 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800342e:	2026      	movs	r0, #38	; 0x26
 8003430:	183b      	adds	r3, r7, r0
 8003432:	22e1      	movs	r2, #225	; 0xe1
 8003434:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8003436:	2627      	movs	r6, #39	; 0x27
 8003438:	19bc      	adds	r4, r7, r6
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	1979      	adds	r1, r7, r5
 800343e:	183b      	adds	r3, r7, r0
 8003440:	7818      	ldrb	r0, [r3, #0]
 8003442:	0013      	movs	r3, r2
 8003444:	2207      	movs	r2, #7
 8003446:	f7fe fe23 	bl	8002090 <bme280_get_regs>
 800344a:	0003      	movs	r3, r0
 800344c:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800344e:	19bb      	adds	r3, r7, r6
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b25b      	sxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <get_calib_data+0x8a>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	230c      	movs	r3, #12
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f000 f8ec 	bl	800363e <parse_humidity_calib_data>
        }
    }

    return rslt;
 8003466:	2327      	movs	r3, #39	; 0x27
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b25b      	sxtb	r3, r3
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b00b      	add	sp, #44	; 0x2c
 8003474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003476 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	001a      	movs	r2, r3
 8003484:	1cfb      	adds	r3, r7, #3
 8003486:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8003488:	2317      	movs	r3, #23
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e01d      	b.n	80034ce <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003492:	2017      	movs	r0, #23
 8003494:	183b      	adds	r3, r7, r0
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	18d2      	adds	r2, r2, r3
 800349c:	183b      	adds	r3, r7, r0
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	18cb      	adds	r3, r1, r3
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	18d2      	adds	r2, r2, r3
 80034b4:	183b      	adds	r3, r7, r0
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	0019      	movs	r1, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	185b      	adds	r3, r3, r1
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80034c4:	183b      	adds	r3, r7, r0
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	3201      	adds	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	2317      	movs	r3, #23
 80034d0:	18fa      	adds	r2, r7, r3
 80034d2:	1cfb      	adds	r3, r7, #3
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3da      	bcc.n	8003492 <interleave_reg_addr+0x1c>
    }
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b006      	add	sp, #24
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	3318      	adds	r3, #24
 80034f2:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3301      	adds	r3, #1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b21a      	sxth	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b21b      	sxth	r3, r3
 8003504:	4313      	orrs	r3, r2
 8003506:	b21b      	sxth	r3, r3
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3303      	adds	r3, #3
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	b21a      	sxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3302      	adds	r3, #2
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b21b      	sxth	r3, r3
 8003520:	4313      	orrs	r3, r2
 8003522:	b21a      	sxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3305      	adds	r3, #5
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	b21a      	sxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b21b      	sxth	r3, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	b21a      	sxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3307      	adds	r3, #7
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b21a      	sxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3306      	adds	r3, #6
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b21b      	sxth	r3, r3
 8003554:	4313      	orrs	r3, r2
 8003556:	b21b      	sxth	r3, r3
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3309      	adds	r3, #9
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	b21a      	sxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3308      	adds	r3, #8
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b21b      	sxth	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b21a      	sxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	330b      	adds	r3, #11
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b21a      	sxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	330a      	adds	r3, #10
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b21b      	sxth	r3, r3
 800358a:	4313      	orrs	r3, r2
 800358c:	b21a      	sxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	330d      	adds	r3, #13
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	b21a      	sxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	330c      	adds	r3, #12
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b21b      	sxth	r3, r3
 80035a4:	4313      	orrs	r3, r2
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	330f      	adds	r3, #15
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	b21a      	sxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	330e      	adds	r3, #14
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b21b      	sxth	r3, r3
 80035be:	4313      	orrs	r3, r2
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3311      	adds	r3, #17
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3310      	adds	r3, #16
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	4313      	orrs	r3, r2
 80035da:	b21a      	sxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3313      	adds	r3, #19
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3312      	adds	r3, #18
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b21a      	sxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3315      	adds	r3, #21
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	b21a      	sxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3314      	adds	r3, #20
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b21b      	sxth	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b21a      	sxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3317      	adds	r3, #23
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	b21a      	sxth	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3316      	adds	r3, #22
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b21b      	sxth	r3, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	b21a      	sxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7e5a      	ldrb	r2, [r3, #25]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	761a      	strb	r2, [r3, #24]
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}

0800363e <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800363e:	b590      	push	{r4, r7, lr}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	3318      	adds	r3, #24
 800364c:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3301      	adds	r3, #1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	b21a      	sxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b21b      	sxth	r3, r3
 800365e:	4313      	orrs	r3, r2
 8003660:	b21a      	sxth	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	789a      	ldrb	r2, [r3, #2]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3303      	adds	r3, #3
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b25b      	sxtb	r3, r3
 8003676:	b29b      	uxth	r3, r3
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	b29a      	uxth	r2, r3
 800367c:	2012      	movs	r0, #18
 800367e:	183b      	adds	r3, r7, r0
 8003680:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b21a      	sxth	r2, r3
 800368a:	2410      	movs	r4, #16
 800368c:	193b      	adds	r3, r7, r4
 800368e:	210f      	movs	r1, #15
 8003690:	400a      	ands	r2, r1
 8003692:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8003694:	183a      	adds	r2, r7, r0
 8003696:	193b      	adds	r3, r7, r4
 8003698:	8812      	ldrh	r2, [r2, #0]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	b21a      	sxth	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3305      	adds	r3, #5
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	210e      	movs	r1, #14
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	200c      	movs	r0, #12
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80036c8:	187a      	adds	r2, r7, r1
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	8812      	ldrh	r2, [r2, #0]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	b21a      	sxth	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3306      	adds	r3, #6
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b259      	sxtb	r1, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2222      	movs	r2, #34	; 0x22
 80036e4:	5499      	strb	r1, [r3, r2]
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b007      	add	sp, #28
 80036ec:	bd90      	pop	{r4, r7, pc}

080036ee <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	0002      	movs	r2, r0
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	1dbb      	adds	r3, r7, #6
 80036fc:	1c0a      	adds	r2, r1, #0
 80036fe:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 8003700:	230f      	movs	r3, #15
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	1dba      	adds	r2, r7, #6
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	7812      	ldrb	r2, [r2, #0]
 8003710:	4013      	ands	r3, r2
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <are_settings_changed+0x34>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8003718:	230f      	movs	r3, #15
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e003      	b.n	800372a <are_settings_changed+0x3c>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8003722:	230f      	movs	r3, #15
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800372a:	230f      	movs	r3, #15
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	781b      	ldrb	r3, [r3, #0]
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <null_ptr_check+0x26>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <null_ptr_check+0x26>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <null_ptr_check+0x26>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800375e:	230f      	movs	r3, #15
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	22ff      	movs	r2, #255	; 0xff
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e003      	b.n	8003770 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8003768:	230f      	movs	r3, #15
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b25b      	sxtb	r3, r3
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b004      	add	sp, #16
 800377e:	bd80      	pop	{r7, pc}

08003780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b0a5      	sub	sp, #148	; 0x94
 8003784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  struct bme280_dev dev;

  int8_t rslt = BME280_OK;
 8003786:	248f      	movs	r4, #143	; 0x8f
 8003788:	193b      	adds	r3, r7, r4
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
  uint8_t dev_addr = BME280_I2C_ADDR_PRIM;
 800378e:	203f      	movs	r0, #63	; 0x3f
 8003790:	183b      	adds	r3, r7, r0
 8003792:	2276      	movs	r2, #118	; 0x76
 8003794:	701a      	strb	r2, [r3, #0]
  dev.intf = BME280_I2C_INTF;
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2201      	movs	r2, #1
 800379c:	721a      	strb	r2, [r3, #8]
  dev.read = user_i2c_read;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	4a35      	ldr	r2, [pc, #212]	; (8003878 <main+0xf8>)
 80037a2:	60da      	str	r2, [r3, #12]
  dev.write = user_i2c_write;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <main+0xfc>)
 80037a8:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	4a34      	ldr	r2, [pc, #208]	; (8003880 <main+0x100>)
 80037ae:	615a      	str	r2, [r3, #20]
  dev.intf_ptr = &dev_addr;
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	183a      	adds	r2, r7, r0
 80037b4:	605a      	str	r2, [r3, #4]
  uint8_t settings_sel;
  uint32_t req_delay;


  struct bme280_data comp_data;
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80037b6:	000d      	movs	r5, r1
 80037b8:	197b      	adds	r3, r7, r5
 80037ba:	2242      	movs	r2, #66	; 0x42
 80037bc:	2101      	movs	r1, #1
 80037be:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80037c0:	197b      	adds	r3, r7, r5
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	2105      	movs	r1, #5
 80037c6:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80037c8:	197b      	adds	r3, r7, r5
 80037ca:	2241      	movs	r2, #65	; 0x41
 80037cc:	2102      	movs	r1, #2
 80037ce:	5499      	strb	r1, [r3, r2]
  dev.settings.filter = BME280_FILTER_COEFF_16;
 80037d0:	197b      	adds	r3, r7, r5
 80037d2:	2243      	movs	r2, #67	; 0x43
 80037d4:	2104      	movs	r1, #4
 80037d6:	5499      	strb	r1, [r3, r2]

  settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;
 80037d8:	238e      	movs	r3, #142	; 0x8e
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	220f      	movs	r2, #15
 80037de:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e0:	f000 fb7c 	bl	8003edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037e4:	f000 f84e 	bl	8003884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037e8:	f000 f91a 	bl	8003a20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80037ec:	f000 f8e8 	bl	80039c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80037f0:	f000 f8a6 	bl	8003940 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  rslt = bme280_init(&dev);
 80037f4:	0026      	movs	r6, r4
 80037f6:	193c      	adds	r4, r7, r4
 80037f8:	197b      	adds	r3, r7, r5
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fe fbd8 	bl	8001fb0 <bme280_init>
 8003800:	0003      	movs	r3, r0
 8003802:	7023      	strb	r3, [r4, #0]
  rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8003804:	0034      	movs	r4, r6
 8003806:	193c      	adds	r4, r7, r4
 8003808:	197a      	adds	r2, r7, r5
 800380a:	238e      	movs	r3, #142	; 0x8e
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	0011      	movs	r1, r2
 8003812:	0018      	movs	r0, r3
 8003814:	f7fe fd26 	bl	8002264 <bme280_set_sensor_settings>
 8003818:	0003      	movs	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
  req_delay = bme280_cal_meas_delay(&dev.settings)*1000;
 800381c:	197b      	adds	r3, r7, r5
 800381e:	3340      	adds	r3, #64	; 0x40
 8003820:	0018      	movs	r0, r3
 8003822:	f7fe ff7f 	bl	8002724 <bme280_cal_meas_delay>
 8003826:	0002      	movs	r2, r0
 8003828:	0013      	movs	r3, r2
 800382a:	015b      	lsls	r3, r3, #5
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	189b      	adds	r3, r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	2288      	movs	r2, #136	; 0x88
 8003836:	18ba      	adds	r2, r7, r2
 8003838:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 800383a:	268f      	movs	r6, #143	; 0x8f
 800383c:	19bc      	adds	r4, r7, r6
 800383e:	2540      	movs	r5, #64	; 0x40
 8003840:	197b      	adds	r3, r7, r5
 8003842:	0019      	movs	r1, r3
 8003844:	2001      	movs	r0, #1
 8003846:	f7fe fd7c 	bl	8002342 <bme280_set_sensor_mode>
 800384a:	0003      	movs	r3, r0
 800384c:	7023      	strb	r3, [r4, #0]
	dev.delay_us(req_delay, dev.intf_ptr);
 800384e:	197b      	adds	r3, r7, r5
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	197b      	adds	r3, r7, r5
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	2388      	movs	r3, #136	; 0x88
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0018      	movs	r0, r3
 800385e:	4790      	blx	r2
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003860:	19bc      	adds	r4, r7, r6
 8003862:	197a      	adds	r2, r7, r5
 8003864:	2320      	movs	r3, #32
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	0019      	movs	r1, r3
 800386a:	2007      	movs	r0, #7
 800386c:	f7fe fe52 	bl	8002514 <bme280_get_sensor_data>
 8003870:	0003      	movs	r3, r0
 8003872:	7023      	strb	r3, [r4, #0]
	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003874:	e7e1      	b.n	800383a <main+0xba>
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	08003b39 	.word	0x08003b39
 800387c:	08003bc9 	.word	0x08003bc9
 8003880:	08003b11 	.word	0x08003b11

08003884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b099      	sub	sp, #100	; 0x64
 8003888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800388a:	242c      	movs	r4, #44	; 0x2c
 800388c:	193b      	adds	r3, r7, r4
 800388e:	0018      	movs	r0, r3
 8003890:	2334      	movs	r3, #52	; 0x34
 8003892:	001a      	movs	r2, r3
 8003894:	2100      	movs	r1, #0
 8003896:	f002 fc89 	bl	80061ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800389a:	231c      	movs	r3, #28
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	0018      	movs	r0, r3
 80038a0:	2310      	movs	r3, #16
 80038a2:	001a      	movs	r2, r3
 80038a4:	2100      	movs	r1, #0
 80038a6:	f002 fc81 	bl	80061ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038aa:	003b      	movs	r3, r7
 80038ac:	0018      	movs	r0, r3
 80038ae:	231c      	movs	r3, #28
 80038b0:	001a      	movs	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	f002 fc7a 	bl	80061ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80038b8:	0021      	movs	r1, r4
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2222      	movs	r2, #34	; 0x22
 80038be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2201      	movs	r2, #1
 80038c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2201      	movs	r2, #1
 80038ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2210      	movs	r2, #16
 80038d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2200      	movs	r2, #0
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	0018      	movs	r0, r3
 80038dc:	f001 faf0 	bl	8004ec0 <HAL_RCC_OscConfig>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d001      	beq.n	80038e8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80038e4:	f000 f9f2 	bl	8003ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e8:	211c      	movs	r1, #28
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	2207      	movs	r2, #7
 80038ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	2203      	movs	r2, #3
 80038f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2101      	movs	r1, #1
 8003906:	0018      	movs	r0, r3
 8003908:	f001 fe60 	bl	80055cc <HAL_RCC_ClockConfig>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003910:	f000 f9dc 	bl	8003ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003914:	003b      	movs	r3, r7
 8003916:	2222      	movs	r2, #34	; 0x22
 8003918:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800391a:	003b      	movs	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003920:	003b      	movs	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003926:	003b      	movs	r3, r7
 8003928:	0018      	movs	r0, r3
 800392a:	f001 ffc7 	bl	80058bc <HAL_RCCEx_PeriphCLKConfig>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d001      	beq.n	8003936 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003932:	f000 f9cb 	bl	8003ccc <Error_Handler>
  }
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b019      	add	sp, #100	; 0x64
 800393c:	bd90      	pop	{r4, r7, pc}
	...

08003940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <MX_I2C1_Init+0x74>)
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <MX_I2C1_Init+0x78>)
 8003948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <MX_I2C1_Init+0x74>)
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <MX_I2C1_Init+0x7c>)
 800394e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003950:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <MX_I2C1_Init+0x74>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <MX_I2C1_Init+0x74>)
 8003958:	2201      	movs	r2, #1
 800395a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800395c:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <MX_I2C1_Init+0x74>)
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <MX_I2C1_Init+0x74>)
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <MX_I2C1_Init+0x74>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <MX_I2C1_Init+0x74>)
 8003970:	2200      	movs	r2, #0
 8003972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <MX_I2C1_Init+0x74>)
 8003976:	2200      	movs	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <MX_I2C1_Init+0x74>)
 800397c:	0018      	movs	r0, r3
 800397e:	f000 fd7d 	bl	800447c <HAL_I2C_Init>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003986:	f000 f9a1 	bl	8003ccc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <MX_I2C1_Init+0x74>)
 800398c:	2100      	movs	r1, #0
 800398e:	0018      	movs	r0, r3
 8003990:	f001 f9fe 	bl	8004d90 <HAL_I2CEx_ConfigAnalogFilter>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d001      	beq.n	800399c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003998:	f000 f998 	bl	8003ccc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <MX_I2C1_Init+0x74>)
 800399e:	2100      	movs	r1, #0
 80039a0:	0018      	movs	r0, r3
 80039a2:	f001 fa41 	bl	8004e28 <HAL_I2CEx_ConfigDigitalFilter>
 80039a6:	1e03      	subs	r3, r0, #0
 80039a8:	d001      	beq.n	80039ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039aa:	f000 f98f 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000028 	.word	0x20000028
 80039b8:	40005400 	.word	0x40005400
 80039bc:	2000090e 	.word	0x2000090e

080039c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <MX_USART2_UART_Init+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039cc:	2296      	movs	r2, #150	; 0x96
 80039ce:	0192      	lsls	r2, r2, #6
 80039d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039e6:	220c      	movs	r2, #12
 80039e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f002 f859 	bl	8005abc <HAL_UART_Init>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a0e:	f000 f95d 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000074 	.word	0x20000074
 8003a1c:	40004400 	.word	0x40004400

08003a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b08b      	sub	sp, #44	; 0x2c
 8003a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a26:	2414      	movs	r4, #20
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	2314      	movs	r3, #20
 8003a2e:	001a      	movs	r2, r3
 8003a30:	2100      	movs	r1, #0
 8003a32:	f002 fbbb 	bl	80061ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a3c:	2180      	movs	r1, #128	; 0x80
 8003a3e:	0309      	lsls	r1, r1, #12
 8003a40:	430a      	orrs	r2, r1
 8003a42:	615a      	str	r2, [r3, #20]
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	031b      	lsls	r3, r3, #12
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	03c9      	lsls	r1, r1, #15
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	615a      	str	r2, [r3, #20]
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	03db      	lsls	r3, r3, #15
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6e:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0289      	lsls	r1, r1, #10
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	615a      	str	r2, [r3, #20]
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	02c9      	lsls	r1, r1, #11
 8003a94:	430a      	orrs	r2, r1
 8003a96:	615a      	str	r2, [r3, #20]
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <MX_GPIO_Init+0xe4>)
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	02db      	lsls	r3, r3, #11
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003aa6:	2390      	movs	r3, #144	; 0x90
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2120      	movs	r1, #32
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fcc6 	bl	8004440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ab4:	193b      	adds	r3, r7, r4
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	0192      	lsls	r2, r2, #6
 8003aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003abc:	193b      	adds	r3, r7, r4
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <MX_GPIO_Init+0xe8>)
 8003ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	193b      	adds	r3, r7, r4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <MX_GPIO_Init+0xec>)
 8003acc:	0019      	movs	r1, r3
 8003ace:	0010      	movs	r0, r2
 8003ad0:	f000 fb3e 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ad4:	0021      	movs	r1, r4
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2220      	movs	r2, #32
 8003ada:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	2201      	movs	r2, #1
 8003ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aee:	187a      	adds	r2, r7, r1
 8003af0:	2390      	movs	r3, #144	; 0x90
 8003af2:	05db      	lsls	r3, r3, #23
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 fb2a 	bl	8004150 <HAL_GPIO_Init>

}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b00b      	add	sp, #44	; 0x2c
 8003b02:	bd90      	pop	{r4, r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	10210000 	.word	0x10210000
 8003b0c:	48000800 	.word	0x48000800

08003b10 <user_delay_us>:

/* USER CODE BEGIN 4 */
void user_delay_us(uint32_t period, void *intf_ptr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    /*
     * Return control or wait,
     * for a period amount of milliseconds
     */
	HAL_Delay(period/1000);
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	23fa      	movs	r3, #250	; 0xfa
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	0010      	movs	r0, r2
 8003b22:	f7fc faf1 	bl	8000108 <__udivsi3>
 8003b26:	0003      	movs	r3, r0
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f000 fa3b 	bl	8003fa4 <HAL_Delay>
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <user_i2c_read>:

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	210f      	movs	r1, #15
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	1c02      	adds	r2, r0, #0
 8003b4a:	701a      	strb	r2, [r3, #0]

    /*
     * The parameter intf_ptr can be used as a variable to store the I2C address of the device
     */
    HAL_StatusTypeDef status;
    uint8_t buf[] = {reg_addr};
 8003b4c:	2014      	movs	r0, #20
 8003b4e:	183b      	adds	r3, r7, r0
 8003b50:	187a      	adds	r2, r7, r1
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
    uint8_t bme280_addr = *(uint8_t*)intf_ptr << 1;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2117      	movs	r1, #23
 8003b5c:	187a      	adds	r2, r7, r1
 8003b5e:	18db      	adds	r3, r3, r3
 8003b60:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Master_Transmit(&hi2c1, bme280_addr, buf, 1, HAL_MAX_DELAY);
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b299      	uxth	r1, r3
 8003b68:	2516      	movs	r5, #22
 8003b6a:	197c      	adds	r4, r7, r5
 8003b6c:	183a      	adds	r2, r7, r0
 8003b6e:	4815      	ldr	r0, [pc, #84]	; (8003bc4 <user_i2c_read+0x8c>)
 8003b70:	2301      	movs	r3, #1
 8003b72:	425b      	negs	r3, r3
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2301      	movs	r3, #1
 8003b78:	f000 fd16 	bl	80045a8 <HAL_I2C_Master_Transmit>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	7023      	strb	r3, [r4, #0]
	if (status != HAL_OK) {
 8003b80:	197b      	adds	r3, r7, r5
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <user_i2c_read+0x5a>
		return status;
 8003b88:	2316      	movs	r3, #22
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	e014      	b.n	8003bbc <user_i2c_read+0x84>
	}
	status = HAL_I2C_Master_Receive(&hi2c1, bme280_addr, reg_data, len, HAL_MAX_DELAY);
 8003b92:	2317      	movs	r3, #23
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	b299      	uxth	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	b29d      	uxth	r5, r3
 8003b9e:	2616      	movs	r6, #22
 8003ba0:	19bc      	adds	r4, r7, r6
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <user_i2c_read+0x8c>)
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	425b      	negs	r3, r3
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	002b      	movs	r3, r5
 8003bae:	f000 fe03 	bl	80047b8 <HAL_I2C_Master_Receive>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	7023      	strb	r3, [r4, #0]
	return status;
 8003bb6:	19bb      	adds	r3, r7, r6
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b25b      	sxtb	r3, r3
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b007      	add	sp, #28
 8003bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc4:	20000028 	.word	0x20000028

08003bc8 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bca:	b095      	sub	sp, #84	; 0x54
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	230f      	movs	r3, #15
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	4694      	mov	ip, r2
 8003bda:	44bc      	add	ip, r7
 8003bdc:	4463      	add	r3, ip
 8003bde:	1c02      	adds	r2, r0, #0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	466b      	mov	r3, sp
 8003be4:	607b      	str	r3, [r7, #4]
    /* Return 0 for Success, non-zero for failure */
    /*
     * The parameter intf_ptr can be used as a variable to store the I2C address of the device
     */
	uint32_t buf_len = len + 1;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t buf[buf_len];
 8003bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bee:	001a      	movs	r2, r3
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	617a      	str	r2, [r7, #20]
 8003bfa:	6938      	ldr	r0, [r7, #16]
 8003bfc:	6979      	ldr	r1, [r7, #20]
 8003bfe:	0006      	movs	r6, r0
 8003c00:	0f72      	lsrs	r2, r6, #29
 8003c02:	000e      	movs	r6, r1
 8003c04:	00f6      	lsls	r6, r6, #3
 8003c06:	61fe      	str	r6, [r7, #28]
 8003c08:	69fe      	ldr	r6, [r7, #28]
 8003c0a:	4316      	orrs	r6, r2
 8003c0c:	61fe      	str	r6, [r7, #28]
 8003c0e:	0001      	movs	r1, r0
 8003c10:	00c9      	lsls	r1, r1, #3
 8003c12:	61b9      	str	r1, [r7, #24]
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	2200      	movs	r2, #0
 8003c18:	60fa      	str	r2, [r7, #12]
 8003c1a:	68b8      	ldr	r0, [r7, #8]
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	0006      	movs	r6, r0
 8003c20:	0f72      	lsrs	r2, r6, #29
 8003c22:	000e      	movs	r6, r1
 8003c24:	00f5      	lsls	r5, r6, #3
 8003c26:	4315      	orrs	r5, r2
 8003c28:	0001      	movs	r1, r0
 8003c2a:	00cc      	lsls	r4, r1, #3
 8003c2c:	3307      	adds	r3, #7
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4669      	mov	r1, sp
 8003c34:	1ac9      	subs	r1, r1, r3
 8003c36:	468d      	mov	sp, r1
 8003c38:	ab02      	add	r3, sp, #8
 8003c3a:	3300      	adds	r3, #0
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
	buf[0] = reg_addr;
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	220f      	movs	r2, #15
 8003c42:	2120      	movs	r1, #32
 8003c44:	468c      	mov	ip, r1
 8003c46:	44bc      	add	ip, r7
 8003c48:	4462      	add	r2, ip
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	701a      	strb	r2, [r3, #0]
	uint8_t bme280_addr = *(uint8_t*)intf_ptr << 1;
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2217      	movs	r2, #23
 8003c54:	2120      	movs	r1, #32
 8003c56:	468c      	mov	ip, r1
 8003c58:	44bc      	add	ip, r7
 8003c5a:	4462      	add	r2, ip
 8003c5c:	18db      	adds	r3, r3, r3
 8003c5e:	7013      	strb	r3, [r2, #0]
	// concatenate the reg_addr along with the reg_data to the buffer
	for(int i = 0; i < len; i++) {
 8003c60:	2300      	movs	r3, #0
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
 8003c64:	e00a      	b.n	8003c7c <user_i2c_write+0xb4>
		buf[i+1] = reg_data[i];
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c6a:	18d2      	adds	r2, r2, r3
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6e:	3301      	adds	r3, #1
 8003c70:	7811      	ldrb	r1, [r2, #0]
 8003c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c74:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < len; i++) {
 8003c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c78:	3301      	adds	r3, #1
 8003c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f0      	bhi.n	8003c66 <user_i2c_write+0x9e>
	}
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, bme280_addr, buf, buf_len, HAL_MAX_DELAY);
 8003c84:	2317      	movs	r3, #23
 8003c86:	2220      	movs	r2, #32
 8003c88:	4694      	mov	ip, r2
 8003c8a:	44bc      	add	ip, r7
 8003c8c:	4463      	add	r3, ip
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b299      	uxth	r1, r3
 8003c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c96:	b29d      	uxth	r5, r3
 8003c98:	2616      	movs	r6, #22
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	199c      	adds	r4, r3, r6
 8003ca0:	4809      	ldr	r0, [pc, #36]	; (8003cc8 <user_i2c_write+0x100>)
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	425b      	negs	r3, r3
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	002b      	movs	r3, r5
 8003caa:	f000 fc7d 	bl	80045a8 <HAL_I2C_Master_Transmit>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	7023      	strb	r3, [r4, #0]
	return status;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	199b      	adds	r3, r3, r6
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4695      	mov	sp, r2

}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b013      	add	sp, #76	; 0x4c
 8003cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc8:	20000028 	.word	0x20000028

08003ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cd2:	e7fe      	b.n	8003cd2 <Error_Handler+0x6>

08003cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_MspInit+0x44>)
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_MspInit+0x44>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	619a      	str	r2, [r3, #24]
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_MspInit+0x44>)
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_MspInit+0x44>)
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_MspInit+0x44>)
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	0549      	lsls	r1, r1, #21
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_MspInit+0x44>)
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	055b      	lsls	r3, r3, #21
 8003d08:	4013      	ands	r3, r2
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	; 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	2314      	movs	r3, #20
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	0018      	movs	r0, r3
 8003d2a:	2314      	movs	r3, #20
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f002 fa3c 	bl	80061ac <memset>
  if(hi2c->Instance==I2C1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_I2C_MspInit+0x90>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d132      	bne.n	8003da4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <HAL_I2C_MspInit+0x94>)
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_I2C_MspInit+0x94>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	02c9      	lsls	r1, r1, #11
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	615a      	str	r2, [r3, #20]
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_I2C_MspInit+0x94>)
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	02db      	lsls	r3, r3, #11
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d5a:	2114      	movs	r1, #20
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	22c0      	movs	r2, #192	; 0xc0
 8003d60:	0092      	lsls	r2, r2, #2
 8003d62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2212      	movs	r2, #18
 8003d68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d6a:	187b      	adds	r3, r7, r1
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	2203      	movs	r2, #3
 8003d74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	2201      	movs	r2, #1
 8003d7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <HAL_I2C_MspInit+0x98>)
 8003d80:	0019      	movs	r1, r3
 8003d82:	0010      	movs	r0, r2
 8003d84:	f000 f9e4 	bl	8004150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_I2C_MspInit+0x94>)
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_I2C_MspInit+0x94>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	0389      	lsls	r1, r1, #14
 8003d92:	430a      	orrs	r2, r1
 8003d94:	61da      	str	r2, [r3, #28]
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_I2C_MspInit+0x94>)
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	039b      	lsls	r3, r3, #14
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b00a      	add	sp, #40	; 0x28
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40005400 	.word	0x40005400
 8003db0:	40021000 	.word	0x40021000
 8003db4:	48000400 	.word	0x48000400

08003db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	2314      	movs	r3, #20
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	2314      	movs	r3, #20
 8003dc8:	001a      	movs	r2, r3
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f002 f9ee 	bl	80061ac <memset>
  if(huart->Instance==USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_UART_MspInit+0x90>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d132      	bne.n	8003e40 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <HAL_UART_MspInit+0x94>)
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_UART_MspInit+0x94>)
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	0289      	lsls	r1, r1, #10
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_UART_MspInit+0x94>)
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <HAL_UART_MspInit+0x94>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_UART_MspInit+0x94>)
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	0289      	lsls	r1, r1, #10
 8003e00:	430a      	orrs	r2, r1
 8003e02:	615a      	str	r2, [r3, #20]
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_UART_MspInit+0x94>)
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e12:	2114      	movs	r1, #20
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	220c      	movs	r2, #12
 8003e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2200      	movs	r2, #0
 8003e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2201      	movs	r2, #1
 8003e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e32:	187a      	adds	r2, r7, r1
 8003e34:	2390      	movs	r3, #144	; 0x90
 8003e36:	05db      	lsls	r3, r3, #23
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 f988 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b00a      	add	sp, #40	; 0x28
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40021000 	.word	0x40021000

08003e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <NMI_Handler+0x4>

08003e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e5a:	e7fe      	b.n	8003e5a <HardFault_Handler+0x4>

08003e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e74:	f000 f87a 	bl	8003f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e88:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e8c:	480d      	ldr	r0, [pc, #52]	; (8003ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e8e:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e90:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <LoopForever+0xe>)
  movs r3, #0
 8003e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e94:	e002      	b.n	8003e9c <LoopCopyDataInit>

08003e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9a:	3304      	adds	r3, #4

08003e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea0:	d3f9      	bcc.n	8003e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ea4:	4c0b      	ldr	r4, [pc, #44]	; (8003ed4 <LoopForever+0x16>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea8:	e001      	b.n	8003eae <LoopFillZerobss>

08003eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eac:	3204      	adds	r2, #4

08003eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb0:	d3fb      	bcc.n	8003eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003eb2:	f7ff ffe4 	bl	8003e7e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003eb6:	f002 f955 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003eba:	f7ff fc61 	bl	8003780 <main>

08003ebe <LoopForever>:

LoopForever:
    b LoopForever
 8003ebe:	e7fe      	b.n	8003ebe <LoopForever>
  ldr   r0, =_estack
 8003ec0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003ecc:	0800629c 	.word	0x0800629c
  ldr r2, =_sbss
 8003ed0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003ed4:	200000fc 	.word	0x200000fc

08003ed8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ed8:	e7fe      	b.n	8003ed8 <ADC1_COMP_IRQHandler>
	...

08003edc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_Init+0x24>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_Init+0x24>)
 8003ee6:	2110      	movs	r1, #16
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f000 f809 	bl	8003f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ef2:	f7ff feef 	bl	8003cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	40022000 	.word	0x40022000

08003f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <HAL_InitTick+0x5c>)
 8003f0e:	681c      	ldr	r4, [r3, #0]
 8003f10:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <HAL_InitTick+0x60>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	0019      	movs	r1, r3
 8003f16:	23fa      	movs	r3, #250	; 0xfa
 8003f18:	0098      	lsls	r0, r3, #2
 8003f1a:	f7fc f8f5 	bl	8000108 <__udivsi3>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	0019      	movs	r1, r3
 8003f22:	0020      	movs	r0, r4
 8003f24:	f7fc f8f0 	bl	8000108 <__udivsi3>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 f903 	bl	8004136 <HAL_SYSTICK_Config>
 8003f30:	1e03      	subs	r3, r0, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e00f      	b.n	8003f58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d80b      	bhi.n	8003f56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	2301      	movs	r3, #1
 8003f42:	425b      	negs	r3, r3
 8003f44:	2200      	movs	r2, #0
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 f8e0 	bl	800410c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_InitTick+0x64>)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b003      	add	sp, #12
 8003f5e:	bd90      	pop	{r4, r7, pc}
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000008 	.word	0x20000008
 8003f68:	20000004 	.word	0x20000004

08003f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_IncTick+0x1c>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	001a      	movs	r2, r3
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_IncTick+0x20>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	18d2      	adds	r2, r2, r3
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_IncTick+0x20>)
 8003f7e:	601a      	str	r2, [r3, #0]
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	20000008 	.word	0x20000008
 8003f8c:	200000f8 	.word	0x200000f8

08003f90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  return uwTick;
 8003f94:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <HAL_GetTick+0x10>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	200000f8 	.word	0x200000f8

08003fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_GetTick>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	d005      	beq.n	8003fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_Delay+0x40>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	f7ff ffe0 	bl	8003f90 <HAL_GetTick>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d8f7      	bhi.n	8003fcc <HAL_Delay+0x28>
  {
  }
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b004      	add	sp, #16
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000008 	.word	0x20000008

08003fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	0002      	movs	r2, r0
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ff6:	1dfb      	adds	r3, r7, #7
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8003ffc:	d828      	bhi.n	8004050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ffe:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <__NVIC_SetPriority+0xd4>)
 8004000:	1dfb      	adds	r3, r7, #7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b25b      	sxtb	r3, r3
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	33c0      	adds	r3, #192	; 0xc0
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	589b      	ldr	r3, [r3, r2]
 800400e:	1dfa      	adds	r2, r7, #7
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	0011      	movs	r1, r2
 8004014:	2203      	movs	r2, #3
 8004016:	400a      	ands	r2, r1
 8004018:	00d2      	lsls	r2, r2, #3
 800401a:	21ff      	movs	r1, #255	; 0xff
 800401c:	4091      	lsls	r1, r2
 800401e:	000a      	movs	r2, r1
 8004020:	43d2      	mvns	r2, r2
 8004022:	401a      	ands	r2, r3
 8004024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	401a      	ands	r2, r3
 800402e:	1dfb      	adds	r3, r7, #7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	0018      	movs	r0, r3
 8004034:	2303      	movs	r3, #3
 8004036:	4003      	ands	r3, r0
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800403c:	481f      	ldr	r0, [pc, #124]	; (80040bc <__NVIC_SetPriority+0xd4>)
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b25b      	sxtb	r3, r3
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	430a      	orrs	r2, r1
 8004048:	33c0      	adds	r3, #192	; 0xc0
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800404e:	e031      	b.n	80040b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <__NVIC_SetPriority+0xd8>)
 8004052:	1dfb      	adds	r3, r7, #7
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	0019      	movs	r1, r3
 8004058:	230f      	movs	r3, #15
 800405a:	400b      	ands	r3, r1
 800405c:	3b08      	subs	r3, #8
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3306      	adds	r3, #6
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	18d3      	adds	r3, r2, r3
 8004066:	3304      	adds	r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1dfa      	adds	r2, r7, #7
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	0011      	movs	r1, r2
 8004070:	2203      	movs	r2, #3
 8004072:	400a      	ands	r2, r1
 8004074:	00d2      	lsls	r2, r2, #3
 8004076:	21ff      	movs	r1, #255	; 0xff
 8004078:	4091      	lsls	r1, r2
 800407a:	000a      	movs	r2, r1
 800407c:	43d2      	mvns	r2, r2
 800407e:	401a      	ands	r2, r3
 8004080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	22ff      	movs	r2, #255	; 0xff
 8004088:	401a      	ands	r2, r3
 800408a:	1dfb      	adds	r3, r7, #7
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	0018      	movs	r0, r3
 8004090:	2303      	movs	r3, #3
 8004092:	4003      	ands	r3, r0
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004098:	4809      	ldr	r0, [pc, #36]	; (80040c0 <__NVIC_SetPriority+0xd8>)
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	001c      	movs	r4, r3
 80040a0:	230f      	movs	r3, #15
 80040a2:	4023      	ands	r3, r4
 80040a4:	3b08      	subs	r3, #8
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	430a      	orrs	r2, r1
 80040aa:	3306      	adds	r3, #6
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	18c3      	adds	r3, r0, r3
 80040b0:	3304      	adds	r3, #4
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b003      	add	sp, #12
 80040ba:	bd90      	pop	{r4, r7, pc}
 80040bc:	e000e100 	.word	0xe000e100
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <SysTick_Config+0x40>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d6:	2301      	movs	r3, #1
 80040d8:	e010      	b.n	80040fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <SysTick_Config+0x44>)
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	3a01      	subs	r2, #1
 80040e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e2:	2301      	movs	r3, #1
 80040e4:	425b      	negs	r3, r3
 80040e6:	2103      	movs	r1, #3
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff ff7d 	bl	8003fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <SysTick_Config+0x44>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <SysTick_Config+0x44>)
 80040f6:	2207      	movs	r2, #7
 80040f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b002      	add	sp, #8
 8004102:	bd80      	pop	{r7, pc}
 8004104:	00ffffff 	.word	0x00ffffff
 8004108:	e000e010 	.word	0xe000e010

0800410c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	210f      	movs	r1, #15
 8004118:	187b      	adds	r3, r7, r1
 800411a:	1c02      	adds	r2, r0, #0
 800411c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	187b      	adds	r3, r7, r1
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b25b      	sxtb	r3, r3
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff ff5d 	bl	8003fe8 <__NVIC_SetPriority>
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff ffbf 	bl	80040c4 <SysTick_Config>
 8004146:	0003      	movs	r3, r0
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800415e:	e155      	b.n	800440c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4091      	lsls	r1, r2
 800416a:	000a      	movs	r2, r1
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d100      	bne.n	8004178 <HAL_GPIO_Init+0x28>
 8004176:	e146      	b.n	8004406 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d00b      	beq.n	8004198 <HAL_GPIO_Init+0x48>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d007      	beq.n	8004198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800418c:	2b11      	cmp	r3, #17
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b12      	cmp	r3, #18
 8004196:	d130      	bne.n	80041fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	409a      	lsls	r2, r3
 80041a6:	0013      	movs	r3, r2
 80041a8:	43da      	mvns	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	409a      	lsls	r2, r3
 80041ba:	0013      	movs	r3, r2
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041ce:	2201      	movs	r2, #1
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	409a      	lsls	r2, r3
 80041d4:	0013      	movs	r3, r2
 80041d6:	43da      	mvns	r2, r3
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4013      	ands	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	2201      	movs	r2, #1
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	409a      	lsls	r2, r3
 80041ec:	0013      	movs	r3, r2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	2203      	movs	r2, #3
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	43da      	mvns	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	0013      	movs	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0xea>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b12      	cmp	r3, #18
 8004238:	d123      	bne.n	8004282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	08da      	lsrs	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3208      	adds	r2, #8
 8004242:	0092      	lsls	r2, r2, #2
 8004244:	58d3      	ldr	r3, [r2, r3]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2207      	movs	r2, #7
 800424c:	4013      	ands	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	409a      	lsls	r2, r3
 8004254:	0013      	movs	r3, r2
 8004256:	43da      	mvns	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2107      	movs	r1, #7
 8004266:	400b      	ands	r3, r1
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	409a      	lsls	r2, r3
 800426c:	0013      	movs	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	08da      	lsrs	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3208      	adds	r2, #8
 800427c:	0092      	lsls	r2, r2, #2
 800427e:	6939      	ldr	r1, [r7, #16]
 8004280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2203      	movs	r2, #3
 800428e:	409a      	lsls	r2, r3
 8004290:	0013      	movs	r3, r2
 8004292:	43da      	mvns	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	401a      	ands	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	055b      	lsls	r3, r3, #21
 80042be:	4013      	ands	r3, r2
 80042c0:	d100      	bne.n	80042c4 <HAL_GPIO_Init+0x174>
 80042c2:	e0a0      	b.n	8004406 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c4:	4b57      	ldr	r3, [pc, #348]	; (8004424 <HAL_GPIO_Init+0x2d4>)
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_GPIO_Init+0x2d4>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	619a      	str	r2, [r3, #24]
 80042d0:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_GPIO_Init+0x2d4>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2201      	movs	r2, #1
 80042d6:	4013      	ands	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_GPIO_Init+0x2d8>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	3302      	adds	r3, #2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2203      	movs	r2, #3
 80042ee:	4013      	ands	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	409a      	lsls	r2, r3
 80042f6:	0013      	movs	r3, r2
 80042f8:	43da      	mvns	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	2390      	movs	r3, #144	; 0x90
 8004304:	05db      	lsls	r3, r3, #23
 8004306:	429a      	cmp	r2, r3
 8004308:	d019      	beq.n	800433e <HAL_GPIO_Init+0x1ee>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <HAL_GPIO_Init+0x2dc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <HAL_GPIO_Init+0x1ea>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a46      	ldr	r2, [pc, #280]	; (8004430 <HAL_GPIO_Init+0x2e0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00d      	beq.n	8004336 <HAL_GPIO_Init+0x1e6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a45      	ldr	r2, [pc, #276]	; (8004434 <HAL_GPIO_Init+0x2e4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <HAL_GPIO_Init+0x1e2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a44      	ldr	r2, [pc, #272]	; (8004438 <HAL_GPIO_Init+0x2e8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_GPIO_Init+0x1de>
 800432a:	2304      	movs	r3, #4
 800432c:	e008      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 800432e:	2305      	movs	r3, #5
 8004330:	e006      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 8004332:	2303      	movs	r3, #3
 8004334:	e004      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 8004336:	2302      	movs	r3, #2
 8004338:	e002      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 800433e:	2300      	movs	r3, #0
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	2103      	movs	r1, #3
 8004344:	400a      	ands	r2, r1
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	4093      	lsls	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004350:	4935      	ldr	r1, [pc, #212]	; (8004428 <HAL_GPIO_Init+0x2d8>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800435e:	4b37      	ldr	r3, [pc, #220]	; (800443c <HAL_GPIO_Init+0x2ec>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43da      	mvns	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	025b      	lsls	r3, r3, #9
 8004376:	4013      	ands	r3, r2
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <HAL_GPIO_Init+0x2ec>)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004388:	4b2c      	ldr	r3, [pc, #176]	; (800443c <HAL_GPIO_Init+0x2ec>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43da      	mvns	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	029b      	lsls	r3, r3, #10
 80043a0:	4013      	ands	r3, r2
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43da      	mvns	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	035b      	lsls	r3, r3, #13
 80043ca:	4013      	ands	r3, r2
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	039b      	lsls	r3, r3, #14
 80043f4:	4013      	ands	r3, r2
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_GPIO_Init+0x2ec>)
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	40da      	lsrs	r2, r3
 8004414:	1e13      	subs	r3, r2, #0
 8004416:	d000      	beq.n	800441a <HAL_GPIO_Init+0x2ca>
 8004418:	e6a2      	b.n	8004160 <HAL_GPIO_Init+0x10>
  } 
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b006      	add	sp, #24
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	40021000 	.word	0x40021000
 8004428:	40010000 	.word	0x40010000
 800442c:	48000400 	.word	0x48000400
 8004430:	48000800 	.word	0x48000800
 8004434:	48000c00 	.word	0x48000c00
 8004438:	48001000 	.word	0x48001000
 800443c:	40010400 	.word	0x40010400

08004440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	0008      	movs	r0, r1
 800444a:	0011      	movs	r1, r2
 800444c:	1cbb      	adds	r3, r7, #2
 800444e:	1c02      	adds	r2, r0, #0
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	1c7b      	adds	r3, r7, #1
 8004454:	1c0a      	adds	r2, r1, #0
 8004456:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004458:	1c7b      	adds	r3, r7, #1
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004460:	1cbb      	adds	r3, r7, #2
 8004462:	881a      	ldrh	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004468:	e003      	b.n	8004472 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800446a:	1cbb      	adds	r3, r7, #2
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	46bd      	mov	sp, r7
 8004476:	b002      	add	sp, #8
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e082      	b.n	8004594 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2241      	movs	r2, #65	; 0x41
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2240      	movs	r2, #64	; 0x40
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7ff fc39 	bl	8003d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2241      	movs	r2, #65	; 0x41
 80044ae:	2124      	movs	r1, #36	; 0x24
 80044b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	438a      	bics	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4934      	ldr	r1, [pc, #208]	; (800459c <HAL_I2C_Init+0x120>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4931      	ldr	r1, [pc, #196]	; (80045a0 <HAL_I2C_Init+0x124>)
 80044dc:	400a      	ands	r2, r1
 80044de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d108      	bne.n	80044fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	0209      	lsls	r1, r1, #8
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e007      	b.n	800450a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2184      	movs	r1, #132	; 0x84
 8004504:	0209      	lsls	r1, r1, #8
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d104      	bne.n	800451c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	0112      	lsls	r2, r2, #4
 800451a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	491f      	ldr	r1, [pc, #124]	; (80045a4 <HAL_I2C_Init+0x128>)
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	491a      	ldr	r1, [pc, #104]	; (80045a0 <HAL_I2C_Init+0x124>)
 8004538:	400a      	ands	r2, r1
 800453a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	431a      	orrs	r2, r3
 8004546:	0011      	movs	r1, r2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69d9      	ldr	r1, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2241      	movs	r2, #65	; 0x41
 8004580:	2120      	movs	r1, #32
 8004582:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2242      	movs	r2, #66	; 0x42
 800458e:	2100      	movs	r1, #0
 8004590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b002      	add	sp, #8
 800459a:	bd80      	pop	{r7, pc}
 800459c:	f0ffffff 	.word	0xf0ffffff
 80045a0:	ffff7fff 	.word	0xffff7fff
 80045a4:	02008000 	.word	0x02008000

080045a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	0008      	movs	r0, r1
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	0019      	movs	r1, r3
 80045b6:	230a      	movs	r3, #10
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	2308      	movs	r3, #8
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	1c0a      	adds	r2, r1, #0
 80045c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2241      	movs	r2, #65	; 0x41
 80045ca:	5c9b      	ldrb	r3, [r3, r2]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d000      	beq.n	80045d4 <HAL_I2C_Master_Transmit+0x2c>
 80045d2:	e0e7      	b.n	80047a4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	5c9b      	ldrb	r3, [r3, r2]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Master_Transmit+0x3a>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0e1      	b.n	80047a6 <HAL_I2C_Master_Transmit+0x1fe>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2240      	movs	r2, #64	; 0x40
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045ea:	f7ff fcd1 	bl	8003f90 <HAL_GetTick>
 80045ee:	0003      	movs	r3, r0
 80045f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	0219      	lsls	r1, r3, #8
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	f000 fa04 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0cc      	b.n	80047a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2241      	movs	r2, #65	; 0x41
 8004610:	2121      	movs	r1, #33	; 0x21
 8004612:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2242      	movs	r2, #66	; 0x42
 8004618:	2110      	movs	r1, #16
 800461a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2208      	movs	r2, #8
 800462c:	18ba      	adds	r2, r7, r2
 800462e:	8812      	ldrh	r2, [r2, #0]
 8004630:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2bff      	cmp	r3, #255	; 0xff
 8004640:	d911      	bls.n	8004666 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	22ff      	movs	r2, #255	; 0xff
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	b2da      	uxtb	r2, r3
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	045c      	lsls	r4, r3, #17
 8004652:	230a      	movs	r3, #10
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	8819      	ldrh	r1, [r3, #0]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	4b55      	ldr	r3, [pc, #340]	; (80047b0 <HAL_I2C_Master_Transmit+0x208>)
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	0023      	movs	r3, r4
 8004660:	f000 fb60 	bl	8004d24 <I2C_TransferConfig>
 8004664:	e075      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	b2da      	uxtb	r2, r3
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	049c      	lsls	r4, r3, #18
 800467a:	230a      	movs	r3, #10
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	8819      	ldrh	r1, [r3, #0]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	4b4b      	ldr	r3, [pc, #300]	; (80047b0 <HAL_I2C_Master_Transmit+0x208>)
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	0023      	movs	r3, r4
 8004688:	f000 fb4c 	bl	8004d24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800468c:	e061      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 f9f8 	bl	8004a8a <I2C_WaitOnTXISFlagUntilTimeout>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e081      	b.n	80047a6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03a      	beq.n	8004752 <HAL_I2C_Master_Transmit+0x1aa>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d136      	bne.n	8004752 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	0013      	movs	r3, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	f000 f98b 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80046f6:	1e03      	subs	r3, r0, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e053      	b.n	80047a6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	2bff      	cmp	r3, #255	; 0xff
 8004706:	d911      	bls.n	800472c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	22ff      	movs	r2, #255	; 0xff
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	b2da      	uxtb	r2, r3
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	045c      	lsls	r4, r3, #17
 8004718:	230a      	movs	r3, #10
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	8819      	ldrh	r1, [r3, #0]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	0023      	movs	r3, r4
 8004726:	f000 fafd 	bl	8004d24 <I2C_TransferConfig>
 800472a:	e012      	b.n	8004752 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	049c      	lsls	r4, r3, #18
 8004740:	230a      	movs	r3, #10
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	8819      	ldrh	r1, [r3, #0]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	2300      	movs	r3, #0
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	0023      	movs	r3, r4
 800474e:	f000 fae9 	bl	8004d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d198      	bne.n	800468e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	0018      	movs	r0, r3
 8004764:	f000 f9d0 	bl	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004768:	1e03      	subs	r3, r0, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e01a      	b.n	80047a6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2220      	movs	r2, #32
 8004776:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	490c      	ldr	r1, [pc, #48]	; (80047b4 <HAL_I2C_Master_Transmit+0x20c>)
 8004784:	400a      	ands	r2, r1
 8004786:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2241      	movs	r2, #65	; 0x41
 800478c:	2120      	movs	r1, #32
 800478e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2242      	movs	r2, #66	; 0x42
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2240      	movs	r2, #64	; 0x40
 800479c:	2100      	movs	r1, #0
 800479e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b007      	add	sp, #28
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	80002000 	.word	0x80002000
 80047b4:	fe00e800 	.word	0xfe00e800

080047b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	0008      	movs	r0, r1
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	0019      	movs	r1, r3
 80047c6:	230a      	movs	r3, #10
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	1c02      	adds	r2, r0, #0
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	2308      	movs	r3, #8
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	1c0a      	adds	r2, r1, #0
 80047d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2241      	movs	r2, #65	; 0x41
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d000      	beq.n	80047e4 <HAL_I2C_Master_Receive+0x2c>
 80047e2:	e0e8      	b.n	80049b6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	5c9b      	ldrb	r3, [r3, r2]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_I2C_Master_Receive+0x3a>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e0e2      	b.n	80049b8 <HAL_I2C_Master_Receive+0x200>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	2101      	movs	r1, #1
 80047f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047fa:	f7ff fbc9 	bl	8003f90 <HAL_GetTick>
 80047fe:	0003      	movs	r3, r0
 8004800:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	0219      	lsls	r1, r3, #8
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	2319      	movs	r3, #25
 800480e:	2201      	movs	r2, #1
 8004810:	f000 f8fc 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0cd      	b.n	80049b8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2241      	movs	r2, #65	; 0x41
 8004820:	2122      	movs	r1, #34	; 0x22
 8004822:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2242      	movs	r2, #66	; 0x42
 8004828:	2110      	movs	r1, #16
 800482a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2208      	movs	r2, #8
 800483c:	18ba      	adds	r2, r7, r2
 800483e:	8812      	ldrh	r2, [r2, #0]
 8004840:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	2bff      	cmp	r3, #255	; 0xff
 8004850:	d911      	bls.n	8004876 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	22ff      	movs	r2, #255	; 0xff
 8004856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	b2da      	uxtb	r2, r3
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	045c      	lsls	r4, r3, #17
 8004862:	230a      	movs	r3, #10
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	8819      	ldrh	r1, [r3, #0]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	4b55      	ldr	r3, [pc, #340]	; (80049c0 <HAL_I2C_Master_Receive+0x208>)
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	0023      	movs	r3, r4
 8004870:	f000 fa58 	bl	8004d24 <I2C_TransferConfig>
 8004874:	e076      	b.n	8004964 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	b2da      	uxtb	r2, r3
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	049c      	lsls	r4, r3, #18
 800488a:	230a      	movs	r3, #10
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	8819      	ldrh	r1, [r3, #0]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_I2C_Master_Receive+0x208>)
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	0023      	movs	r3, r4
 8004898:	f000 fa44 	bl	8004d24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800489c:	e062      	b.n	8004964 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 f96b 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048aa:	1e03      	subs	r3, r0, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e082      	b.n	80049b8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03a      	beq.n	8004964 <HAL_I2C_Master_Receive+0x1ac>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d136      	bne.n	8004964 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	0013      	movs	r3, r2
 8004900:	2200      	movs	r2, #0
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	f000 f882 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004908:	1e03      	subs	r3, r0, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e053      	b.n	80049b8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2bff      	cmp	r3, #255	; 0xff
 8004918:	d911      	bls.n	800493e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	22ff      	movs	r2, #255	; 0xff
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004924:	b2da      	uxtb	r2, r3
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	045c      	lsls	r4, r3, #17
 800492a:	230a      	movs	r3, #10
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	8819      	ldrh	r1, [r3, #0]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	2300      	movs	r3, #0
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	0023      	movs	r3, r4
 8004938:	f000 f9f4 	bl	8004d24 <I2C_TransferConfig>
 800493c:	e012      	b.n	8004964 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	b2da      	uxtb	r2, r3
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	049c      	lsls	r4, r3, #18
 8004952:	230a      	movs	r3, #10
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	8819      	ldrh	r1, [r3, #0]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	2300      	movs	r3, #0
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	0023      	movs	r3, r4
 8004960:	f000 f9e0 	bl	8004d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d197      	bne.n	800489e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f8c7 	bl	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 800497a:	1e03      	subs	r3, r0, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e01a      	b.n	80049b8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2220      	movs	r2, #32
 8004988:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	490b      	ldr	r1, [pc, #44]	; (80049c4 <HAL_I2C_Master_Receive+0x20c>)
 8004996:	400a      	ands	r2, r1
 8004998:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2241      	movs	r2, #65	; 0x41
 800499e:	2120      	movs	r1, #32
 80049a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2242      	movs	r2, #66	; 0x42
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2240      	movs	r2, #64	; 0x40
 80049ae:	2100      	movs	r1, #0
 80049b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b007      	add	sp, #28
 80049be:	bd90      	pop	{r4, r7, pc}
 80049c0:	80002400 	.word	0x80002400
 80049c4:	fe00e800 	.word	0xfe00e800

080049c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2202      	movs	r2, #2
 80049d8:	4013      	ands	r3, r2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d103      	bne.n	80049e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d007      	beq.n	8004a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2101      	movs	r1, #1
 8004a00:	430a      	orrs	r2, r1
 8004a02:	619a      	str	r2, [r3, #24]
  }
}
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b002      	add	sp, #8
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	1dfb      	adds	r3, r7, #7
 8004a1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	e021      	b.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	d01e      	beq.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a24:	f7ff fab4 	bl	8003f90 <HAL_GetTick>
 8004a28:	0002      	movs	r2, r0
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d113      	bne.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	2220      	movs	r2, #32
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2241      	movs	r2, #65	; 0x41
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2242      	movs	r2, #66	; 0x42
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2240      	movs	r2, #64	; 0x40
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e00f      	b.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	425a      	negs	r2, r3
 8004a72:	4153      	adcs	r3, r2
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	001a      	movs	r2, r3
 8004a78:	1dfb      	adds	r3, r7, #7
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d0ce      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	0018      	movs	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b004      	add	sp, #16
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a96:	e02b      	b.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 f8da 	bl	8004c58 <I2C_IsAcknowledgeFailed>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	d001      	beq.n	8004aac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e029      	b.n	8004b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	d01e      	beq.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7ff fa6d 	bl	8003f90 <HAL_GetTick>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d113      	bne.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	2220      	movs	r2, #32
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2241      	movs	r2, #65	; 0x41
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2242      	movs	r2, #66	; 0x42
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e007      	b.n	8004b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2202      	movs	r2, #2
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d1cc      	bne.n	8004a98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b004      	add	sp, #16
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b14:	e028      	b.n	8004b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f89b 	bl	8004c58 <I2C_IsAcknowledgeFailed>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e026      	b.n	8004b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7ff fa31 	bl	8003f90 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d113      	bne.n	8004b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	2220      	movs	r2, #32
 8004b46:	431a      	orrs	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2241      	movs	r2, #65	; 0x41
 8004b50:	2120      	movs	r1, #32
 8004b52:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2242      	movs	r2, #66	; 0x42
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2240      	movs	r2, #64	; 0x40
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e007      	b.n	8004b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d1cf      	bne.n	8004b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b004      	add	sp, #16
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b8c:	e055      	b.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f85f 	bl	8004c58 <I2C_IsAcknowledgeFailed>
 8004b9a:	1e03      	subs	r3, r0, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e053      	b.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d129      	bne.n	8004c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d105      	bne.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e03f      	b.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	491d      	ldr	r1, [pc, #116]	; (8004c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004bde:	400a      	ands	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2241      	movs	r2, #65	; 0x41
 8004bec:	2120      	movs	r1, #32
 8004bee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2242      	movs	r2, #66	; 0x42
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2240      	movs	r2, #64	; 0x40
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e022      	b.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c04:	f7ff f9c4 	bl	8003f90 <HAL_GetTick>
 8004c08:	0002      	movs	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	2220      	movs	r2, #32
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2241      	movs	r2, #65	; 0x41
 8004c2a:	2120      	movs	r1, #32
 8004c2c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2240      	movs	r2, #64	; 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e007      	b.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2204      	movs	r2, #4
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d1a2      	bne.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b004      	add	sp, #16
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	fe00e800 	.word	0xfe00e800

08004c58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d151      	bne.n	8004d16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c72:	e021      	b.n	8004cb8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	3301      	adds	r3, #1
 8004c78:	d01e      	beq.n	8004cb8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7ff f989 	bl	8003f90 <HAL_GetTick>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <I2C_IsAcknowledgeFailed+0x38>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d113      	bne.n	8004cb8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	2220      	movs	r2, #32
 8004c96:	431a      	orrs	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2241      	movs	r2, #65	; 0x41
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2242      	movs	r2, #66	; 0x42
 8004ca8:	2100      	movs	r1, #0
 8004caa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e02f      	b.n	8004d18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d1d6      	bne.n	8004c74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2210      	movs	r2, #16
 8004ccc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7ff fe75 	bl	80049c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	490d      	ldr	r1, [pc, #52]	; (8004d20 <I2C_IsAcknowledgeFailed+0xc8>)
 8004cea:	400a      	ands	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2241      	movs	r2, #65	; 0x41
 8004cfe:	2120      	movs	r1, #32
 8004d00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2242      	movs	r2, #66	; 0x42
 8004d06:	2100      	movs	r1, #0
 8004d08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2240      	movs	r2, #64	; 0x40
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b004      	add	sp, #16
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	fe00e800 	.word	0xfe00e800

08004d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	0008      	movs	r0, r1
 8004d2e:	0011      	movs	r1, r2
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	240a      	movs	r4, #10
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	1c02      	adds	r2, r0, #0
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	2009      	movs	r0, #9
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	1c0a      	adds	r2, r1, #0
 8004d40:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	0d51      	lsrs	r1, r2, #21
 8004d4c:	2280      	movs	r2, #128	; 0x80
 8004d4e:	00d2      	lsls	r2, r2, #3
 8004d50:	400a      	ands	r2, r1
 8004d52:	490e      	ldr	r1, [pc, #56]	; (8004d8c <I2C_TransferConfig+0x68>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	43d2      	mvns	r2, r2
 8004d58:	401a      	ands	r2, r3
 8004d5a:	0011      	movs	r1, r2
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	059b      	lsls	r3, r3, #22
 8004d62:	0d9a      	lsrs	r2, r3, #22
 8004d64:	183b      	adds	r3, r7, r0
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	0418      	lsls	r0, r3, #16
 8004d6a:	23ff      	movs	r3, #255	; 0xff
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	4003      	ands	r3, r0
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b005      	add	sp, #20
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	03ff63ff 	.word	0x03ff63ff

08004d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2241      	movs	r2, #65	; 0x41
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d138      	bne.n	8004e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2240      	movs	r2, #64	; 0x40
 8004daa:	5c9b      	ldrb	r3, [r3, r2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e032      	b.n	8004e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2241      	movs	r2, #65	; 0x41
 8004dc0:	2124      	movs	r1, #36	; 0x24
 8004dc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2101      	movs	r1, #1
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4911      	ldr	r1, [pc, #68]	; (8004e24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2101      	movs	r1, #1
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2241      	movs	r2, #65	; 0x41
 8004e08:	2120      	movs	r1, #32
 8004e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b002      	add	sp, #8
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	ffffefff 	.word	0xffffefff

08004e28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2241      	movs	r2, #65	; 0x41
 8004e36:	5c9b      	ldrb	r3, [r3, r2]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d139      	bne.n	8004eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2240      	movs	r2, #64	; 0x40
 8004e42:	5c9b      	ldrb	r3, [r3, r2]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e033      	b.n	8004eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	2101      	movs	r1, #1
 8004e52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2241      	movs	r2, #65	; 0x41
 8004e58:	2124      	movs	r1, #36	; 0x24
 8004e5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2101      	movs	r1, #1
 8004e68:	438a      	bics	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2101      	movs	r1, #1
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2241      	movs	r2, #65	; 0x41
 8004ea2:	2120      	movs	r1, #32
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	fffff0ff 	.word	0xfffff0ff

08004ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f000 fb76 	bl	80055c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	d100      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x20>
 8004ede:	e08e      	b.n	8004ffe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ee0:	4bc5      	ldr	r3, [pc, #788]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	220c      	movs	r2, #12
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d00e      	beq.n	8004f0a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eec:	4bc2      	ldr	r3, [pc, #776]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	220c      	movs	r2, #12
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d117      	bne.n	8004f28 <HAL_RCC_OscConfig+0x68>
 8004ef8:	4bbf      	ldr	r3, [pc, #764]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	23c0      	movs	r3, #192	; 0xc0
 8004efe:	025b      	lsls	r3, r3, #9
 8004f00:	401a      	ands	r2, r3
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	025b      	lsls	r3, r3, #9
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d10e      	bne.n	8004f28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0a:	4bbb      	ldr	r3, [pc, #748]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	4013      	ands	r3, r2
 8004f14:	d100      	bne.n	8004f18 <HAL_RCC_OscConfig+0x58>
 8004f16:	e071      	b.n	8004ffc <HAL_RCC_OscConfig+0x13c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d000      	beq.n	8004f22 <HAL_RCC_OscConfig+0x62>
 8004f20:	e06c      	b.n	8004ffc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 fb4c 	bl	80055c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_OscConfig+0x80>
 8004f30:	4bb1      	ldr	r3, [pc, #708]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4bb0      	ldr	r3, [pc, #704]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	0249      	lsls	r1, r1, #9
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e02f      	b.n	8004fa0 <HAL_RCC_OscConfig+0xe0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10c      	bne.n	8004f62 <HAL_RCC_OscConfig+0xa2>
 8004f48:	4bab      	ldr	r3, [pc, #684]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4baa      	ldr	r3, [pc, #680]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f4e:	49ab      	ldr	r1, [pc, #684]	; (80051fc <HAL_RCC_OscConfig+0x33c>)
 8004f50:	400a      	ands	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	4ba8      	ldr	r3, [pc, #672]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4ba7      	ldr	r3, [pc, #668]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f5a:	49a9      	ldr	r1, [pc, #676]	; (8005200 <HAL_RCC_OscConfig+0x340>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e01e      	b.n	8004fa0 <HAL_RCC_OscConfig+0xe0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10e      	bne.n	8004f88 <HAL_RCC_OscConfig+0xc8>
 8004f6a:	4ba3      	ldr	r3, [pc, #652]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4ba2      	ldr	r3, [pc, #648]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	02c9      	lsls	r1, r1, #11
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	4b9f      	ldr	r3, [pc, #636]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b9e      	ldr	r3, [pc, #632]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	0249      	lsls	r1, r1, #9
 8004f82:	430a      	orrs	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0xe0>
 8004f88:	4b9b      	ldr	r3, [pc, #620]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b9a      	ldr	r3, [pc, #616]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f8e:	499b      	ldr	r1, [pc, #620]	; (80051fc <HAL_RCC_OscConfig+0x33c>)
 8004f90:	400a      	ands	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	4b98      	ldr	r3, [pc, #608]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b97      	ldr	r3, [pc, #604]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f9a:	4999      	ldr	r1, [pc, #612]	; (8005200 <HAL_RCC_OscConfig+0x340>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d014      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fe fff2 	bl	8003f90 <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb2:	f7fe ffed 	bl	8003f90 <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b64      	cmp	r3, #100	; 0x64
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e2fd      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc4:	4b8c      	ldr	r3, [pc, #560]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0xf2>
 8004fd0:	e015      	b.n	8004ffe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd2:	f7fe ffdd 	bl	8003f90 <HAL_GetTick>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fdc:	f7fe ffd8 	bl	8003f90 <HAL_GetTick>
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b64      	cmp	r3, #100	; 0x64
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e2e8      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fee:	4b82      	ldr	r3, [pc, #520]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x11c>
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2202      	movs	r2, #2
 8005004:	4013      	ands	r3, r2
 8005006:	d100      	bne.n	800500a <HAL_RCC_OscConfig+0x14a>
 8005008:	e06c      	b.n	80050e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800500a:	4b7b      	ldr	r3, [pc, #492]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	220c      	movs	r2, #12
 8005010:	4013      	ands	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005014:	4b78      	ldr	r3, [pc, #480]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	220c      	movs	r2, #12
 800501a:	4013      	ands	r3, r2
 800501c:	2b08      	cmp	r3, #8
 800501e:	d11f      	bne.n	8005060 <HAL_RCC_OscConfig+0x1a0>
 8005020:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	23c0      	movs	r3, #192	; 0xc0
 8005026:	025b      	lsls	r3, r3, #9
 8005028:	401a      	ands	r2, r3
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	429a      	cmp	r2, r3
 8005030:	d116      	bne.n	8005060 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005032:	4b71      	ldr	r3, [pc, #452]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2202      	movs	r2, #2
 8005038:	4013      	ands	r3, r2
 800503a:	d005      	beq.n	8005048 <HAL_RCC_OscConfig+0x188>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d001      	beq.n	8005048 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e2bb      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	4b6b      	ldr	r3, [pc, #428]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	22f8      	movs	r2, #248	; 0xf8
 800504e:	4393      	bics	r3, r2
 8005050:	0019      	movs	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	e041      	b.n	80050e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d024      	beq.n	80050b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005068:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800506e:	2101      	movs	r1, #1
 8005070:	430a      	orrs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fe ff8c 	bl	8003f90 <HAL_GetTick>
 8005078:	0003      	movs	r3, r0
 800507a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800507e:	f7fe ff87 	bl	8003f90 <HAL_GetTick>
 8005082:	0002      	movs	r2, r0
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e297      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005090:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2202      	movs	r2, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d0f1      	beq.n	800507e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509a:	4b57      	ldr	r3, [pc, #348]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	22f8      	movs	r2, #248	; 0xf8
 80050a0:	4393      	bics	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	00da      	lsls	r2, r3, #3
 80050aa:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e018      	b.n	80050e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050b2:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050b8:	2101      	movs	r1, #1
 80050ba:	438a      	bics	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050be:	f7fe ff67 	bl	8003f90 <HAL_GetTick>
 80050c2:	0003      	movs	r3, r0
 80050c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c8:	f7fe ff62 	bl	8003f90 <HAL_GetTick>
 80050cc:	0002      	movs	r2, r0
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e272      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050da:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	d1f1      	bne.n	80050c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2208      	movs	r2, #8
 80050ea:	4013      	ands	r3, r2
 80050ec:	d036      	beq.n	800515c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d019      	beq.n	800512a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f6:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050fa:	4b3f      	ldr	r3, [pc, #252]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050fc:	2101      	movs	r1, #1
 80050fe:	430a      	orrs	r2, r1
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005102:	f7fe ff45 	bl	8003f90 <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510c:	f7fe ff40 	bl	8003f90 <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e250      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511e:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2202      	movs	r2, #2
 8005124:	4013      	ands	r3, r2
 8005126:	d0f1      	beq.n	800510c <HAL_RCC_OscConfig+0x24c>
 8005128:	e018      	b.n	800515c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800512c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800512e:	4b32      	ldr	r3, [pc, #200]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005130:	2101      	movs	r1, #1
 8005132:	438a      	bics	r2, r1
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005136:	f7fe ff2b 	bl	8003f90 <HAL_GetTick>
 800513a:	0003      	movs	r3, r0
 800513c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005140:	f7fe ff26 	bl	8003f90 <HAL_GetTick>
 8005144:	0002      	movs	r2, r0
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e236      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2202      	movs	r2, #2
 8005158:	4013      	ands	r3, r2
 800515a:	d1f1      	bne.n	8005140 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2204      	movs	r2, #4
 8005162:	4013      	ands	r3, r2
 8005164:	d100      	bne.n	8005168 <HAL_RCC_OscConfig+0x2a8>
 8005166:	e0b5      	b.n	80052d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005168:	231f      	movs	r3, #31
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	055b      	lsls	r3, r3, #21
 8005178:	4013      	ands	r3, r2
 800517a:	d111      	bne.n	80051a0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517c:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	0549      	lsls	r1, r1, #21
 8005186:	430a      	orrs	r2, r1
 8005188:	61da      	str	r2, [r3, #28]
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	055b      	lsls	r3, r3, #21
 8005192:	4013      	ands	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005198:	231f      	movs	r3, #31
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_RCC_OscConfig+0x344>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4013      	ands	r3, r2
 80051aa:	d11a      	bne.n	80051e2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <HAL_RCC_OscConfig+0x344>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_RCC_OscConfig+0x344>)
 80051b2:	2180      	movs	r1, #128	; 0x80
 80051b4:	0049      	lsls	r1, r1, #1
 80051b6:	430a      	orrs	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ba:	f7fe fee9 	bl	8003f90 <HAL_GetTick>
 80051be:	0003      	movs	r3, r0
 80051c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c4:	f7fe fee4 	bl	8003f90 <HAL_GetTick>
 80051c8:	0002      	movs	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	; 0x64
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e1f4      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_OscConfig+0x344>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4013      	ands	r3, r2
 80051e0:	d0f0      	beq.n	80051c4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10e      	bne.n	8005208 <HAL_RCC_OscConfig+0x348>
 80051ea:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	4b02      	ldr	r3, [pc, #8]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80051f0:	2101      	movs	r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	621a      	str	r2, [r3, #32]
 80051f6:	e035      	b.n	8005264 <HAL_RCC_OscConfig+0x3a4>
 80051f8:	40021000 	.word	0x40021000
 80051fc:	fffeffff 	.word	0xfffeffff
 8005200:	fffbffff 	.word	0xfffbffff
 8005204:	40007000 	.word	0x40007000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10c      	bne.n	800522a <HAL_RCC_OscConfig+0x36a>
 8005210:	4bca      	ldr	r3, [pc, #808]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	4bc9      	ldr	r3, [pc, #804]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005216:	2101      	movs	r1, #1
 8005218:	438a      	bics	r2, r1
 800521a:	621a      	str	r2, [r3, #32]
 800521c:	4bc7      	ldr	r3, [pc, #796]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	4bc6      	ldr	r3, [pc, #792]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005222:	2104      	movs	r1, #4
 8005224:	438a      	bics	r2, r1
 8005226:	621a      	str	r2, [r3, #32]
 8005228:	e01c      	b.n	8005264 <HAL_RCC_OscConfig+0x3a4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x38c>
 8005232:	4bc2      	ldr	r3, [pc, #776]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	4bc1      	ldr	r3, [pc, #772]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005238:	2104      	movs	r1, #4
 800523a:	430a      	orrs	r2, r1
 800523c:	621a      	str	r2, [r3, #32]
 800523e:	4bbf      	ldr	r3, [pc, #764]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	4bbe      	ldr	r3, [pc, #760]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005244:	2101      	movs	r1, #1
 8005246:	430a      	orrs	r2, r1
 8005248:	621a      	str	r2, [r3, #32]
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0x3a4>
 800524c:	4bbb      	ldr	r3, [pc, #748]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800524e:	6a1a      	ldr	r2, [r3, #32]
 8005250:	4bba      	ldr	r3, [pc, #744]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005252:	2101      	movs	r1, #1
 8005254:	438a      	bics	r2, r1
 8005256:	621a      	str	r2, [r3, #32]
 8005258:	4bb8      	ldr	r3, [pc, #736]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	4bb7      	ldr	r3, [pc, #732]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800525e:	2104      	movs	r1, #4
 8005260:	438a      	bics	r2, r1
 8005262:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d014      	beq.n	8005296 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526c:	f7fe fe90 	bl	8003f90 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	e009      	b.n	800528a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fe fe8b 	bl	8003f90 <HAL_GetTick>
 800527a:	0002      	movs	r2, r0
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	4aaf      	ldr	r2, [pc, #700]	; (8005540 <HAL_RCC_OscConfig+0x680>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e19a      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	4bac      	ldr	r3, [pc, #688]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	2202      	movs	r2, #2
 8005290:	4013      	ands	r3, r2
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x3b6>
 8005294:	e013      	b.n	80052be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005296:	f7fe fe7b 	bl	8003f90 <HAL_GetTick>
 800529a:	0003      	movs	r3, r0
 800529c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	e009      	b.n	80052b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fe fe76 	bl	8003f90 <HAL_GetTick>
 80052a4:	0002      	movs	r2, r0
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	4aa5      	ldr	r2, [pc, #660]	; (8005540 <HAL_RCC_OscConfig+0x680>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e185      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b4:	4ba1      	ldr	r3, [pc, #644]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	2202      	movs	r2, #2
 80052ba:	4013      	ands	r3, r2
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052be:	231f      	movs	r3, #31
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c8:	4b9c      	ldr	r3, [pc, #624]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	4b9b      	ldr	r3, [pc, #620]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052ce:	499d      	ldr	r1, [pc, #628]	; (8005544 <HAL_RCC_OscConfig+0x684>)
 80052d0:	400a      	ands	r2, r1
 80052d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2210      	movs	r2, #16
 80052da:	4013      	ands	r3, r2
 80052dc:	d063      	beq.n	80053a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d12a      	bne.n	800533c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052e6:	4b95      	ldr	r3, [pc, #596]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ea:	4b94      	ldr	r3, [pc, #592]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052ec:	2104      	movs	r1, #4
 80052ee:	430a      	orrs	r2, r1
 80052f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80052f2:	4b92      	ldr	r3, [pc, #584]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f6:	4b91      	ldr	r3, [pc, #580]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80052f8:	2101      	movs	r1, #1
 80052fa:	430a      	orrs	r2, r1
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fe:	f7fe fe47 	bl	8003f90 <HAL_GetTick>
 8005302:	0003      	movs	r3, r0
 8005304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005308:	f7fe fe42 	bl	8003f90 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e152      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800531a:	4b88      	ldr	r3, [pc, #544]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	d0f1      	beq.n	8005308 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005324:	4b85      	ldr	r3, [pc, #532]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	22f8      	movs	r2, #248	; 0xf8
 800532a:	4393      	bics	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	00da      	lsls	r2, r3, #3
 8005334:	4b81      	ldr	r3, [pc, #516]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005336:	430a      	orrs	r2, r1
 8005338:	635a      	str	r2, [r3, #52]	; 0x34
 800533a:	e034      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	3305      	adds	r3, #5
 8005342:	d111      	bne.n	8005368 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005344:	4b7d      	ldr	r3, [pc, #500]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005348:	4b7c      	ldr	r3, [pc, #496]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800534a:	2104      	movs	r1, #4
 800534c:	438a      	bics	r2, r1
 800534e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005350:	4b7a      	ldr	r3, [pc, #488]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	22f8      	movs	r2, #248	; 0xf8
 8005356:	4393      	bics	r3, r2
 8005358:	0019      	movs	r1, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	00da      	lsls	r2, r3, #3
 8005360:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005362:	430a      	orrs	r2, r1
 8005364:	635a      	str	r2, [r3, #52]	; 0x34
 8005366:	e01e      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005368:	4b74      	ldr	r3, [pc, #464]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800536a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536c:	4b73      	ldr	r3, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800536e:	2104      	movs	r1, #4
 8005370:	430a      	orrs	r2, r1
 8005372:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005374:	4b71      	ldr	r3, [pc, #452]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005378:	4b70      	ldr	r3, [pc, #448]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800537a:	2101      	movs	r1, #1
 800537c:	438a      	bics	r2, r1
 800537e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005380:	f7fe fe06 	bl	8003f90 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800538a:	f7fe fe01 	bl	8003f90 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e111      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800539c:	4b67      	ldr	r3, [pc, #412]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a0:	2202      	movs	r2, #2
 80053a2:	4013      	ands	r3, r2
 80053a4:	d1f1      	bne.n	800538a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2220      	movs	r2, #32
 80053ac:	4013      	ands	r3, r2
 80053ae:	d05c      	beq.n	800546a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80053b0:	4b62      	ldr	r3, [pc, #392]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	220c      	movs	r2, #12
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d00e      	beq.n	80053da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80053bc:	4b5f      	ldr	r3, [pc, #380]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	220c      	movs	r2, #12
 80053c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d114      	bne.n	80053f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80053c8:	4b5c      	ldr	r3, [pc, #368]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	23c0      	movs	r3, #192	; 0xc0
 80053ce:	025b      	lsls	r3, r3, #9
 80053d0:	401a      	ands	r2, r3
 80053d2:	23c0      	movs	r3, #192	; 0xc0
 80053d4:	025b      	lsls	r3, r3, #9
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10b      	bne.n	80053f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80053da:	4b58      	ldr	r3, [pc, #352]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80053dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	025b      	lsls	r3, r3, #9
 80053e2:	4013      	ands	r3, r2
 80053e4:	d040      	beq.n	8005468 <HAL_RCC_OscConfig+0x5a8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d03c      	beq.n	8005468 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0e6      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80053fa:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80053fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fe:	4b4f      	ldr	r3, [pc, #316]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	0249      	lsls	r1, r1, #9
 8005404:	430a      	orrs	r2, r1
 8005406:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fe fdc2 	bl	8003f90 <HAL_GetTick>
 800540c:	0003      	movs	r3, r0
 800540e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005412:	f7fe fdbd 	bl	8003f90 <HAL_GetTick>
 8005416:	0002      	movs	r2, r0
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0cd      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005424:	4b45      	ldr	r3, [pc, #276]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	025b      	lsls	r3, r3, #9
 800542c:	4013      	ands	r3, r2
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x552>
 8005430:	e01b      	b.n	800546a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005432:	4b42      	ldr	r3, [pc, #264]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005438:	4943      	ldr	r1, [pc, #268]	; (8005548 <HAL_RCC_OscConfig+0x688>)
 800543a:	400a      	ands	r2, r1
 800543c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fe fda7 	bl	8003f90 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005448:	f7fe fda2 	bl	8003f90 <HAL_GetTick>
 800544c:	0002      	movs	r2, r0
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0b2      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800545c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	025b      	lsls	r3, r3, #9
 8005462:	4013      	ands	r3, r2
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x588>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005468:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d100      	bne.n	8005474 <HAL_RCC_OscConfig+0x5b4>
 8005472:	e0a4      	b.n	80055be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005474:	4b31      	ldr	r3, [pc, #196]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	220c      	movs	r2, #12
 800547a:	4013      	ands	r3, r2
 800547c:	2b08      	cmp	r3, #8
 800547e:	d100      	bne.n	8005482 <HAL_RCC_OscConfig+0x5c2>
 8005480:	e078      	b.n	8005574 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b02      	cmp	r3, #2
 8005488:	d14c      	bne.n	8005524 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b2c      	ldr	r3, [pc, #176]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005490:	492e      	ldr	r1, [pc, #184]	; (800554c <HAL_RCC_OscConfig+0x68c>)
 8005492:	400a      	ands	r2, r1
 8005494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fe fd7b 	bl	8003f90 <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fe fd76 	bl	8003f90 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e086      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b2:	4b22      	ldr	r3, [pc, #136]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	049b      	lsls	r3, r3, #18
 80054ba:	4013      	ands	r3, r2
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	220f      	movs	r2, #15
 80054c4:	4393      	bics	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054cc:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054ce:	430a      	orrs	r2, r1
 80054d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <HAL_RCC_OscConfig+0x690>)
 80054d8:	4013      	ands	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	431a      	orrs	r2, r3
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	0449      	lsls	r1, r1, #17
 80054f6:	430a      	orrs	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fe fd49 	bl	8003f90 <HAL_GetTick>
 80054fe:	0003      	movs	r3, r0
 8005500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005504:	f7fe fd44 	bl	8003f90 <HAL_GetTick>
 8005508:	0002      	movs	r2, r0
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e054      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	049b      	lsls	r3, r3, #18
 800551e:	4013      	ands	r3, r2
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x644>
 8005522:	e04c      	b.n	80055be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800552a:	4908      	ldr	r1, [pc, #32]	; (800554c <HAL_RCC_OscConfig+0x68c>)
 800552c:	400a      	ands	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fe fd2e 	bl	8003f90 <HAL_GetTick>
 8005534:	0003      	movs	r3, r0
 8005536:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005538:	e015      	b.n	8005566 <HAL_RCC_OscConfig+0x6a6>
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	40021000 	.word	0x40021000
 8005540:	00001388 	.word	0x00001388
 8005544:	efffffff 	.word	0xefffffff
 8005548:	fffeffff 	.word	0xfffeffff
 800554c:	feffffff 	.word	0xfeffffff
 8005550:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005554:	f7fe fd1c 	bl	8003f90 <HAL_GetTick>
 8005558:	0002      	movs	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e02c      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCC_OscConfig+0x708>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	049b      	lsls	r3, r3, #18
 800556e:	4013      	ands	r3, r2
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x694>
 8005572:	e024      	b.n	80055be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e01f      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_RCC_OscConfig+0x708>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_RCC_OscConfig+0x708>)
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	23c0      	movs	r3, #192	; 0xc0
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	401a      	ands	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	429a      	cmp	r2, r3
 800559a:	d10e      	bne.n	80055ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	220f      	movs	r2, #15
 80055a0:	401a      	ands	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	23f0      	movs	r3, #240	; 0xf0
 80055ae:	039b      	lsls	r3, r3, #14
 80055b0:	401a      	ands	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b008      	add	sp, #32
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000

080055cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0bf      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e0:	4b61      	ldr	r3, [pc, #388]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	4013      	ands	r3, r2
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d911      	bls.n	8005612 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b5e      	ldr	r3, [pc, #376]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2201      	movs	r2, #1
 80055f4:	4393      	bics	r3, r2
 80055f6:	0019      	movs	r1, r3
 80055f8:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	4013      	ands	r3, r2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d001      	beq.n	8005612 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e0a6      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2202      	movs	r2, #2
 8005618:	4013      	ands	r3, r2
 800561a:	d015      	beq.n	8005648 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	4013      	ands	r3, r2
 8005624:	d006      	beq.n	8005634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005626:	4b51      	ldr	r3, [pc, #324]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 800562c:	21e0      	movs	r1, #224	; 0xe0
 800562e:	00c9      	lsls	r1, r1, #3
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b4d      	ldr	r3, [pc, #308]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	22f0      	movs	r2, #240	; 0xf0
 800563a:	4393      	bics	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	4b4a      	ldr	r3, [pc, #296]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	4013      	ands	r3, r2
 8005650:	d04c      	beq.n	80056ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	4b44      	ldr	r3, [pc, #272]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	4013      	ands	r3, r2
 8005664:	d120      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e07a      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	4b3e      	ldr	r3, [pc, #248]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	049b      	lsls	r3, r3, #18
 800567a:	4013      	ands	r3, r2
 800567c:	d114      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e06e      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800568a:	4b38      	ldr	r3, [pc, #224]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	025b      	lsls	r3, r3, #9
 8005692:	4013      	ands	r3, r2
 8005694:	d108      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e062      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569a:	4b34      	ldr	r3, [pc, #208]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2202      	movs	r2, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e05b      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a8:	4b30      	ldr	r3, [pc, #192]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2203      	movs	r2, #3
 80056ae:	4393      	bics	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b2d      	ldr	r3, [pc, #180]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056bc:	f7fe fc68 	bl	8003f90 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c4:	e009      	b.n	80056da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c6:	f7fe fc63 	bl	8003f90 <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	4a27      	ldr	r2, [pc, #156]	; (8005770 <HAL_RCC_ClockConfig+0x1a4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e042      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b24      	ldr	r3, [pc, #144]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	220c      	movs	r2, #12
 80056e0:	401a      	ands	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1ec      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ec:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2201      	movs	r2, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d211      	bcs.n	800571e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fa:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2201      	movs	r2, #1
 8005700:	4393      	bics	r3, r2
 8005702:	0019      	movs	r1, r3
 8005704:	4b18      	ldr	r3, [pc, #96]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <HAL_RCC_ClockConfig+0x19c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	4013      	ands	r3, r2
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e020      	b.n	8005760 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2204      	movs	r2, #4
 8005724:	4013      	ands	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005728:	4b10      	ldr	r3, [pc, #64]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a11      	ldr	r2, [pc, #68]	; (8005774 <HAL_RCC_ClockConfig+0x1a8>)
 800572e:	4013      	ands	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800573c:	f000 f820 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005740:	0001      	movs	r1, r0
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <HAL_RCC_ClockConfig+0x1a0>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	220f      	movs	r2, #15
 800574a:	4013      	ands	r3, r2
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x1ac>)
 800574e:	5cd3      	ldrb	r3, [r2, r3]
 8005750:	000a      	movs	r2, r1
 8005752:	40da      	lsrs	r2, r3
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_ClockConfig+0x1b0>)
 8005756:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005758:	2000      	movs	r0, #0
 800575a:	f7fe fbd3 	bl	8003f04 <HAL_InitTick>
  
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	b004      	add	sp, #16
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40022000 	.word	0x40022000
 800576c:	40021000 	.word	0x40021000
 8005770:	00001388 	.word	0x00001388
 8005774:	fffff8ff 	.word	0xfffff8ff
 8005778:	0800627c 	.word	0x0800627c
 800577c:	20000000 	.word	0x20000000

08005780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b08f      	sub	sp, #60	; 0x3c
 8005784:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005786:	2314      	movs	r3, #20
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	4a37      	ldr	r2, [pc, #220]	; (8005868 <HAL_RCC_GetSysClockFreq+0xe8>)
 800578c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800578e:	c313      	stmia	r3!, {r0, r1, r4}
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	4a35      	ldr	r2, [pc, #212]	; (800586c <HAL_RCC_GetSysClockFreq+0xec>)
 8005798:	ca13      	ldmia	r2!, {r0, r1, r4}
 800579a:	c313      	stmia	r3!, {r0, r1, r4}
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a4:	2300      	movs	r3, #0
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a8:	2300      	movs	r3, #0
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
 80057ac:	2300      	movs	r3, #0
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80057b4:	4b2e      	ldr	r3, [pc, #184]	; (8005870 <HAL_RCC_GetSysClockFreq+0xf0>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	220c      	movs	r2, #12
 80057be:	4013      	ands	r3, r2
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d006      	beq.n	80057d2 <HAL_RCC_GetSysClockFreq+0x52>
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d043      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0xd0>
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d144      	bne.n	8005856 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057cc:	4b29      	ldr	r3, [pc, #164]	; (8005874 <HAL_RCC_GetSysClockFreq+0xf4>)
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057d0:	e044      	b.n	800585c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	0c9b      	lsrs	r3, r3, #18
 80057d6:	220f      	movs	r2, #15
 80057d8:	4013      	ands	r3, r2
 80057da:	2214      	movs	r2, #20
 80057dc:	18ba      	adds	r2, r7, r2
 80057de:	5cd3      	ldrb	r3, [r2, r3]
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80057e2:	4b23      	ldr	r3, [pc, #140]	; (8005870 <HAL_RCC_GetSysClockFreq+0xf0>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	220f      	movs	r2, #15
 80057e8:	4013      	ands	r3, r2
 80057ea:	1d3a      	adds	r2, r7, #4
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80057f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f2:	23c0      	movs	r3, #192	; 0xc0
 80057f4:	025b      	lsls	r3, r3, #9
 80057f6:	401a      	ands	r2, r3
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	025b      	lsls	r3, r3, #9
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005802:	481c      	ldr	r0, [pc, #112]	; (8005874 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005804:	f7fa fc80 	bl	8000108 <__udivsi3>
 8005808:	0003      	movs	r3, r0
 800580a:	001a      	movs	r2, r3
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	4353      	muls	r3, r2
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
 8005812:	e01a      	b.n	800584a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005816:	23c0      	movs	r3, #192	; 0xc0
 8005818:	025b      	lsls	r3, r3, #9
 800581a:	401a      	ands	r2, r3
 800581c:	23c0      	movs	r3, #192	; 0xc0
 800581e:	025b      	lsls	r3, r3, #9
 8005820:	429a      	cmp	r2, r3
 8005822:	d109      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005826:	4814      	ldr	r0, [pc, #80]	; (8005878 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005828:	f7fa fc6e 	bl	8000108 <__udivsi3>
 800582c:	0003      	movs	r3, r0
 800582e:	001a      	movs	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	4353      	muls	r3, r2
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	e008      	b.n	800584a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800583a:	480e      	ldr	r0, [pc, #56]	; (8005874 <HAL_RCC_GetSysClockFreq+0xf4>)
 800583c:	f7fa fc64 	bl	8000108 <__udivsi3>
 8005840:	0003      	movs	r3, r0
 8005842:	001a      	movs	r2, r3
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	4353      	muls	r3, r2
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800584e:	e005      	b.n	800585c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005852:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005854:	e002      	b.n	800585c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800585a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800585e:	0018      	movs	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	b00f      	add	sp, #60	; 0x3c
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	080061dc 	.word	0x080061dc
 800586c:	080061ec 	.word	0x080061ec
 8005870:	40021000 	.word	0x40021000
 8005874:	007a1200 	.word	0x007a1200
 8005878:	02dc6c00 	.word	0x02dc6c00

0800587c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <HAL_RCC_GetHCLKFreq+0x10>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	0018      	movs	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	20000000 	.word	0x20000000

08005890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005894:	f7ff fff2 	bl	800587c <HAL_RCC_GetHCLKFreq>
 8005898:	0001      	movs	r1, r0
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	2207      	movs	r2, #7
 80058a2:	4013      	ands	r3, r2
 80058a4:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058a6:	5cd3      	ldrb	r3, [r2, r3]
 80058a8:	40d9      	lsrs	r1, r3
 80058aa:	000b      	movs	r3, r1
}    
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	40021000 	.word	0x40021000
 80058b8:	0800628c 	.word	0x0800628c

080058bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	025b      	lsls	r3, r3, #9
 80058d4:	4013      	ands	r3, r2
 80058d6:	d100      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80058d8:	e08f      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80058da:	2317      	movs	r3, #23
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e2:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	055b      	lsls	r3, r3, #21
 80058ea:	4013      	ands	r3, r2
 80058ec:	d111      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058ee:	4b6c      	ldr	r3, [pc, #432]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80058f0:	69da      	ldr	r2, [r3, #28]
 80058f2:	4b6b      	ldr	r3, [pc, #428]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80058f4:	2180      	movs	r1, #128	; 0x80
 80058f6:	0549      	lsls	r1, r1, #21
 80058f8:	430a      	orrs	r2, r1
 80058fa:	61da      	str	r2, [r3, #28]
 80058fc:	4b68      	ldr	r3, [pc, #416]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	055b      	lsls	r3, r3, #21
 8005904:	4013      	ands	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800590a:	2317      	movs	r3, #23
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005912:	4b64      	ldr	r3, [pc, #400]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4013      	ands	r3, r2
 800591c:	d11a      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800591e:	4b61      	ldr	r3, [pc, #388]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b60      	ldr	r3, [pc, #384]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	0049      	lsls	r1, r1, #1
 8005928:	430a      	orrs	r2, r1
 800592a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800592c:	f7fe fb30 	bl	8003f90 <HAL_GetTick>
 8005930:	0003      	movs	r3, r0
 8005932:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005934:	e008      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005936:	f7fe fb2b 	bl	8003f90 <HAL_GetTick>
 800593a:	0002      	movs	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b64      	cmp	r3, #100	; 0x64
 8005942:	d901      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0a6      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005948:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4013      	ands	r3, r2
 8005952:	d0f0      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005954:	4b52      	ldr	r3, [pc, #328]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	23c0      	movs	r3, #192	; 0xc0
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4013      	ands	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d034      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	23c0      	movs	r3, #192	; 0xc0
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4013      	ands	r3, r2
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	429a      	cmp	r2, r3
 8005974:	d02c      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	4a4b      	ldr	r2, [pc, #300]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005980:	4b47      	ldr	r3, [pc, #284]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	0249      	lsls	r1, r1, #9
 800598a:	430a      	orrs	r2, r1
 800598c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598e:	4b44      	ldr	r3, [pc, #272]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005994:	4945      	ldr	r1, [pc, #276]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005996:	400a      	ands	r2, r1
 8005998:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800599a:	4b41      	ldr	r3, [pc, #260]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	4013      	ands	r3, r2
 80059a6:	d013      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fe faf2 	bl	8003f90 <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b0:	e009      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fe faed 	bl	8003f90 <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	4a3c      	ldr	r2, [pc, #240]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e067      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c6:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	2202      	movs	r2, #2
 80059cc:	4013      	ands	r3, r2
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d0:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	0019      	movs	r1, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059e0:	430a      	orrs	r2, r1
 80059e2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059e4:	2317      	movs	r3, #23
 80059e6:	18fb      	adds	r3, r7, r3
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80059f4:	492f      	ldr	r1, [pc, #188]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059f6:	400a      	ands	r2, r1
 80059f8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a04:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	2203      	movs	r2, #3
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a22:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	4a24      	ldr	r2, [pc, #144]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a32:	430a      	orrs	r2, r1
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	2210      	movs	r2, #16
 8005a46:	4393      	bics	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	4393      	bics	r3, r2
 8005a68:	0019      	movs	r1, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a70:	430a      	orrs	r2, r1
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d009      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	2240      	movs	r2, #64	; 0x40
 8005a86:	4393      	bics	r3, r2
 8005a88:	0019      	movs	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695a      	ldr	r2, [r3, #20]
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a90:	430a      	orrs	r2, r1
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	0018      	movs	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b006      	add	sp, #24
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	fffffcff 	.word	0xfffffcff
 8005aac:	fffeffff 	.word	0xfffeffff
 8005ab0:	00001388 	.word	0x00001388
 8005ab4:	efffffff 	.word	0xefffffff
 8005ab8:	fffcffff 	.word	0xfffcffff

08005abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e044      	b.n	8005b58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2274      	movs	r2, #116	; 0x74
 8005ada:	2100      	movs	r1, #0
 8005adc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7fe f969 	bl	8003db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2224      	movs	r2, #36	; 0x24
 8005aea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2101      	movs	r1, #1
 8005af8:	438a      	bics	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f000 f830 	bl	8005b64 <UART_SetConfig>
 8005b04:	0003      	movs	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e024      	b.n	8005b58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 f9a7 	bl	8005e6c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	490d      	ldr	r1, [pc, #52]	; (8005b60 <HAL_UART_Init+0xa4>)
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	212a      	movs	r1, #42	; 0x2a
 8005b3a:	438a      	bics	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 fa3f 	bl	8005fd4 <UART_CheckIdleState>
 8005b56:	0003      	movs	r3, r0
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	ffffb7ff 	.word	0xffffb7ff

08005b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b6c:	231e      	movs	r3, #30
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4aac      	ldr	r2, [pc, #688]	; (8005e44 <UART_SetConfig+0x2e0>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4aa7      	ldr	r2, [pc, #668]	; (8005e48 <UART_SetConfig+0x2e4>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4a9e      	ldr	r2, [pc, #632]	; (8005e4c <UART_SetConfig+0x2e8>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	0019      	movs	r1, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a9a      	ldr	r2, [pc, #616]	; (8005e50 <UART_SetConfig+0x2ec>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d125      	bne.n	8005c36 <UART_SetConfig+0xd2>
 8005bea:	4b9a      	ldr	r3, [pc, #616]	; (8005e54 <UART_SetConfig+0x2f0>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	2203      	movs	r2, #3
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d00f      	beq.n	8005c16 <UART_SetConfig+0xb2>
 8005bf6:	d304      	bcc.n	8005c02 <UART_SetConfig+0x9e>
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d011      	beq.n	8005c20 <UART_SetConfig+0xbc>
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d005      	beq.n	8005c0c <UART_SetConfig+0xa8>
 8005c00:	e013      	b.n	8005c2a <UART_SetConfig+0xc6>
 8005c02:	231f      	movs	r3, #31
 8005c04:	18fb      	adds	r3, r7, r3
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e064      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c0c:	231f      	movs	r3, #31
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	2202      	movs	r2, #2
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	e05f      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c16:	231f      	movs	r3, #31
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e05a      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c20:	231f      	movs	r3, #31
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	2208      	movs	r2, #8
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e055      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c2a:	231f      	movs	r3, #31
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	2210      	movs	r2, #16
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	e04f      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a87      	ldr	r2, [pc, #540]	; (8005e58 <UART_SetConfig+0x2f4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d132      	bne.n	8005ca6 <UART_SetConfig+0x142>
 8005c40:	4b84      	ldr	r3, [pc, #528]	; (8005e54 <UART_SetConfig+0x2f0>)
 8005c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c44:	23c0      	movs	r3, #192	; 0xc0
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	0252      	lsls	r2, r2, #9
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d019      	beq.n	8005c86 <UART_SetConfig+0x122>
 8005c52:	2280      	movs	r2, #128	; 0x80
 8005c54:	0252      	lsls	r2, r2, #9
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d802      	bhi.n	8005c60 <UART_SetConfig+0xfc>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <UART_SetConfig+0x10e>
 8005c5e:	e01c      	b.n	8005c9a <UART_SetConfig+0x136>
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	0292      	lsls	r2, r2, #10
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <UART_SetConfig+0x12c>
 8005c68:	22c0      	movs	r2, #192	; 0xc0
 8005c6a:	0292      	lsls	r2, r2, #10
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d005      	beq.n	8005c7c <UART_SetConfig+0x118>
 8005c70:	e013      	b.n	8005c9a <UART_SetConfig+0x136>
 8005c72:	231f      	movs	r3, #31
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e02c      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c7c:	231f      	movs	r3, #31
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2202      	movs	r2, #2
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e027      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c86:	231f      	movs	r3, #31
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e022      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c90:	231f      	movs	r3, #31
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	2208      	movs	r2, #8
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	e01d      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005c9a:	231f      	movs	r3, #31
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	e017      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a6c      	ldr	r2, [pc, #432]	; (8005e5c <UART_SetConfig+0x2f8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d104      	bne.n	8005cba <UART_SetConfig+0x156>
 8005cb0:	231f      	movs	r3, #31
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	e00d      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a68      	ldr	r2, [pc, #416]	; (8005e60 <UART_SetConfig+0x2fc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d104      	bne.n	8005cce <UART_SetConfig+0x16a>
 8005cc4:	231f      	movs	r3, #31
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	e003      	b.n	8005cd6 <UART_SetConfig+0x172>
 8005cce:	231f      	movs	r3, #31
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d15c      	bne.n	8005d9c <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8005ce2:	231f      	movs	r3, #31
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d00d      	beq.n	8005d08 <UART_SetConfig+0x1a4>
 8005cec:	dc02      	bgt.n	8005cf4 <UART_SetConfig+0x190>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <UART_SetConfig+0x19a>
 8005cf2:	e015      	b.n	8005d20 <UART_SetConfig+0x1bc>
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d00a      	beq.n	8005d0e <UART_SetConfig+0x1aa>
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d00d      	beq.n	8005d18 <UART_SetConfig+0x1b4>
 8005cfc:	e010      	b.n	8005d20 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfe:	f7ff fdc7 	bl	8005890 <HAL_RCC_GetPCLK1Freq>
 8005d02:	0003      	movs	r3, r0
 8005d04:	61bb      	str	r3, [r7, #24]
        break;
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d08:	4b56      	ldr	r3, [pc, #344]	; (8005e64 <UART_SetConfig+0x300>)
 8005d0a:	61bb      	str	r3, [r7, #24]
        break;
 8005d0c:	e00f      	b.n	8005d2e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0e:	f7ff fd37 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005d12:	0003      	movs	r3, r0
 8005d14:	61bb      	str	r3, [r7, #24]
        break;
 8005d16:	e00a      	b.n	8005d2e <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d18:	2380      	movs	r3, #128	; 0x80
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	61bb      	str	r3, [r7, #24]
        break;
 8005d1e:	e006      	b.n	8005d2e <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d24:	231e      	movs	r3, #30
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
        break;
 8005d2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d100      	bne.n	8005d36 <UART_SetConfig+0x1d2>
 8005d34:	e079      	b.n	8005e2a <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	005a      	lsls	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	18d2      	adds	r2, r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	0019      	movs	r1, r3
 8005d48:	0010      	movs	r0, r2
 8005d4a:	f7fa f9dd 	bl	8000108 <__udivsi3>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	d91b      	bls.n	8005d92 <UART_SetConfig+0x22e>
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4a42      	ldr	r2, [pc, #264]	; (8005e68 <UART_SetConfig+0x304>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d817      	bhi.n	8005d92 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	200e      	movs	r0, #14
 8005d68:	183b      	adds	r3, r7, r0
 8005d6a:	210f      	movs	r1, #15
 8005d6c:	438a      	bics	r2, r1
 8005d6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2207      	movs	r2, #7
 8005d78:	4013      	ands	r3, r2
 8005d7a:	b299      	uxth	r1, r3
 8005d7c:	183b      	adds	r3, r7, r0
 8005d7e:	183a      	adds	r2, r7, r0
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	183a      	adds	r2, r7, r0
 8005d8c:	8812      	ldrh	r2, [r2, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	e04b      	b.n	8005e2a <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8005d92:	231e      	movs	r3, #30
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e046      	b.n	8005e2a <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d9c:	231f      	movs	r3, #31
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d00d      	beq.n	8005dc2 <UART_SetConfig+0x25e>
 8005da6:	dc02      	bgt.n	8005dae <UART_SetConfig+0x24a>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0x254>
 8005dac:	e015      	b.n	8005dda <UART_SetConfig+0x276>
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d00a      	beq.n	8005dc8 <UART_SetConfig+0x264>
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d00d      	beq.n	8005dd2 <UART_SetConfig+0x26e>
 8005db6:	e010      	b.n	8005dda <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db8:	f7ff fd6a 	bl	8005890 <HAL_RCC_GetPCLK1Freq>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	61bb      	str	r3, [r7, #24]
        break;
 8005dc0:	e012      	b.n	8005de8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc2:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <UART_SetConfig+0x300>)
 8005dc4:	61bb      	str	r3, [r7, #24]
        break;
 8005dc6:	e00f      	b.n	8005de8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc8:	f7ff fcda 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	61bb      	str	r3, [r7, #24]
        break;
 8005dd0:	e00a      	b.n	8005de8 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	61bb      	str	r3, [r7, #24]
        break;
 8005dd8:	e006      	b.n	8005de8 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dde:	231e      	movs	r3, #30
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
        break;
 8005de6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01d      	beq.n	8005e2a <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085a      	lsrs	r2, r3, #1
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	18d2      	adds	r2, r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	0010      	movs	r0, r2
 8005e00:	f7fa f982 	bl	8000108 <__udivsi3>
 8005e04:	0003      	movs	r3, r0
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b0f      	cmp	r3, #15
 8005e0e:	d908      	bls.n	8005e22 <UART_SetConfig+0x2be>
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <UART_SetConfig+0x304>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d804      	bhi.n	8005e22 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	e003      	b.n	8005e2a <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8005e22:	231e      	movs	r3, #30
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e36:	231e      	movs	r3, #30
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	781b      	ldrb	r3, [r3, #0]
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b008      	add	sp, #32
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	efff69f3 	.word	0xefff69f3
 8005e48:	ffffcfff 	.word	0xffffcfff
 8005e4c:	fffff4ff 	.word	0xfffff4ff
 8005e50:	40013800 	.word	0x40013800
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40004400 	.word	0x40004400
 8005e5c:	40004800 	.word	0x40004800
 8005e60:	40004c00 	.word	0x40004c00
 8005e64:	007a1200 	.word	0x007a1200
 8005e68:	0000ffff 	.word	0x0000ffff

08005e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d00b      	beq.n	8005e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a4a      	ldr	r2, [pc, #296]	; (8005fb0 <UART_AdvFeatureConfig+0x144>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	0019      	movs	r1, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4a43      	ldr	r2, [pc, #268]	; (8005fb4 <UART_AdvFeatureConfig+0x148>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a3b      	ldr	r2, [pc, #236]	; (8005fb8 <UART_AdvFeatureConfig+0x14c>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	0019      	movs	r1, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2208      	movs	r2, #8
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4a34      	ldr	r2, [pc, #208]	; (8005fbc <UART_AdvFeatureConfig+0x150>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	0019      	movs	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2210      	movs	r2, #16
 8005f02:	4013      	ands	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a2c      	ldr	r2, [pc, #176]	; (8005fc0 <UART_AdvFeatureConfig+0x154>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2220      	movs	r2, #32
 8005f24:	4013      	ands	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <UART_AdvFeatureConfig+0x158>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	0019      	movs	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2240      	movs	r2, #64	; 0x40
 8005f46:	4013      	ands	r3, r2
 8005f48:	d01d      	beq.n	8005f86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <UART_AdvFeatureConfig+0x15c>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	0019      	movs	r1, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	035b      	lsls	r3, r3, #13
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d10b      	bne.n	8005f86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <UART_AdvFeatureConfig+0x160>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <UART_AdvFeatureConfig+0x164>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	fffdffff 	.word	0xfffdffff
 8005fb4:	fffeffff 	.word	0xfffeffff
 8005fb8:	fffbffff 	.word	0xfffbffff
 8005fbc:	ffff7fff 	.word	0xffff7fff
 8005fc0:	ffffefff 	.word	0xffffefff
 8005fc4:	ffffdfff 	.word	0xffffdfff
 8005fc8:	ffefffff 	.word	0xffefffff
 8005fcc:	ff9fffff 	.word	0xff9fffff
 8005fd0:	fff7ffff 	.word	0xfff7ffff

08005fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe4:	f7fd ffd4 	bl	8003f90 <HAL_GetTick>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d10d      	bne.n	8006016 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	2380      	movs	r3, #128	; 0x80
 8005ffe:	0399      	lsls	r1, r3, #14
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4b18      	ldr	r3, [pc, #96]	; (8006064 <UART_CheckIdleState+0x90>)
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	0013      	movs	r3, r2
 8006008:	2200      	movs	r2, #0
 800600a:	f000 f82d 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d001      	beq.n	8006016 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e022      	b.n	800605c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2204      	movs	r2, #4
 800601e:	4013      	ands	r3, r2
 8006020:	2b04      	cmp	r3, #4
 8006022:	d10d      	bne.n	8006040 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	03d9      	lsls	r1, r3, #15
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <UART_CheckIdleState+0x90>)
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	0013      	movs	r3, r2
 8006032:	2200      	movs	r2, #0
 8006034:	f000 f818 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8006038:	1e03      	subs	r3, r0, #0
 800603a:	d001      	beq.n	8006040 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e00d      	b.n	800605c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2274      	movs	r2, #116	; 0x74
 8006056:	2100      	movs	r1, #0
 8006058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	b004      	add	sp, #16
 8006062:	bd80      	pop	{r7, pc}
 8006064:	01ffffff 	.word	0x01ffffff

08006068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	1dfb      	adds	r3, r7, #7
 8006076:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006078:	e05e      	b.n	8006138 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	3301      	adds	r3, #1
 800607e:	d05b      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006080:	f7fd ff86 	bl	8003f90 <HAL_GetTick>
 8006084:	0002      	movs	r2, r0
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d11b      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	492f      	ldr	r1, [pc, #188]	; (8006160 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80060a2:	400a      	ands	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2101      	movs	r1, #1
 80060b2:	438a      	bics	r2, r1
 80060b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2274      	movs	r2, #116	; 0x74
 80060c6:	2100      	movs	r1, #0
 80060c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e044      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2204      	movs	r2, #4
 80060d6:	4013      	ands	r3, r2
 80060d8:	d02e      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	401a      	ands	r2, r3
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d124      	bne.n	8006138 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2280      	movs	r2, #128	; 0x80
 80060f4:	0112      	lsls	r2, r2, #4
 80060f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4917      	ldr	r1, [pc, #92]	; (8006160 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006104:	400a      	ands	r2, r1
 8006106:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2101      	movs	r1, #1
 8006114:	438a      	bics	r2, r1
 8006116:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	2120      	movs	r1, #32
 800612a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2274      	movs	r2, #116	; 0x74
 8006130:	2100      	movs	r1, #0
 8006132:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e00f      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	4013      	ands	r3, r2
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	425a      	negs	r2, r3
 8006148:	4153      	adcs	r3, r2
 800614a:	b2db      	uxtb	r3, r3
 800614c:	001a      	movs	r2, r3
 800614e:	1dfb      	adds	r3, r7, #7
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d091      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	0018      	movs	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	b004      	add	sp, #16
 800615e:	bd80      	pop	{r7, pc}
 8006160:	fffffe5f 	.word	0xfffffe5f

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	2600      	movs	r6, #0
 8006168:	4d0c      	ldr	r5, [pc, #48]	; (800619c <__libc_init_array+0x38>)
 800616a:	4c0d      	ldr	r4, [pc, #52]	; (80061a0 <__libc_init_array+0x3c>)
 800616c:	1b64      	subs	r4, r4, r5
 800616e:	10a4      	asrs	r4, r4, #2
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	2600      	movs	r6, #0
 8006176:	f000 f821 	bl	80061bc <_init>
 800617a:	4d0a      	ldr	r5, [pc, #40]	; (80061a4 <__libc_init_array+0x40>)
 800617c:	4c0a      	ldr	r4, [pc, #40]	; (80061a8 <__libc_init_array+0x44>)
 800617e:	1b64      	subs	r4, r4, r5
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	00b3      	lsls	r3, r6, #2
 800618a:	58eb      	ldr	r3, [r5, r3]
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	00b3      	lsls	r3, r6, #2
 8006194:	58eb      	ldr	r3, [r5, r3]
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	08006294 	.word	0x08006294
 80061a0:	08006294 	.word	0x08006294
 80061a4:	08006294 	.word	0x08006294
 80061a8:	08006298 	.word	0x08006298

080061ac <memset>:
 80061ac:	0003      	movs	r3, r0
 80061ae:	1812      	adds	r2, r2, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	7019      	strb	r1, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
