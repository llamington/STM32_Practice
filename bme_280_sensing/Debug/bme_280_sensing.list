
bme_280_sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08008360  08008360  00018360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008690  08008690  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008698  08008698  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  080086a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000290  08008930  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08008930  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb38  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ed9  00000000  00000000  0002cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  0002ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a093  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000adb8  00000000  00000000  0004a3cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093c9b  00000000  00000000  00055183  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8e1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000339c  00000000  00000000  000e8e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000290 	.word	0x20000290
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008344 	.word	0x08008344

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000294 	.word	0x20000294
 8000104:	08008344 	.word	0x08008344

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff5b 	bl	80012e4 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 feb3 	bl	80011a4 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff4d 	bl	80012e4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff43 	bl	80012e4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fed5 	bl	800121c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fecb 	bl	800121c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_ldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d115      	bne.n	80004c4 <__aeabi_ldivmod+0x30>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d113      	bne.n	80004c4 <__aeabi_ldivmod+0x30>
 800049c:	2900      	cmp	r1, #0
 800049e:	db06      	blt.n	80004ae <__aeabi_ldivmod+0x1a>
 80004a0:	dc01      	bgt.n	80004a6 <__aeabi_ldivmod+0x12>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d006      	beq.n	80004b4 <__aeabi_ldivmod+0x20>
 80004a6:	2000      	movs	r0, #0
 80004a8:	43c0      	mvns	r0, r0
 80004aa:	0841      	lsrs	r1, r0, #1
 80004ac:	e002      	b.n	80004b4 <__aeabi_ldivmod+0x20>
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0609      	lsls	r1, r1, #24
 80004b2:	2000      	movs	r0, #0
 80004b4:	b407      	push	{r0, r1, r2}
 80004b6:	4802      	ldr	r0, [pc, #8]	; (80004c0 <__aeabi_ldivmod+0x2c>)
 80004b8:	a101      	add	r1, pc, #4	; (adr r1, 80004c0 <__aeabi_ldivmod+0x2c>)
 80004ba:	1840      	adds	r0, r0, r1
 80004bc:	9002      	str	r0, [sp, #8]
 80004be:	bd03      	pop	{r0, r1, pc}
 80004c0:	ffffff55 	.word	0xffffff55
 80004c4:	b403      	push	{r0, r1}
 80004c6:	4668      	mov	r0, sp
 80004c8:	b501      	push	{r0, lr}
 80004ca:	9802      	ldr	r0, [sp, #8]
 80004cc:	f000 f830 	bl	8000530 <__gnu_ldivmod_helper>
 80004d0:	9b01      	ldr	r3, [sp, #4]
 80004d2:	469e      	mov	lr, r3
 80004d4:	b002      	add	sp, #8
 80004d6:	bc0c      	pop	{r2, r3}
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_lmul>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	46ce      	mov	lr, r9
 80004e0:	4647      	mov	r7, r8
 80004e2:	0415      	lsls	r5, r2, #16
 80004e4:	0c2d      	lsrs	r5, r5, #16
 80004e6:	002e      	movs	r6, r5
 80004e8:	b580      	push	{r7, lr}
 80004ea:	0407      	lsls	r7, r0, #16
 80004ec:	0c14      	lsrs	r4, r2, #16
 80004ee:	0c3f      	lsrs	r7, r7, #16
 80004f0:	4699      	mov	r9, r3
 80004f2:	0c03      	lsrs	r3, r0, #16
 80004f4:	437e      	muls	r6, r7
 80004f6:	435d      	muls	r5, r3
 80004f8:	4367      	muls	r7, r4
 80004fa:	4363      	muls	r3, r4
 80004fc:	197f      	adds	r7, r7, r5
 80004fe:	0c34      	lsrs	r4, r6, #16
 8000500:	19e4      	adds	r4, r4, r7
 8000502:	469c      	mov	ip, r3
 8000504:	42a5      	cmp	r5, r4
 8000506:	d903      	bls.n	8000510 <__aeabi_lmul+0x34>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	025b      	lsls	r3, r3, #9
 800050c:	4698      	mov	r8, r3
 800050e:	44c4      	add	ip, r8
 8000510:	464b      	mov	r3, r9
 8000512:	4343      	muls	r3, r0
 8000514:	4351      	muls	r1, r2
 8000516:	0c25      	lsrs	r5, r4, #16
 8000518:	0436      	lsls	r6, r6, #16
 800051a:	4465      	add	r5, ip
 800051c:	0c36      	lsrs	r6, r6, #16
 800051e:	0424      	lsls	r4, r4, #16
 8000520:	19a4      	adds	r4, r4, r6
 8000522:	195b      	adds	r3, r3, r5
 8000524:	1859      	adds	r1, r3, r1
 8000526:	0020      	movs	r0, r4
 8000528:	bc0c      	pop	{r2, r3}
 800052a:	4690      	mov	r8, r2
 800052c:	4699      	mov	r9, r3
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000530 <__gnu_ldivmod_helper>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	b083      	sub	sp, #12
 8000534:	0016      	movs	r6, r2
 8000536:	001f      	movs	r7, r3
 8000538:	9000      	str	r0, [sp, #0]
 800053a:	9101      	str	r1, [sp, #4]
 800053c:	f001 fea6 	bl	800228c <__divdi3>
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	0002      	movs	r2, r0
 8000546:	000b      	movs	r3, r1
 8000548:	0030      	movs	r0, r6
 800054a:	0039      	movs	r1, r7
 800054c:	f7ff ffc6 	bl	80004dc <__aeabi_lmul>
 8000550:	9a00      	ldr	r2, [sp, #0]
 8000552:	9b01      	ldr	r3, [sp, #4]
 8000554:	1a12      	subs	r2, r2, r0
 8000556:	418b      	sbcs	r3, r1
 8000558:	9908      	ldr	r1, [sp, #32]
 800055a:	0020      	movs	r0, r4
 800055c:	600a      	str	r2, [r1, #0]
 800055e:	604b      	str	r3, [r1, #4]
 8000560:	0029      	movs	r1, r5
 8000562:	b003      	add	sp, #12
 8000564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)

08000568 <__aeabi_dadd>:
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	464f      	mov	r7, r9
 800056c:	4646      	mov	r6, r8
 800056e:	46d6      	mov	lr, sl
 8000570:	000c      	movs	r4, r1
 8000572:	0309      	lsls	r1, r1, #12
 8000574:	b5c0      	push	{r6, r7, lr}
 8000576:	0a49      	lsrs	r1, r1, #9
 8000578:	0f47      	lsrs	r7, r0, #29
 800057a:	005e      	lsls	r6, r3, #1
 800057c:	4339      	orrs	r1, r7
 800057e:	031f      	lsls	r7, r3, #12
 8000580:	0fdb      	lsrs	r3, r3, #31
 8000582:	469c      	mov	ip, r3
 8000584:	0065      	lsls	r5, r4, #1
 8000586:	0a7b      	lsrs	r3, r7, #9
 8000588:	0f57      	lsrs	r7, r2, #29
 800058a:	431f      	orrs	r7, r3
 800058c:	0d6d      	lsrs	r5, r5, #21
 800058e:	0fe4      	lsrs	r4, r4, #31
 8000590:	0d76      	lsrs	r6, r6, #21
 8000592:	46a1      	mov	r9, r4
 8000594:	00c0      	lsls	r0, r0, #3
 8000596:	46b8      	mov	r8, r7
 8000598:	00d2      	lsls	r2, r2, #3
 800059a:	1bab      	subs	r3, r5, r6
 800059c:	4564      	cmp	r4, ip
 800059e:	d07b      	beq.n	8000698 <__aeabi_dadd+0x130>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd5f      	ble.n	8000664 <__aeabi_dadd+0xfc>
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_dadd+0x42>
 80005a8:	e0a4      	b.n	80006f4 <__aeabi_dadd+0x18c>
 80005aa:	003e      	movs	r6, r7
 80005ac:	4316      	orrs	r6, r2
 80005ae:	d100      	bne.n	80005b2 <__aeabi_dadd+0x4a>
 80005b0:	e112      	b.n	80007d8 <__aeabi_dadd+0x270>
 80005b2:	1e5e      	subs	r6, r3, #1
 80005b4:	2e00      	cmp	r6, #0
 80005b6:	d000      	beq.n	80005ba <__aeabi_dadd+0x52>
 80005b8:	e19e      	b.n	80008f8 <__aeabi_dadd+0x390>
 80005ba:	1a87      	subs	r7, r0, r2
 80005bc:	4643      	mov	r3, r8
 80005be:	42b8      	cmp	r0, r7
 80005c0:	4180      	sbcs	r0, r0
 80005c2:	2501      	movs	r5, #1
 80005c4:	1ac9      	subs	r1, r1, r3
 80005c6:	4240      	negs	r0, r0
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	020b      	lsls	r3, r1, #8
 80005cc:	d400      	bmi.n	80005d0 <__aeabi_dadd+0x68>
 80005ce:	e131      	b.n	8000834 <__aeabi_dadd+0x2cc>
 80005d0:	0249      	lsls	r1, r1, #9
 80005d2:	0a4e      	lsrs	r6, r1, #9
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x72>
 80005d8:	e16e      	b.n	80008b8 <__aeabi_dadd+0x350>
 80005da:	0030      	movs	r0, r6
 80005dc:	f001 fe38 	bl	8002250 <__clzsi2>
 80005e0:	0003      	movs	r3, r0
 80005e2:	3b08      	subs	r3, #8
 80005e4:	2b1f      	cmp	r3, #31
 80005e6:	dd00      	ble.n	80005ea <__aeabi_dadd+0x82>
 80005e8:	e161      	b.n	80008ae <__aeabi_dadd+0x346>
 80005ea:	2220      	movs	r2, #32
 80005ec:	0039      	movs	r1, r7
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	409e      	lsls	r6, r3
 80005f2:	40d1      	lsrs	r1, r2
 80005f4:	409f      	lsls	r7, r3
 80005f6:	430e      	orrs	r6, r1
 80005f8:	429d      	cmp	r5, r3
 80005fa:	dd00      	ble.n	80005fe <__aeabi_dadd+0x96>
 80005fc:	e151      	b.n	80008a2 <__aeabi_dadd+0x33a>
 80005fe:	1b5d      	subs	r5, r3, r5
 8000600:	1c6b      	adds	r3, r5, #1
 8000602:	2b1f      	cmp	r3, #31
 8000604:	dd00      	ble.n	8000608 <__aeabi_dadd+0xa0>
 8000606:	e17c      	b.n	8000902 <__aeabi_dadd+0x39a>
 8000608:	2120      	movs	r1, #32
 800060a:	1ac9      	subs	r1, r1, r3
 800060c:	003d      	movs	r5, r7
 800060e:	0030      	movs	r0, r6
 8000610:	408f      	lsls	r7, r1
 8000612:	4088      	lsls	r0, r1
 8000614:	40dd      	lsrs	r5, r3
 8000616:	1e79      	subs	r1, r7, #1
 8000618:	418f      	sbcs	r7, r1
 800061a:	0031      	movs	r1, r6
 800061c:	2207      	movs	r2, #7
 800061e:	4328      	orrs	r0, r5
 8000620:	40d9      	lsrs	r1, r3
 8000622:	2500      	movs	r5, #0
 8000624:	4307      	orrs	r7, r0
 8000626:	403a      	ands	r2, r7
 8000628:	2a00      	cmp	r2, #0
 800062a:	d009      	beq.n	8000640 <__aeabi_dadd+0xd8>
 800062c:	230f      	movs	r3, #15
 800062e:	403b      	ands	r3, r7
 8000630:	2b04      	cmp	r3, #4
 8000632:	d005      	beq.n	8000640 <__aeabi_dadd+0xd8>
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	42bb      	cmp	r3, r7
 8000638:	41bf      	sbcs	r7, r7
 800063a:	427f      	negs	r7, r7
 800063c:	19c9      	adds	r1, r1, r7
 800063e:	001f      	movs	r7, r3
 8000640:	020b      	lsls	r3, r1, #8
 8000642:	d400      	bmi.n	8000646 <__aeabi_dadd+0xde>
 8000644:	e226      	b.n	8000a94 <__aeabi_dadd+0x52c>
 8000646:	1c6a      	adds	r2, r5, #1
 8000648:	4bc6      	ldr	r3, [pc, #792]	; (8000964 <__aeabi_dadd+0x3fc>)
 800064a:	0555      	lsls	r5, r2, #21
 800064c:	0d6d      	lsrs	r5, r5, #21
 800064e:	429a      	cmp	r2, r3
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0xec>
 8000652:	e106      	b.n	8000862 <__aeabi_dadd+0x2fa>
 8000654:	4ac4      	ldr	r2, [pc, #784]	; (8000968 <__aeabi_dadd+0x400>)
 8000656:	08ff      	lsrs	r7, r7, #3
 8000658:	400a      	ands	r2, r1
 800065a:	0753      	lsls	r3, r2, #29
 800065c:	0252      	lsls	r2, r2, #9
 800065e:	433b      	orrs	r3, r7
 8000660:	0b12      	lsrs	r2, r2, #12
 8000662:	e08e      	b.n	8000782 <__aeabi_dadd+0x21a>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d000      	beq.n	800066a <__aeabi_dadd+0x102>
 8000668:	e0b8      	b.n	80007dc <__aeabi_dadd+0x274>
 800066a:	1c6b      	adds	r3, r5, #1
 800066c:	055b      	lsls	r3, r3, #21
 800066e:	0d5b      	lsrs	r3, r3, #21
 8000670:	2b01      	cmp	r3, #1
 8000672:	dc00      	bgt.n	8000676 <__aeabi_dadd+0x10e>
 8000674:	e130      	b.n	80008d8 <__aeabi_dadd+0x370>
 8000676:	1a87      	subs	r7, r0, r2
 8000678:	4643      	mov	r3, r8
 800067a:	42b8      	cmp	r0, r7
 800067c:	41b6      	sbcs	r6, r6
 800067e:	1acb      	subs	r3, r1, r3
 8000680:	4276      	negs	r6, r6
 8000682:	1b9e      	subs	r6, r3, r6
 8000684:	0233      	lsls	r3, r6, #8
 8000686:	d500      	bpl.n	800068a <__aeabi_dadd+0x122>
 8000688:	e14c      	b.n	8000924 <__aeabi_dadd+0x3bc>
 800068a:	003b      	movs	r3, r7
 800068c:	4333      	orrs	r3, r6
 800068e:	d1a1      	bne.n	80005d4 <__aeabi_dadd+0x6c>
 8000690:	2200      	movs	r2, #0
 8000692:	2400      	movs	r4, #0
 8000694:	2500      	movs	r5, #0
 8000696:	e070      	b.n	800077a <__aeabi_dadd+0x212>
 8000698:	2b00      	cmp	r3, #0
 800069a:	dc00      	bgt.n	800069e <__aeabi_dadd+0x136>
 800069c:	e0e5      	b.n	800086a <__aeabi_dadd+0x302>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x13c>
 80006a2:	e083      	b.n	80007ac <__aeabi_dadd+0x244>
 80006a4:	4eaf      	ldr	r6, [pc, #700]	; (8000964 <__aeabi_dadd+0x3fc>)
 80006a6:	42b5      	cmp	r5, r6
 80006a8:	d060      	beq.n	800076c <__aeabi_dadd+0x204>
 80006aa:	2680      	movs	r6, #128	; 0x80
 80006ac:	0436      	lsls	r6, r6, #16
 80006ae:	4337      	orrs	r7, r6
 80006b0:	46b8      	mov	r8, r7
 80006b2:	2b38      	cmp	r3, #56	; 0x38
 80006b4:	dc00      	bgt.n	80006b8 <__aeabi_dadd+0x150>
 80006b6:	e13e      	b.n	8000936 <__aeabi_dadd+0x3ce>
 80006b8:	4643      	mov	r3, r8
 80006ba:	4313      	orrs	r3, r2
 80006bc:	001f      	movs	r7, r3
 80006be:	1e7a      	subs	r2, r7, #1
 80006c0:	4197      	sbcs	r7, r2
 80006c2:	183f      	adds	r7, r7, r0
 80006c4:	4287      	cmp	r7, r0
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4240      	negs	r0, r0
 80006ca:	1809      	adds	r1, r1, r0
 80006cc:	020b      	lsls	r3, r1, #8
 80006ce:	d400      	bmi.n	80006d2 <__aeabi_dadd+0x16a>
 80006d0:	e0b0      	b.n	8000834 <__aeabi_dadd+0x2cc>
 80006d2:	4ba4      	ldr	r3, [pc, #656]	; (8000964 <__aeabi_dadd+0x3fc>)
 80006d4:	3501      	adds	r5, #1
 80006d6:	429d      	cmp	r5, r3
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x174>
 80006da:	e0c3      	b.n	8000864 <__aeabi_dadd+0x2fc>
 80006dc:	4aa2      	ldr	r2, [pc, #648]	; (8000968 <__aeabi_dadd+0x400>)
 80006de:	087b      	lsrs	r3, r7, #1
 80006e0:	400a      	ands	r2, r1
 80006e2:	2101      	movs	r1, #1
 80006e4:	400f      	ands	r7, r1
 80006e6:	431f      	orrs	r7, r3
 80006e8:	0851      	lsrs	r1, r2, #1
 80006ea:	07d3      	lsls	r3, r2, #31
 80006ec:	2207      	movs	r2, #7
 80006ee:	431f      	orrs	r7, r3
 80006f0:	403a      	ands	r2, r7
 80006f2:	e799      	b.n	8000628 <__aeabi_dadd+0xc0>
 80006f4:	4e9b      	ldr	r6, [pc, #620]	; (8000964 <__aeabi_dadd+0x3fc>)
 80006f6:	42b5      	cmp	r5, r6
 80006f8:	d038      	beq.n	800076c <__aeabi_dadd+0x204>
 80006fa:	2680      	movs	r6, #128	; 0x80
 80006fc:	0436      	lsls	r6, r6, #16
 80006fe:	4337      	orrs	r7, r6
 8000700:	46b8      	mov	r8, r7
 8000702:	2b38      	cmp	r3, #56	; 0x38
 8000704:	dd00      	ble.n	8000708 <__aeabi_dadd+0x1a0>
 8000706:	e0dc      	b.n	80008c2 <__aeabi_dadd+0x35a>
 8000708:	2b1f      	cmp	r3, #31
 800070a:	dc00      	bgt.n	800070e <__aeabi_dadd+0x1a6>
 800070c:	e130      	b.n	8000970 <__aeabi_dadd+0x408>
 800070e:	001e      	movs	r6, r3
 8000710:	4647      	mov	r7, r8
 8000712:	3e20      	subs	r6, #32
 8000714:	40f7      	lsrs	r7, r6
 8000716:	46bc      	mov	ip, r7
 8000718:	2b20      	cmp	r3, #32
 800071a:	d004      	beq.n	8000726 <__aeabi_dadd+0x1be>
 800071c:	2640      	movs	r6, #64	; 0x40
 800071e:	1af3      	subs	r3, r6, r3
 8000720:	4646      	mov	r6, r8
 8000722:	409e      	lsls	r6, r3
 8000724:	4332      	orrs	r2, r6
 8000726:	0017      	movs	r7, r2
 8000728:	4663      	mov	r3, ip
 800072a:	1e7a      	subs	r2, r7, #1
 800072c:	4197      	sbcs	r7, r2
 800072e:	431f      	orrs	r7, r3
 8000730:	e0cc      	b.n	80008cc <__aeabi_dadd+0x364>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x1d0>
 8000736:	e204      	b.n	8000b42 <__aeabi_dadd+0x5da>
 8000738:	4643      	mov	r3, r8
 800073a:	4313      	orrs	r3, r2
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x1d8>
 800073e:	e159      	b.n	80009f4 <__aeabi_dadd+0x48c>
 8000740:	074b      	lsls	r3, r1, #29
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	4318      	orrs	r0, r3
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	08c9      	lsrs	r1, r1, #3
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4219      	tst	r1, r3
 800074e:	d008      	beq.n	8000762 <__aeabi_dadd+0x1fa>
 8000750:	4645      	mov	r5, r8
 8000752:	08ed      	lsrs	r5, r5, #3
 8000754:	421d      	tst	r5, r3
 8000756:	d104      	bne.n	8000762 <__aeabi_dadd+0x1fa>
 8000758:	4643      	mov	r3, r8
 800075a:	08d0      	lsrs	r0, r2, #3
 800075c:	0759      	lsls	r1, r3, #29
 800075e:	4308      	orrs	r0, r1
 8000760:	0029      	movs	r1, r5
 8000762:	0f42      	lsrs	r2, r0, #29
 8000764:	00c9      	lsls	r1, r1, #3
 8000766:	4d7f      	ldr	r5, [pc, #508]	; (8000964 <__aeabi_dadd+0x3fc>)
 8000768:	4311      	orrs	r1, r2
 800076a:	00c0      	lsls	r0, r0, #3
 800076c:	074b      	lsls	r3, r1, #29
 800076e:	08ca      	lsrs	r2, r1, #3
 8000770:	497c      	ldr	r1, [pc, #496]	; (8000964 <__aeabi_dadd+0x3fc>)
 8000772:	08c0      	lsrs	r0, r0, #3
 8000774:	4303      	orrs	r3, r0
 8000776:	428d      	cmp	r5, r1
 8000778:	d068      	beq.n	800084c <__aeabi_dadd+0x2e4>
 800077a:	0312      	lsls	r2, r2, #12
 800077c:	056d      	lsls	r5, r5, #21
 800077e:	0b12      	lsrs	r2, r2, #12
 8000780:	0d6d      	lsrs	r5, r5, #21
 8000782:	2100      	movs	r1, #0
 8000784:	0312      	lsls	r2, r2, #12
 8000786:	0018      	movs	r0, r3
 8000788:	0b13      	lsrs	r3, r2, #12
 800078a:	0d0a      	lsrs	r2, r1, #20
 800078c:	0512      	lsls	r2, r2, #20
 800078e:	431a      	orrs	r2, r3
 8000790:	4b76      	ldr	r3, [pc, #472]	; (800096c <__aeabi_dadd+0x404>)
 8000792:	052d      	lsls	r5, r5, #20
 8000794:	4013      	ands	r3, r2
 8000796:	432b      	orrs	r3, r5
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	07e4      	lsls	r4, r4, #31
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	4323      	orrs	r3, r4
 80007a0:	0019      	movs	r1, r3
 80007a2:	bc1c      	pop	{r2, r3, r4}
 80007a4:	4690      	mov	r8, r2
 80007a6:	4699      	mov	r9, r3
 80007a8:	46a2      	mov	sl, r4
 80007aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ac:	003e      	movs	r6, r7
 80007ae:	4316      	orrs	r6, r2
 80007b0:	d012      	beq.n	80007d8 <__aeabi_dadd+0x270>
 80007b2:	1e5e      	subs	r6, r3, #1
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_dadd+0x252>
 80007b8:	e100      	b.n	80009bc <__aeabi_dadd+0x454>
 80007ba:	1887      	adds	r7, r0, r2
 80007bc:	4287      	cmp	r7, r0
 80007be:	4180      	sbcs	r0, r0
 80007c0:	4441      	add	r1, r8
 80007c2:	4240      	negs	r0, r0
 80007c4:	1809      	adds	r1, r1, r0
 80007c6:	2501      	movs	r5, #1
 80007c8:	020b      	lsls	r3, r1, #8
 80007ca:	d533      	bpl.n	8000834 <__aeabi_dadd+0x2cc>
 80007cc:	2502      	movs	r5, #2
 80007ce:	e785      	b.n	80006dc <__aeabi_dadd+0x174>
 80007d0:	4664      	mov	r4, ip
 80007d2:	0033      	movs	r3, r6
 80007d4:	4641      	mov	r1, r8
 80007d6:	0010      	movs	r0, r2
 80007d8:	001d      	movs	r5, r3
 80007da:	e7c7      	b.n	800076c <__aeabi_dadd+0x204>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x27a>
 80007e0:	e0da      	b.n	8000998 <__aeabi_dadd+0x430>
 80007e2:	000c      	movs	r4, r1
 80007e4:	4304      	orrs	r4, r0
 80007e6:	d0f3      	beq.n	80007d0 <__aeabi_dadd+0x268>
 80007e8:	1c5c      	adds	r4, r3, #1
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x286>
 80007ec:	e19f      	b.n	8000b2e <__aeabi_dadd+0x5c6>
 80007ee:	4c5d      	ldr	r4, [pc, #372]	; (8000964 <__aeabi_dadd+0x3fc>)
 80007f0:	42a6      	cmp	r6, r4
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x28e>
 80007f4:	e12f      	b.n	8000a56 <__aeabi_dadd+0x4ee>
 80007f6:	43db      	mvns	r3, r3
 80007f8:	2b38      	cmp	r3, #56	; 0x38
 80007fa:	dd00      	ble.n	80007fe <__aeabi_dadd+0x296>
 80007fc:	e166      	b.n	8000acc <__aeabi_dadd+0x564>
 80007fe:	2b1f      	cmp	r3, #31
 8000800:	dd00      	ble.n	8000804 <__aeabi_dadd+0x29c>
 8000802:	e183      	b.n	8000b0c <__aeabi_dadd+0x5a4>
 8000804:	2420      	movs	r4, #32
 8000806:	0005      	movs	r5, r0
 8000808:	1ae4      	subs	r4, r4, r3
 800080a:	000f      	movs	r7, r1
 800080c:	40dd      	lsrs	r5, r3
 800080e:	40d9      	lsrs	r1, r3
 8000810:	40a0      	lsls	r0, r4
 8000812:	4643      	mov	r3, r8
 8000814:	40a7      	lsls	r7, r4
 8000816:	1a5b      	subs	r3, r3, r1
 8000818:	1e44      	subs	r4, r0, #1
 800081a:	41a0      	sbcs	r0, r4
 800081c:	4698      	mov	r8, r3
 800081e:	432f      	orrs	r7, r5
 8000820:	4338      	orrs	r0, r7
 8000822:	1a17      	subs	r7, r2, r0
 8000824:	42ba      	cmp	r2, r7
 8000826:	4192      	sbcs	r2, r2
 8000828:	4643      	mov	r3, r8
 800082a:	4252      	negs	r2, r2
 800082c:	1a99      	subs	r1, r3, r2
 800082e:	4664      	mov	r4, ip
 8000830:	0035      	movs	r5, r6
 8000832:	e6ca      	b.n	80005ca <__aeabi_dadd+0x62>
 8000834:	2207      	movs	r2, #7
 8000836:	403a      	ands	r2, r7
 8000838:	2a00      	cmp	r2, #0
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x2d6>
 800083c:	e6f6      	b.n	800062c <__aeabi_dadd+0xc4>
 800083e:	074b      	lsls	r3, r1, #29
 8000840:	08ca      	lsrs	r2, r1, #3
 8000842:	4948      	ldr	r1, [pc, #288]	; (8000964 <__aeabi_dadd+0x3fc>)
 8000844:	08ff      	lsrs	r7, r7, #3
 8000846:	433b      	orrs	r3, r7
 8000848:	428d      	cmp	r5, r1
 800084a:	d196      	bne.n	800077a <__aeabi_dadd+0x212>
 800084c:	0019      	movs	r1, r3
 800084e:	4311      	orrs	r1, r2
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x2ec>
 8000852:	e19e      	b.n	8000b92 <__aeabi_dadd+0x62a>
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0309      	lsls	r1, r1, #12
 8000858:	430a      	orrs	r2, r1
 800085a:	0312      	lsls	r2, r2, #12
 800085c:	0b12      	lsrs	r2, r2, #12
 800085e:	4d41      	ldr	r5, [pc, #260]	; (8000964 <__aeabi_dadd+0x3fc>)
 8000860:	e78f      	b.n	8000782 <__aeabi_dadd+0x21a>
 8000862:	0015      	movs	r5, r2
 8000864:	2200      	movs	r2, #0
 8000866:	2300      	movs	r3, #0
 8000868:	e78b      	b.n	8000782 <__aeabi_dadd+0x21a>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x308>
 800086e:	e0c7      	b.n	8000a00 <__aeabi_dadd+0x498>
 8000870:	1c6b      	adds	r3, r5, #1
 8000872:	055f      	lsls	r7, r3, #21
 8000874:	0d7f      	lsrs	r7, r7, #21
 8000876:	2f01      	cmp	r7, #1
 8000878:	dc00      	bgt.n	800087c <__aeabi_dadd+0x314>
 800087a:	e0f1      	b.n	8000a60 <__aeabi_dadd+0x4f8>
 800087c:	4d39      	ldr	r5, [pc, #228]	; (8000964 <__aeabi_dadd+0x3fc>)
 800087e:	42ab      	cmp	r3, r5
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x31c>
 8000882:	e0b9      	b.n	80009f8 <__aeabi_dadd+0x490>
 8000884:	1885      	adds	r5, r0, r2
 8000886:	000a      	movs	r2, r1
 8000888:	4285      	cmp	r5, r0
 800088a:	4189      	sbcs	r1, r1
 800088c:	4442      	add	r2, r8
 800088e:	4249      	negs	r1, r1
 8000890:	1851      	adds	r1, r2, r1
 8000892:	2207      	movs	r2, #7
 8000894:	07cf      	lsls	r7, r1, #31
 8000896:	086d      	lsrs	r5, r5, #1
 8000898:	432f      	orrs	r7, r5
 800089a:	0849      	lsrs	r1, r1, #1
 800089c:	403a      	ands	r2, r7
 800089e:	001d      	movs	r5, r3
 80008a0:	e6c2      	b.n	8000628 <__aeabi_dadd+0xc0>
 80008a2:	2207      	movs	r2, #7
 80008a4:	4930      	ldr	r1, [pc, #192]	; (8000968 <__aeabi_dadd+0x400>)
 80008a6:	1aed      	subs	r5, r5, r3
 80008a8:	4031      	ands	r1, r6
 80008aa:	403a      	ands	r2, r7
 80008ac:	e6bc      	b.n	8000628 <__aeabi_dadd+0xc0>
 80008ae:	003e      	movs	r6, r7
 80008b0:	3828      	subs	r0, #40	; 0x28
 80008b2:	4086      	lsls	r6, r0
 80008b4:	2700      	movs	r7, #0
 80008b6:	e69f      	b.n	80005f8 <__aeabi_dadd+0x90>
 80008b8:	0038      	movs	r0, r7
 80008ba:	f001 fcc9 	bl	8002250 <__clzsi2>
 80008be:	3020      	adds	r0, #32
 80008c0:	e68e      	b.n	80005e0 <__aeabi_dadd+0x78>
 80008c2:	4643      	mov	r3, r8
 80008c4:	4313      	orrs	r3, r2
 80008c6:	001f      	movs	r7, r3
 80008c8:	1e7a      	subs	r2, r7, #1
 80008ca:	4197      	sbcs	r7, r2
 80008cc:	1bc7      	subs	r7, r0, r7
 80008ce:	42b8      	cmp	r0, r7
 80008d0:	4180      	sbcs	r0, r0
 80008d2:	4240      	negs	r0, r0
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	e678      	b.n	80005ca <__aeabi_dadd+0x62>
 80008d8:	000e      	movs	r6, r1
 80008da:	003b      	movs	r3, r7
 80008dc:	4306      	orrs	r6, r0
 80008de:	4313      	orrs	r3, r2
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d161      	bne.n	80009a8 <__aeabi_dadd+0x440>
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x382>
 80008e8:	e0f4      	b.n	8000ad4 <__aeabi_dadd+0x56c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x388>
 80008ee:	e11b      	b.n	8000b28 <__aeabi_dadd+0x5c0>
 80008f0:	4664      	mov	r4, ip
 80008f2:	0039      	movs	r1, r7
 80008f4:	0010      	movs	r0, r2
 80008f6:	e739      	b.n	800076c <__aeabi_dadd+0x204>
 80008f8:	4f1a      	ldr	r7, [pc, #104]	; (8000964 <__aeabi_dadd+0x3fc>)
 80008fa:	42bb      	cmp	r3, r7
 80008fc:	d07a      	beq.n	80009f4 <__aeabi_dadd+0x48c>
 80008fe:	0033      	movs	r3, r6
 8000900:	e6ff      	b.n	8000702 <__aeabi_dadd+0x19a>
 8000902:	0030      	movs	r0, r6
 8000904:	3d1f      	subs	r5, #31
 8000906:	40e8      	lsrs	r0, r5
 8000908:	2b20      	cmp	r3, #32
 800090a:	d003      	beq.n	8000914 <__aeabi_dadd+0x3ac>
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	1acb      	subs	r3, r1, r3
 8000910:	409e      	lsls	r6, r3
 8000912:	4337      	orrs	r7, r6
 8000914:	1e7b      	subs	r3, r7, #1
 8000916:	419f      	sbcs	r7, r3
 8000918:	2207      	movs	r2, #7
 800091a:	4307      	orrs	r7, r0
 800091c:	403a      	ands	r2, r7
 800091e:	2100      	movs	r1, #0
 8000920:	2500      	movs	r5, #0
 8000922:	e789      	b.n	8000838 <__aeabi_dadd+0x2d0>
 8000924:	1a17      	subs	r7, r2, r0
 8000926:	4643      	mov	r3, r8
 8000928:	42ba      	cmp	r2, r7
 800092a:	41b6      	sbcs	r6, r6
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	4276      	negs	r6, r6
 8000930:	1b8e      	subs	r6, r1, r6
 8000932:	4664      	mov	r4, ip
 8000934:	e64e      	b.n	80005d4 <__aeabi_dadd+0x6c>
 8000936:	2b1f      	cmp	r3, #31
 8000938:	dd00      	ble.n	800093c <__aeabi_dadd+0x3d4>
 800093a:	e0ad      	b.n	8000a98 <__aeabi_dadd+0x530>
 800093c:	2620      	movs	r6, #32
 800093e:	4647      	mov	r7, r8
 8000940:	1af6      	subs	r6, r6, r3
 8000942:	40b7      	lsls	r7, r6
 8000944:	46b9      	mov	r9, r7
 8000946:	0017      	movs	r7, r2
 8000948:	46b2      	mov	sl, r6
 800094a:	40df      	lsrs	r7, r3
 800094c:	464e      	mov	r6, r9
 800094e:	433e      	orrs	r6, r7
 8000950:	0037      	movs	r7, r6
 8000952:	4656      	mov	r6, sl
 8000954:	40b2      	lsls	r2, r6
 8000956:	1e56      	subs	r6, r2, #1
 8000958:	41b2      	sbcs	r2, r6
 800095a:	4317      	orrs	r7, r2
 800095c:	4642      	mov	r2, r8
 800095e:	40da      	lsrs	r2, r3
 8000960:	1889      	adds	r1, r1, r2
 8000962:	e6ae      	b.n	80006c2 <__aeabi_dadd+0x15a>
 8000964:	000007ff 	.word	0x000007ff
 8000968:	ff7fffff 	.word	0xff7fffff
 800096c:	800fffff 	.word	0x800fffff
 8000970:	2620      	movs	r6, #32
 8000972:	4647      	mov	r7, r8
 8000974:	1af6      	subs	r6, r6, r3
 8000976:	40b7      	lsls	r7, r6
 8000978:	46b9      	mov	r9, r7
 800097a:	0017      	movs	r7, r2
 800097c:	46b2      	mov	sl, r6
 800097e:	40df      	lsrs	r7, r3
 8000980:	464e      	mov	r6, r9
 8000982:	433e      	orrs	r6, r7
 8000984:	0037      	movs	r7, r6
 8000986:	4656      	mov	r6, sl
 8000988:	40b2      	lsls	r2, r6
 800098a:	1e56      	subs	r6, r2, #1
 800098c:	41b2      	sbcs	r2, r6
 800098e:	4317      	orrs	r7, r2
 8000990:	4642      	mov	r2, r8
 8000992:	40da      	lsrs	r2, r3
 8000994:	1a89      	subs	r1, r1, r2
 8000996:	e799      	b.n	80008cc <__aeabi_dadd+0x364>
 8000998:	4c7f      	ldr	r4, [pc, #508]	; (8000b98 <__aeabi_dadd+0x630>)
 800099a:	42a6      	cmp	r6, r4
 800099c:	d05b      	beq.n	8000a56 <__aeabi_dadd+0x4ee>
 800099e:	2480      	movs	r4, #128	; 0x80
 80009a0:	0424      	lsls	r4, r4, #16
 80009a2:	425b      	negs	r3, r3
 80009a4:	4321      	orrs	r1, r4
 80009a6:	e727      	b.n	80007f8 <__aeabi_dadd+0x290>
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	d10c      	bne.n	80009c6 <__aeabi_dadd+0x45e>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x44a>
 80009b0:	e0cb      	b.n	8000b4a <__aeabi_dadd+0x5e2>
 80009b2:	4664      	mov	r4, ip
 80009b4:	0039      	movs	r1, r7
 80009b6:	0010      	movs	r0, r2
 80009b8:	4d77      	ldr	r5, [pc, #476]	; (8000b98 <__aeabi_dadd+0x630>)
 80009ba:	e6d7      	b.n	800076c <__aeabi_dadd+0x204>
 80009bc:	4f76      	ldr	r7, [pc, #472]	; (8000b98 <__aeabi_dadd+0x630>)
 80009be:	42bb      	cmp	r3, r7
 80009c0:	d018      	beq.n	80009f4 <__aeabi_dadd+0x48c>
 80009c2:	0033      	movs	r3, r6
 80009c4:	e675      	b.n	80006b2 <__aeabi_dadd+0x14a>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d014      	beq.n	80009f4 <__aeabi_dadd+0x48c>
 80009ca:	074b      	lsls	r3, r1, #29
 80009cc:	08c0      	lsrs	r0, r0, #3
 80009ce:	4318      	orrs	r0, r3
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	08c9      	lsrs	r1, r1, #3
 80009d4:	031b      	lsls	r3, r3, #12
 80009d6:	4219      	tst	r1, r3
 80009d8:	d007      	beq.n	80009ea <__aeabi_dadd+0x482>
 80009da:	08fc      	lsrs	r4, r7, #3
 80009dc:	421c      	tst	r4, r3
 80009de:	d104      	bne.n	80009ea <__aeabi_dadd+0x482>
 80009e0:	0779      	lsls	r1, r7, #29
 80009e2:	08d0      	lsrs	r0, r2, #3
 80009e4:	4308      	orrs	r0, r1
 80009e6:	46e1      	mov	r9, ip
 80009e8:	0021      	movs	r1, r4
 80009ea:	464c      	mov	r4, r9
 80009ec:	0f42      	lsrs	r2, r0, #29
 80009ee:	00c9      	lsls	r1, r1, #3
 80009f0:	4311      	orrs	r1, r2
 80009f2:	00c0      	lsls	r0, r0, #3
 80009f4:	4d68      	ldr	r5, [pc, #416]	; (8000b98 <__aeabi_dadd+0x630>)
 80009f6:	e6b9      	b.n	800076c <__aeabi_dadd+0x204>
 80009f8:	001d      	movs	r5, r3
 80009fa:	2200      	movs	r2, #0
 80009fc:	2300      	movs	r3, #0
 80009fe:	e6c0      	b.n	8000782 <__aeabi_dadd+0x21a>
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d15b      	bne.n	8000abc <__aeabi_dadd+0x554>
 8000a04:	000d      	movs	r5, r1
 8000a06:	4305      	orrs	r5, r0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x4a4>
 8000a0a:	e6e2      	b.n	80007d2 <__aeabi_dadd+0x26a>
 8000a0c:	1c5d      	adds	r5, r3, #1
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x4aa>
 8000a10:	e0b0      	b.n	8000b74 <__aeabi_dadd+0x60c>
 8000a12:	4d61      	ldr	r5, [pc, #388]	; (8000b98 <__aeabi_dadd+0x630>)
 8000a14:	42ae      	cmp	r6, r5
 8000a16:	d01f      	beq.n	8000a58 <__aeabi_dadd+0x4f0>
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	2b38      	cmp	r3, #56	; 0x38
 8000a1c:	dc71      	bgt.n	8000b02 <__aeabi_dadd+0x59a>
 8000a1e:	2b1f      	cmp	r3, #31
 8000a20:	dd00      	ble.n	8000a24 <__aeabi_dadd+0x4bc>
 8000a22:	e096      	b.n	8000b52 <__aeabi_dadd+0x5ea>
 8000a24:	2520      	movs	r5, #32
 8000a26:	000f      	movs	r7, r1
 8000a28:	1aed      	subs	r5, r5, r3
 8000a2a:	40af      	lsls	r7, r5
 8000a2c:	46b9      	mov	r9, r7
 8000a2e:	0007      	movs	r7, r0
 8000a30:	46aa      	mov	sl, r5
 8000a32:	40df      	lsrs	r7, r3
 8000a34:	464d      	mov	r5, r9
 8000a36:	433d      	orrs	r5, r7
 8000a38:	002f      	movs	r7, r5
 8000a3a:	4655      	mov	r5, sl
 8000a3c:	40a8      	lsls	r0, r5
 8000a3e:	40d9      	lsrs	r1, r3
 8000a40:	1e45      	subs	r5, r0, #1
 8000a42:	41a8      	sbcs	r0, r5
 8000a44:	4488      	add	r8, r1
 8000a46:	4307      	orrs	r7, r0
 8000a48:	18bf      	adds	r7, r7, r2
 8000a4a:	4297      	cmp	r7, r2
 8000a4c:	4192      	sbcs	r2, r2
 8000a4e:	4251      	negs	r1, r2
 8000a50:	4441      	add	r1, r8
 8000a52:	0035      	movs	r5, r6
 8000a54:	e63a      	b.n	80006cc <__aeabi_dadd+0x164>
 8000a56:	4664      	mov	r4, ip
 8000a58:	0035      	movs	r5, r6
 8000a5a:	4641      	mov	r1, r8
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	e685      	b.n	800076c <__aeabi_dadd+0x204>
 8000a60:	000b      	movs	r3, r1
 8000a62:	4303      	orrs	r3, r0
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x502>
 8000a68:	e663      	b.n	8000732 <__aeabi_dadd+0x1ca>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f5      	beq.n	8000a5a <__aeabi_dadd+0x4f2>
 8000a6e:	4643      	mov	r3, r8
 8000a70:	4313      	orrs	r3, r2
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x50e>
 8000a74:	e67a      	b.n	800076c <__aeabi_dadd+0x204>
 8000a76:	1887      	adds	r7, r0, r2
 8000a78:	4287      	cmp	r7, r0
 8000a7a:	4180      	sbcs	r0, r0
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	4441      	add	r1, r8
 8000a80:	4240      	negs	r0, r0
 8000a82:	1809      	adds	r1, r1, r0
 8000a84:	403a      	ands	r2, r7
 8000a86:	020b      	lsls	r3, r1, #8
 8000a88:	d400      	bmi.n	8000a8c <__aeabi_dadd+0x524>
 8000a8a:	e6d5      	b.n	8000838 <__aeabi_dadd+0x2d0>
 8000a8c:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <__aeabi_dadd+0x634>)
 8000a8e:	3501      	adds	r5, #1
 8000a90:	4019      	ands	r1, r3
 8000a92:	e5c9      	b.n	8000628 <__aeabi_dadd+0xc0>
 8000a94:	0038      	movs	r0, r7
 8000a96:	e669      	b.n	800076c <__aeabi_dadd+0x204>
 8000a98:	001e      	movs	r6, r3
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	3e20      	subs	r6, #32
 8000a9e:	40f7      	lsrs	r7, r6
 8000aa0:	46bc      	mov	ip, r7
 8000aa2:	2b20      	cmp	r3, #32
 8000aa4:	d004      	beq.n	8000ab0 <__aeabi_dadd+0x548>
 8000aa6:	2640      	movs	r6, #64	; 0x40
 8000aa8:	1af3      	subs	r3, r6, r3
 8000aaa:	4646      	mov	r6, r8
 8000aac:	409e      	lsls	r6, r3
 8000aae:	4332      	orrs	r2, r6
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	1e7a      	subs	r2, r7, #1
 8000ab6:	4197      	sbcs	r7, r2
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e602      	b.n	80006c2 <__aeabi_dadd+0x15a>
 8000abc:	4d36      	ldr	r5, [pc, #216]	; (8000b98 <__aeabi_dadd+0x630>)
 8000abe:	42ae      	cmp	r6, r5
 8000ac0:	d0ca      	beq.n	8000a58 <__aeabi_dadd+0x4f0>
 8000ac2:	2580      	movs	r5, #128	; 0x80
 8000ac4:	042d      	lsls	r5, r5, #16
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	4329      	orrs	r1, r5
 8000aca:	e7a6      	b.n	8000a1a <__aeabi_dadd+0x4b2>
 8000acc:	4308      	orrs	r0, r1
 8000ace:	1e41      	subs	r1, r0, #1
 8000ad0:	4188      	sbcs	r0, r1
 8000ad2:	e6a6      	b.n	8000822 <__aeabi_dadd+0x2ba>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x572>
 8000ad8:	e648      	b.n	800076c <__aeabi_dadd+0x204>
 8000ada:	1a87      	subs	r7, r0, r2
 8000adc:	4643      	mov	r3, r8
 8000ade:	42b8      	cmp	r0, r7
 8000ae0:	41b6      	sbcs	r6, r6
 8000ae2:	1acb      	subs	r3, r1, r3
 8000ae4:	4276      	negs	r6, r6
 8000ae6:	1b9e      	subs	r6, r3, r6
 8000ae8:	0233      	lsls	r3, r6, #8
 8000aea:	d54b      	bpl.n	8000b84 <__aeabi_dadd+0x61c>
 8000aec:	1a17      	subs	r7, r2, r0
 8000aee:	4643      	mov	r3, r8
 8000af0:	42ba      	cmp	r2, r7
 8000af2:	4192      	sbcs	r2, r2
 8000af4:	1a59      	subs	r1, r3, r1
 8000af6:	4252      	negs	r2, r2
 8000af8:	1a89      	subs	r1, r1, r2
 8000afa:	2207      	movs	r2, #7
 8000afc:	4664      	mov	r4, ip
 8000afe:	403a      	ands	r2, r7
 8000b00:	e592      	b.n	8000628 <__aeabi_dadd+0xc0>
 8000b02:	4301      	orrs	r1, r0
 8000b04:	000f      	movs	r7, r1
 8000b06:	1e79      	subs	r1, r7, #1
 8000b08:	418f      	sbcs	r7, r1
 8000b0a:	e79d      	b.n	8000a48 <__aeabi_dadd+0x4e0>
 8000b0c:	001c      	movs	r4, r3
 8000b0e:	000f      	movs	r7, r1
 8000b10:	3c20      	subs	r4, #32
 8000b12:	40e7      	lsrs	r7, r4
 8000b14:	2b20      	cmp	r3, #32
 8000b16:	d003      	beq.n	8000b20 <__aeabi_dadd+0x5b8>
 8000b18:	2440      	movs	r4, #64	; 0x40
 8000b1a:	1ae3      	subs	r3, r4, r3
 8000b1c:	4099      	lsls	r1, r3
 8000b1e:	4308      	orrs	r0, r1
 8000b20:	1e41      	subs	r1, r0, #1
 8000b22:	4188      	sbcs	r0, r1
 8000b24:	4338      	orrs	r0, r7
 8000b26:	e67c      	b.n	8000822 <__aeabi_dadd+0x2ba>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	e625      	b.n	800077a <__aeabi_dadd+0x212>
 8000b2e:	1a17      	subs	r7, r2, r0
 8000b30:	4643      	mov	r3, r8
 8000b32:	42ba      	cmp	r2, r7
 8000b34:	4192      	sbcs	r2, r2
 8000b36:	1a59      	subs	r1, r3, r1
 8000b38:	4252      	negs	r2, r2
 8000b3a:	1a89      	subs	r1, r1, r2
 8000b3c:	4664      	mov	r4, ip
 8000b3e:	0035      	movs	r5, r6
 8000b40:	e543      	b.n	80005ca <__aeabi_dadd+0x62>
 8000b42:	4641      	mov	r1, r8
 8000b44:	0010      	movs	r0, r2
 8000b46:	4d14      	ldr	r5, [pc, #80]	; (8000b98 <__aeabi_dadd+0x630>)
 8000b48:	e610      	b.n	800076c <__aeabi_dadd+0x204>
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	0312      	lsls	r2, r2, #12
 8000b50:	e680      	b.n	8000854 <__aeabi_dadd+0x2ec>
 8000b52:	001d      	movs	r5, r3
 8000b54:	000f      	movs	r7, r1
 8000b56:	3d20      	subs	r5, #32
 8000b58:	40ef      	lsrs	r7, r5
 8000b5a:	46bc      	mov	ip, r7
 8000b5c:	2b20      	cmp	r3, #32
 8000b5e:	d003      	beq.n	8000b68 <__aeabi_dadd+0x600>
 8000b60:	2540      	movs	r5, #64	; 0x40
 8000b62:	1aeb      	subs	r3, r5, r3
 8000b64:	4099      	lsls	r1, r3
 8000b66:	4308      	orrs	r0, r1
 8000b68:	0007      	movs	r7, r0
 8000b6a:	4663      	mov	r3, ip
 8000b6c:	1e78      	subs	r0, r7, #1
 8000b6e:	4187      	sbcs	r7, r0
 8000b70:	431f      	orrs	r7, r3
 8000b72:	e769      	b.n	8000a48 <__aeabi_dadd+0x4e0>
 8000b74:	1887      	adds	r7, r0, r2
 8000b76:	4297      	cmp	r7, r2
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	4441      	add	r1, r8
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	18c9      	adds	r1, r1, r3
 8000b80:	0035      	movs	r5, r6
 8000b82:	e5a3      	b.n	80006cc <__aeabi_dadd+0x164>
 8000b84:	003b      	movs	r3, r7
 8000b86:	4333      	orrs	r3, r6
 8000b88:	d0ce      	beq.n	8000b28 <__aeabi_dadd+0x5c0>
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	0031      	movs	r1, r6
 8000b8e:	403a      	ands	r2, r7
 8000b90:	e652      	b.n	8000838 <__aeabi_dadd+0x2d0>
 8000b92:	2300      	movs	r3, #0
 8000b94:	001a      	movs	r2, r3
 8000b96:	e5f4      	b.n	8000782 <__aeabi_dadd+0x21a>
 8000b98:	000007ff 	.word	0x000007ff
 8000b9c:	ff7fffff 	.word	0xff7fffff

08000ba0 <__aeabi_ddiv>:
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	4657      	mov	r7, sl
 8000ba4:	46de      	mov	lr, fp
 8000ba6:	464e      	mov	r6, r9
 8000ba8:	4645      	mov	r5, r8
 8000baa:	b5e0      	push	{r5, r6, r7, lr}
 8000bac:	4683      	mov	fp, r0
 8000bae:	0007      	movs	r7, r0
 8000bb0:	030e      	lsls	r6, r1, #12
 8000bb2:	0048      	lsls	r0, r1, #1
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	4692      	mov	sl, r2
 8000bb8:	001c      	movs	r4, r3
 8000bba:	0b36      	lsrs	r6, r6, #12
 8000bbc:	0d40      	lsrs	r0, r0, #21
 8000bbe:	0fcd      	lsrs	r5, r1, #31
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_ddiv+0x26>
 8000bc4:	e09d      	b.n	8000d02 <__aeabi_ddiv+0x162>
 8000bc6:	4b95      	ldr	r3, [pc, #596]	; (8000e1c <__aeabi_ddiv+0x27c>)
 8000bc8:	4298      	cmp	r0, r3
 8000bca:	d039      	beq.n	8000c40 <__aeabi_ddiv+0xa0>
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	00f6      	lsls	r6, r6, #3
 8000bd0:	041b      	lsls	r3, r3, #16
 8000bd2:	431e      	orrs	r6, r3
 8000bd4:	4a92      	ldr	r2, [pc, #584]	; (8000e20 <__aeabi_ddiv+0x280>)
 8000bd6:	0f7b      	lsrs	r3, r7, #29
 8000bd8:	4333      	orrs	r3, r6
 8000bda:	4699      	mov	r9, r3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	0003      	movs	r3, r0
 8000be0:	4463      	add	r3, ip
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2600      	movs	r6, #0
 8000be8:	00ff      	lsls	r7, r7, #3
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	0323      	lsls	r3, r4, #12
 8000bee:	0b1b      	lsrs	r3, r3, #12
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	0063      	lsls	r3, r4, #1
 8000bf4:	0fe4      	lsrs	r4, r4, #31
 8000bf6:	4652      	mov	r2, sl
 8000bf8:	0d5b      	lsrs	r3, r3, #21
 8000bfa:	9401      	str	r4, [sp, #4]
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_ddiv+0x60>
 8000bfe:	e0b3      	b.n	8000d68 <__aeabi_ddiv+0x1c8>
 8000c00:	4986      	ldr	r1, [pc, #536]	; (8000e1c <__aeabi_ddiv+0x27c>)
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d100      	bne.n	8000c08 <__aeabi_ddiv+0x68>
 8000c06:	e09e      	b.n	8000d46 <__aeabi_ddiv+0x1a6>
 8000c08:	4642      	mov	r2, r8
 8000c0a:	00d1      	lsls	r1, r2, #3
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	0412      	lsls	r2, r2, #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	4651      	mov	r1, sl
 8000c14:	0f49      	lsrs	r1, r1, #29
 8000c16:	4311      	orrs	r1, r2
 8000c18:	468b      	mov	fp, r1
 8000c1a:	4981      	ldr	r1, [pc, #516]	; (8000e20 <__aeabi_ddiv+0x280>)
 8000c1c:	4652      	mov	r2, sl
 8000c1e:	468c      	mov	ip, r1
 8000c20:	9900      	ldr	r1, [sp, #0]
 8000c22:	4463      	add	r3, ip
 8000c24:	1acb      	subs	r3, r1, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	002b      	movs	r3, r5
 8000c2e:	4063      	eors	r3, r4
 8000c30:	469a      	mov	sl, r3
 8000c32:	2e0f      	cmp	r6, #15
 8000c34:	d900      	bls.n	8000c38 <__aeabi_ddiv+0x98>
 8000c36:	e105      	b.n	8000e44 <__aeabi_ddiv+0x2a4>
 8000c38:	4b7a      	ldr	r3, [pc, #488]	; (8000e24 <__aeabi_ddiv+0x284>)
 8000c3a:	00b6      	lsls	r6, r6, #2
 8000c3c:	599b      	ldr	r3, [r3, r6]
 8000c3e:	469f      	mov	pc, r3
 8000c40:	465b      	mov	r3, fp
 8000c42:	4333      	orrs	r3, r6
 8000c44:	4699      	mov	r9, r3
 8000c46:	d000      	beq.n	8000c4a <__aeabi_ddiv+0xaa>
 8000c48:	e0b8      	b.n	8000dbc <__aeabi_ddiv+0x21c>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	2608      	movs	r6, #8
 8000c4e:	2700      	movs	r7, #0
 8000c50:	9000      	str	r0, [sp, #0]
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	e7ca      	b.n	8000bec <__aeabi_ddiv+0x4c>
 8000c56:	46cb      	mov	fp, r9
 8000c58:	003a      	movs	r2, r7
 8000c5a:	9902      	ldr	r1, [sp, #8]
 8000c5c:	9501      	str	r5, [sp, #4]
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	469a      	mov	sl, r3
 8000c62:	2902      	cmp	r1, #2
 8000c64:	d027      	beq.n	8000cb6 <__aeabi_ddiv+0x116>
 8000c66:	2903      	cmp	r1, #3
 8000c68:	d100      	bne.n	8000c6c <__aeabi_ddiv+0xcc>
 8000c6a:	e280      	b.n	800116e <__aeabi_ddiv+0x5ce>
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d044      	beq.n	8000cfa <__aeabi_ddiv+0x15a>
 8000c70:	496d      	ldr	r1, [pc, #436]	; (8000e28 <__aeabi_ddiv+0x288>)
 8000c72:	9b00      	ldr	r3, [sp, #0]
 8000c74:	468c      	mov	ip, r1
 8000c76:	4463      	add	r3, ip
 8000c78:	001c      	movs	r4, r3
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	dd38      	ble.n	8000cf0 <__aeabi_ddiv+0x150>
 8000c7e:	0753      	lsls	r3, r2, #29
 8000c80:	d000      	beq.n	8000c84 <__aeabi_ddiv+0xe4>
 8000c82:	e213      	b.n	80010ac <__aeabi_ddiv+0x50c>
 8000c84:	08d2      	lsrs	r2, r2, #3
 8000c86:	465b      	mov	r3, fp
 8000c88:	01db      	lsls	r3, r3, #7
 8000c8a:	d509      	bpl.n	8000ca0 <__aeabi_ddiv+0x100>
 8000c8c:	4659      	mov	r1, fp
 8000c8e:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <__aeabi_ddiv+0x28c>)
 8000c90:	4019      	ands	r1, r3
 8000c92:	468b      	mov	fp, r1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	00c9      	lsls	r1, r1, #3
 8000c98:	468c      	mov	ip, r1
 8000c9a:	9b00      	ldr	r3, [sp, #0]
 8000c9c:	4463      	add	r3, ip
 8000c9e:	001c      	movs	r4, r3
 8000ca0:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <__aeabi_ddiv+0x290>)
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	dc07      	bgt.n	8000cb6 <__aeabi_ddiv+0x116>
 8000ca6:	465b      	mov	r3, fp
 8000ca8:	0564      	lsls	r4, r4, #21
 8000caa:	075f      	lsls	r7, r3, #29
 8000cac:	025b      	lsls	r3, r3, #9
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	0b1b      	lsrs	r3, r3, #12
 8000cb2:	0d62      	lsrs	r2, r4, #21
 8000cb4:	e002      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2700      	movs	r7, #0
 8000cba:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <__aeabi_ddiv+0x27c>)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	031b      	lsls	r3, r3, #12
 8000cc0:	0b1c      	lsrs	r4, r3, #12
 8000cc2:	0d0b      	lsrs	r3, r1, #20
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	0514      	lsls	r4, r2, #20
 8000cca:	4a5a      	ldr	r2, [pc, #360]	; (8000e34 <__aeabi_ddiv+0x294>)
 8000ccc:	0038      	movs	r0, r7
 8000cce:	4013      	ands	r3, r2
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	4653      	mov	r3, sl
 8000cd4:	0064      	lsls	r4, r4, #1
 8000cd6:	07db      	lsls	r3, r3, #31
 8000cd8:	0864      	lsrs	r4, r4, #1
 8000cda:	431c      	orrs	r4, r3
 8000cdc:	0021      	movs	r1, r4
 8000cde:	b005      	add	sp, #20
 8000ce0:	bc3c      	pop	{r2, r3, r4, r5}
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	46a2      	mov	sl, r4
 8000ce8:	46ab      	mov	fp, r5
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	2201      	movs	r2, #1
 8000cee:	4252      	negs	r2, r2
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	1b1b      	subs	r3, r3, r4
 8000cf4:	2b38      	cmp	r3, #56	; 0x38
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_ddiv+0x15a>
 8000cf8:	e1ad      	b.n	8001056 <__aeabi_ddiv+0x4b6>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2700      	movs	r7, #0
 8000d00:	e7dc      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 8000d02:	465b      	mov	r3, fp
 8000d04:	4333      	orrs	r3, r6
 8000d06:	4699      	mov	r9, r3
 8000d08:	d05e      	beq.n	8000dc8 <__aeabi_ddiv+0x228>
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_ddiv+0x170>
 8000d0e:	e18a      	b.n	8001026 <__aeabi_ddiv+0x486>
 8000d10:	0030      	movs	r0, r6
 8000d12:	f001 fa9d 	bl	8002250 <__clzsi2>
 8000d16:	0003      	movs	r3, r0
 8000d18:	3b0b      	subs	r3, #11
 8000d1a:	2b1c      	cmp	r3, #28
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_ddiv+0x180>
 8000d1e:	e17b      	b.n	8001018 <__aeabi_ddiv+0x478>
 8000d20:	221d      	movs	r2, #29
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	465a      	mov	r2, fp
 8000d26:	0001      	movs	r1, r0
 8000d28:	40da      	lsrs	r2, r3
 8000d2a:	3908      	subs	r1, #8
 8000d2c:	408e      	lsls	r6, r1
 8000d2e:	0013      	movs	r3, r2
 8000d30:	465f      	mov	r7, fp
 8000d32:	4333      	orrs	r3, r6
 8000d34:	4699      	mov	r9, r3
 8000d36:	408f      	lsls	r7, r1
 8000d38:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <__aeabi_ddiv+0x298>)
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	1a1b      	subs	r3, r3, r0
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	e752      	b.n	8000bec <__aeabi_ddiv+0x4c>
 8000d46:	4641      	mov	r1, r8
 8000d48:	4653      	mov	r3, sl
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	493b      	ldr	r1, [pc, #236]	; (8000e3c <__aeabi_ddiv+0x29c>)
 8000d4e:	469b      	mov	fp, r3
 8000d50:	468c      	mov	ip, r1
 8000d52:	9b00      	ldr	r3, [sp, #0]
 8000d54:	4463      	add	r3, ip
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	465b      	mov	r3, fp
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d13b      	bne.n	8000dd6 <__aeabi_ddiv+0x236>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	2200      	movs	r2, #0
 8000d62:	431e      	orrs	r6, r3
 8000d64:	2102      	movs	r1, #2
 8000d66:	e761      	b.n	8000c2c <__aeabi_ddiv+0x8c>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	469b      	mov	fp, r3
 8000d6e:	d037      	beq.n	8000de0 <__aeabi_ddiv+0x240>
 8000d70:	4643      	mov	r3, r8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x1d8>
 8000d76:	e162      	b.n	800103e <__aeabi_ddiv+0x49e>
 8000d78:	4640      	mov	r0, r8
 8000d7a:	f001 fa69 	bl	8002250 <__clzsi2>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	3b0b      	subs	r3, #11
 8000d82:	2b1c      	cmp	r3, #28
 8000d84:	dd00      	ble.n	8000d88 <__aeabi_ddiv+0x1e8>
 8000d86:	e153      	b.n	8001030 <__aeabi_ddiv+0x490>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	4641      	mov	r1, r8
 8000d8c:	3a08      	subs	r2, #8
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	4688      	mov	r8, r1
 8000d92:	211d      	movs	r1, #29
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	4651      	mov	r1, sl
 8000d98:	40d9      	lsrs	r1, r3
 8000d9a:	000b      	movs	r3, r1
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	469b      	mov	fp, r3
 8000da2:	4653      	mov	r3, sl
 8000da4:	4093      	lsls	r3, r2
 8000da6:	001a      	movs	r2, r3
 8000da8:	9b00      	ldr	r3, [sp, #0]
 8000daa:	4925      	ldr	r1, [pc, #148]	; (8000e40 <__aeabi_ddiv+0x2a0>)
 8000dac:	469c      	mov	ip, r3
 8000dae:	4460      	add	r0, ip
 8000db0:	0003      	movs	r3, r0
 8000db2:	468c      	mov	ip, r1
 8000db4:	4463      	add	r3, ip
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e737      	b.n	8000c2c <__aeabi_ddiv+0x8c>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	46b1      	mov	r9, r6
 8000dc0:	9000      	str	r0, [sp, #0]
 8000dc2:	260c      	movs	r6, #12
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	e711      	b.n	8000bec <__aeabi_ddiv+0x4c>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	2604      	movs	r6, #4
 8000dd0:	2700      	movs	r7, #0
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	e70a      	b.n	8000bec <__aeabi_ddiv+0x4c>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	46c3      	mov	fp, r8
 8000dda:	431e      	orrs	r6, r3
 8000ddc:	2103      	movs	r1, #3
 8000dde:	e725      	b.n	8000c2c <__aeabi_ddiv+0x8c>
 8000de0:	3301      	adds	r3, #1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	2101      	movs	r1, #1
 8000de8:	e720      	b.n	8000c2c <__aeabi_ddiv+0x8c>
 8000dea:	2300      	movs	r3, #0
 8000dec:	469a      	mov	sl, r3
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	2700      	movs	r7, #0
 8000df2:	031b      	lsls	r3, r3, #12
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <__aeabi_ddiv+0x27c>)
 8000df6:	e761      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	031b      	lsls	r3, r3, #12
 8000dfe:	4219      	tst	r1, r3
 8000e00:	d100      	bne.n	8000e04 <__aeabi_ddiv+0x264>
 8000e02:	e0e2      	b.n	8000fca <__aeabi_ddiv+0x42a>
 8000e04:	4659      	mov	r1, fp
 8000e06:	4219      	tst	r1, r3
 8000e08:	d000      	beq.n	8000e0c <__aeabi_ddiv+0x26c>
 8000e0a:	e0de      	b.n	8000fca <__aeabi_ddiv+0x42a>
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	031b      	lsls	r3, r3, #12
 8000e10:	0017      	movs	r7, r2
 8000e12:	0b1b      	lsrs	r3, r3, #12
 8000e14:	46a2      	mov	sl, r4
 8000e16:	4a01      	ldr	r2, [pc, #4]	; (8000e1c <__aeabi_ddiv+0x27c>)
 8000e18:	e750      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	000007ff 	.word	0x000007ff
 8000e20:	fffffc01 	.word	0xfffffc01
 8000e24:	0800839c 	.word	0x0800839c
 8000e28:	000003ff 	.word	0x000003ff
 8000e2c:	feffffff 	.word	0xfeffffff
 8000e30:	000007fe 	.word	0x000007fe
 8000e34:	800fffff 	.word	0x800fffff
 8000e38:	fffffc0d 	.word	0xfffffc0d
 8000e3c:	fffff801 	.word	0xfffff801
 8000e40:	000003f3 	.word	0x000003f3
 8000e44:	45d9      	cmp	r9, fp
 8000e46:	d900      	bls.n	8000e4a <__aeabi_ddiv+0x2aa>
 8000e48:	e0cb      	b.n	8000fe2 <__aeabi_ddiv+0x442>
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_ddiv+0x2ae>
 8000e4c:	e0c6      	b.n	8000fdc <__aeabi_ddiv+0x43c>
 8000e4e:	003c      	movs	r4, r7
 8000e50:	4648      	mov	r0, r9
 8000e52:	2700      	movs	r7, #0
 8000e54:	9b00      	ldr	r3, [sp, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	465b      	mov	r3, fp
 8000e5c:	0e16      	lsrs	r6, r2, #24
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	431e      	orrs	r6, r3
 8000e62:	0213      	lsls	r3, r2, #8
 8000e64:	4698      	mov	r8, r3
 8000e66:	0433      	lsls	r3, r6, #16
 8000e68:	0c1b      	lsrs	r3, r3, #16
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	0c31      	lsrs	r1, r6, #16
 8000e6e:	9101      	str	r1, [sp, #4]
 8000e70:	f7ff f9e2 	bl	8000238 <__aeabi_uidivmod>
 8000e74:	464a      	mov	r2, r9
 8000e76:	4342      	muls	r2, r0
 8000e78:	040b      	lsls	r3, r1, #16
 8000e7a:	0c21      	lsrs	r1, r4, #16
 8000e7c:	0005      	movs	r5, r0
 8000e7e:	4319      	orrs	r1, r3
 8000e80:	428a      	cmp	r2, r1
 8000e82:	d907      	bls.n	8000e94 <__aeabi_ddiv+0x2f4>
 8000e84:	1989      	adds	r1, r1, r6
 8000e86:	3d01      	subs	r5, #1
 8000e88:	428e      	cmp	r6, r1
 8000e8a:	d803      	bhi.n	8000e94 <__aeabi_ddiv+0x2f4>
 8000e8c:	428a      	cmp	r2, r1
 8000e8e:	d901      	bls.n	8000e94 <__aeabi_ddiv+0x2f4>
 8000e90:	1e85      	subs	r5, r0, #2
 8000e92:	1989      	adds	r1, r1, r6
 8000e94:	1a88      	subs	r0, r1, r2
 8000e96:	9901      	ldr	r1, [sp, #4]
 8000e98:	f7ff f9ce 	bl	8000238 <__aeabi_uidivmod>
 8000e9c:	0409      	lsls	r1, r1, #16
 8000e9e:	468c      	mov	ip, r1
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	0421      	lsls	r1, r4, #16
 8000ea4:	4664      	mov	r4, ip
 8000ea6:	4342      	muls	r2, r0
 8000ea8:	0c09      	lsrs	r1, r1, #16
 8000eaa:	0003      	movs	r3, r0
 8000eac:	4321      	orrs	r1, r4
 8000eae:	428a      	cmp	r2, r1
 8000eb0:	d904      	bls.n	8000ebc <__aeabi_ddiv+0x31c>
 8000eb2:	1989      	adds	r1, r1, r6
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	428e      	cmp	r6, r1
 8000eb8:	d800      	bhi.n	8000ebc <__aeabi_ddiv+0x31c>
 8000eba:	e0f1      	b.n	80010a0 <__aeabi_ddiv+0x500>
 8000ebc:	042d      	lsls	r5, r5, #16
 8000ebe:	431d      	orrs	r5, r3
 8000ec0:	46ab      	mov	fp, r5
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	1a89      	subs	r1, r1, r2
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	0c28      	lsrs	r0, r5, #16
 8000eca:	0412      	lsls	r2, r2, #16
 8000ecc:	0c1d      	lsrs	r5, r3, #16
 8000ece:	465b      	mov	r3, fp
 8000ed0:	0c14      	lsrs	r4, r2, #16
 8000ed2:	0022      	movs	r2, r4
 8000ed4:	041b      	lsls	r3, r3, #16
 8000ed6:	0c1b      	lsrs	r3, r3, #16
 8000ed8:	435a      	muls	r2, r3
 8000eda:	9403      	str	r4, [sp, #12]
 8000edc:	436b      	muls	r3, r5
 8000ede:	4344      	muls	r4, r0
 8000ee0:	9502      	str	r5, [sp, #8]
 8000ee2:	4368      	muls	r0, r5
 8000ee4:	191b      	adds	r3, r3, r4
 8000ee6:	0c15      	lsrs	r5, r2, #16
 8000ee8:	18eb      	adds	r3, r5, r3
 8000eea:	429c      	cmp	r4, r3
 8000eec:	d903      	bls.n	8000ef6 <__aeabi_ddiv+0x356>
 8000eee:	2480      	movs	r4, #128	; 0x80
 8000ef0:	0264      	lsls	r4, r4, #9
 8000ef2:	46a4      	mov	ip, r4
 8000ef4:	4460      	add	r0, ip
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	0415      	lsls	r5, r2, #16
 8000efa:	041b      	lsls	r3, r3, #16
 8000efc:	0c2d      	lsrs	r5, r5, #16
 8000efe:	1820      	adds	r0, r4, r0
 8000f00:	195d      	adds	r5, r3, r5
 8000f02:	4281      	cmp	r1, r0
 8000f04:	d377      	bcc.n	8000ff6 <__aeabi_ddiv+0x456>
 8000f06:	d073      	beq.n	8000ff0 <__aeabi_ddiv+0x450>
 8000f08:	1a0c      	subs	r4, r1, r0
 8000f0a:	4aa2      	ldr	r2, [pc, #648]	; (8001194 <__aeabi_ddiv+0x5f4>)
 8000f0c:	1b7d      	subs	r5, r7, r5
 8000f0e:	42af      	cmp	r7, r5
 8000f10:	41bf      	sbcs	r7, r7
 8000f12:	4694      	mov	ip, r2
 8000f14:	9b00      	ldr	r3, [sp, #0]
 8000f16:	427f      	negs	r7, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	1be0      	subs	r0, r4, r7
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	4286      	cmp	r6, r0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x384>
 8000f22:	e0db      	b.n	80010dc <__aeabi_ddiv+0x53c>
 8000f24:	9901      	ldr	r1, [sp, #4]
 8000f26:	f7ff f987 	bl	8000238 <__aeabi_uidivmod>
 8000f2a:	464a      	mov	r2, r9
 8000f2c:	4342      	muls	r2, r0
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c29      	lsrs	r1, r5, #16
 8000f32:	0007      	movs	r7, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x3aa>
 8000f3a:	1989      	adds	r1, r1, r6
 8000f3c:	3f01      	subs	r7, #1
 8000f3e:	428e      	cmp	r6, r1
 8000f40:	d803      	bhi.n	8000f4a <__aeabi_ddiv+0x3aa>
 8000f42:	428a      	cmp	r2, r1
 8000f44:	d901      	bls.n	8000f4a <__aeabi_ddiv+0x3aa>
 8000f46:	1e87      	subs	r7, r0, #2
 8000f48:	1989      	adds	r1, r1, r6
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	9901      	ldr	r1, [sp, #4]
 8000f4e:	f7ff f973 	bl	8000238 <__aeabi_uidivmod>
 8000f52:	0409      	lsls	r1, r1, #16
 8000f54:	464a      	mov	r2, r9
 8000f56:	4689      	mov	r9, r1
 8000f58:	0429      	lsls	r1, r5, #16
 8000f5a:	464d      	mov	r5, r9
 8000f5c:	4342      	muls	r2, r0
 8000f5e:	0c09      	lsrs	r1, r1, #16
 8000f60:	0003      	movs	r3, r0
 8000f62:	4329      	orrs	r1, r5
 8000f64:	428a      	cmp	r2, r1
 8000f66:	d907      	bls.n	8000f78 <__aeabi_ddiv+0x3d8>
 8000f68:	1989      	adds	r1, r1, r6
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	428e      	cmp	r6, r1
 8000f6e:	d803      	bhi.n	8000f78 <__aeabi_ddiv+0x3d8>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	d901      	bls.n	8000f78 <__aeabi_ddiv+0x3d8>
 8000f74:	1e83      	subs	r3, r0, #2
 8000f76:	1989      	adds	r1, r1, r6
 8000f78:	043f      	lsls	r7, r7, #16
 8000f7a:	1a89      	subs	r1, r1, r2
 8000f7c:	003a      	movs	r2, r7
 8000f7e:	9f03      	ldr	r7, [sp, #12]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	0038      	movs	r0, r7
 8000f84:	0413      	lsls	r3, r2, #16
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	4358      	muls	r0, r3
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	9802      	ldr	r0, [sp, #8]
 8000f8e:	0c15      	lsrs	r5, r2, #16
 8000f90:	436f      	muls	r7, r5
 8000f92:	4343      	muls	r3, r0
 8000f94:	4345      	muls	r5, r0
 8000f96:	4648      	mov	r0, r9
 8000f98:	0c00      	lsrs	r0, r0, #16
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	19db      	adds	r3, r3, r7
 8000f9e:	4463      	add	r3, ip
 8000fa0:	429f      	cmp	r7, r3
 8000fa2:	d903      	bls.n	8000fac <__aeabi_ddiv+0x40c>
 8000fa4:	2080      	movs	r0, #128	; 0x80
 8000fa6:	0240      	lsls	r0, r0, #9
 8000fa8:	4684      	mov	ip, r0
 8000faa:	4465      	add	r5, ip
 8000fac:	4648      	mov	r0, r9
 8000fae:	0c1f      	lsrs	r7, r3, #16
 8000fb0:	0400      	lsls	r0, r0, #16
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	0c00      	lsrs	r0, r0, #16
 8000fb6:	197d      	adds	r5, r7, r5
 8000fb8:	1818      	adds	r0, r3, r0
 8000fba:	42a9      	cmp	r1, r5
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x420>
 8000fbe:	e084      	b.n	80010ca <__aeabi_ddiv+0x52a>
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_ddiv+0x424>
 8000fc2:	e07f      	b.n	80010c4 <__aeabi_ddiv+0x524>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	e657      	b.n	8000c7a <__aeabi_ddiv+0xda>
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	464a      	mov	r2, r9
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	0b1b      	lsrs	r3, r3, #12
 8000fd6:	46aa      	mov	sl, r5
 8000fd8:	4a6f      	ldr	r2, [pc, #444]	; (8001198 <__aeabi_ddiv+0x5f8>)
 8000fda:	e66f      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 8000fdc:	42ba      	cmp	r2, r7
 8000fde:	d900      	bls.n	8000fe2 <__aeabi_ddiv+0x442>
 8000fe0:	e735      	b.n	8000e4e <__aeabi_ddiv+0x2ae>
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	07dc      	lsls	r4, r3, #31
 8000fe6:	0858      	lsrs	r0, r3, #1
 8000fe8:	087b      	lsrs	r3, r7, #1
 8000fea:	431c      	orrs	r4, r3
 8000fec:	07ff      	lsls	r7, r7, #31
 8000fee:	e734      	b.n	8000e5a <__aeabi_ddiv+0x2ba>
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	42af      	cmp	r7, r5
 8000ff4:	d289      	bcs.n	8000f0a <__aeabi_ddiv+0x36a>
 8000ff6:	4447      	add	r7, r8
 8000ff8:	4547      	cmp	r7, r8
 8000ffa:	41a4      	sbcs	r4, r4
 8000ffc:	465b      	mov	r3, fp
 8000ffe:	4264      	negs	r4, r4
 8001000:	19a4      	adds	r4, r4, r6
 8001002:	1864      	adds	r4, r4, r1
 8001004:	3b01      	subs	r3, #1
 8001006:	42a6      	cmp	r6, r4
 8001008:	d21e      	bcs.n	8001048 <__aeabi_ddiv+0x4a8>
 800100a:	42a0      	cmp	r0, r4
 800100c:	d86d      	bhi.n	80010ea <__aeabi_ddiv+0x54a>
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x472>
 8001010:	e0b6      	b.n	8001180 <__aeabi_ddiv+0x5e0>
 8001012:	1a24      	subs	r4, r4, r0
 8001014:	469b      	mov	fp, r3
 8001016:	e778      	b.n	8000f0a <__aeabi_ddiv+0x36a>
 8001018:	0003      	movs	r3, r0
 800101a:	465a      	mov	r2, fp
 800101c:	3b28      	subs	r3, #40	; 0x28
 800101e:	409a      	lsls	r2, r3
 8001020:	2700      	movs	r7, #0
 8001022:	4691      	mov	r9, r2
 8001024:	e688      	b.n	8000d38 <__aeabi_ddiv+0x198>
 8001026:	4658      	mov	r0, fp
 8001028:	f001 f912 	bl	8002250 <__clzsi2>
 800102c:	3020      	adds	r0, #32
 800102e:	e672      	b.n	8000d16 <__aeabi_ddiv+0x176>
 8001030:	0003      	movs	r3, r0
 8001032:	4652      	mov	r2, sl
 8001034:	3b28      	subs	r3, #40	; 0x28
 8001036:	409a      	lsls	r2, r3
 8001038:	4693      	mov	fp, r2
 800103a:	2200      	movs	r2, #0
 800103c:	e6b4      	b.n	8000da8 <__aeabi_ddiv+0x208>
 800103e:	4650      	mov	r0, sl
 8001040:	f001 f906 	bl	8002250 <__clzsi2>
 8001044:	3020      	adds	r0, #32
 8001046:	e69a      	b.n	8000d7e <__aeabi_ddiv+0x1de>
 8001048:	42a6      	cmp	r6, r4
 800104a:	d1e2      	bne.n	8001012 <__aeabi_ddiv+0x472>
 800104c:	45b8      	cmp	r8, r7
 800104e:	d9dc      	bls.n	800100a <__aeabi_ddiv+0x46a>
 8001050:	1a34      	subs	r4, r6, r0
 8001052:	469b      	mov	fp, r3
 8001054:	e759      	b.n	8000f0a <__aeabi_ddiv+0x36a>
 8001056:	2b1f      	cmp	r3, #31
 8001058:	dc65      	bgt.n	8001126 <__aeabi_ddiv+0x586>
 800105a:	4c50      	ldr	r4, [pc, #320]	; (800119c <__aeabi_ddiv+0x5fc>)
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	46a4      	mov	ip, r4
 8001060:	465c      	mov	r4, fp
 8001062:	4461      	add	r1, ip
 8001064:	0008      	movs	r0, r1
 8001066:	408c      	lsls	r4, r1
 8001068:	0011      	movs	r1, r2
 800106a:	4082      	lsls	r2, r0
 800106c:	40d9      	lsrs	r1, r3
 800106e:	1e50      	subs	r0, r2, #1
 8001070:	4182      	sbcs	r2, r0
 8001072:	430c      	orrs	r4, r1
 8001074:	4314      	orrs	r4, r2
 8001076:	465a      	mov	r2, fp
 8001078:	40da      	lsrs	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	0762      	lsls	r2, r4, #29
 800107e:	d009      	beq.n	8001094 <__aeabi_ddiv+0x4f4>
 8001080:	220f      	movs	r2, #15
 8001082:	4022      	ands	r2, r4
 8001084:	2a04      	cmp	r2, #4
 8001086:	d005      	beq.n	8001094 <__aeabi_ddiv+0x4f4>
 8001088:	0022      	movs	r2, r4
 800108a:	1d14      	adds	r4, r2, #4
 800108c:	4294      	cmp	r4, r2
 800108e:	4189      	sbcs	r1, r1
 8001090:	4249      	negs	r1, r1
 8001092:	185b      	adds	r3, r3, r1
 8001094:	021a      	lsls	r2, r3, #8
 8001096:	d562      	bpl.n	800115e <__aeabi_ddiv+0x5be>
 8001098:	2201      	movs	r2, #1
 800109a:	2300      	movs	r3, #0
 800109c:	2700      	movs	r7, #0
 800109e:	e60d      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	d800      	bhi.n	80010a6 <__aeabi_ddiv+0x506>
 80010a4:	e70a      	b.n	8000ebc <__aeabi_ddiv+0x31c>
 80010a6:	1e83      	subs	r3, r0, #2
 80010a8:	1989      	adds	r1, r1, r6
 80010aa:	e707      	b.n	8000ebc <__aeabi_ddiv+0x31c>
 80010ac:	230f      	movs	r3, #15
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x516>
 80010b4:	e5e6      	b.n	8000c84 <__aeabi_ddiv+0xe4>
 80010b6:	1d17      	adds	r7, r2, #4
 80010b8:	4297      	cmp	r7, r2
 80010ba:	4192      	sbcs	r2, r2
 80010bc:	4253      	negs	r3, r2
 80010be:	449b      	add	fp, r3
 80010c0:	08fa      	lsrs	r2, r7, #3
 80010c2:	e5e0      	b.n	8000c86 <__aeabi_ddiv+0xe6>
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_ddiv+0x52a>
 80010c8:	e5d7      	b.n	8000c7a <__aeabi_ddiv+0xda>
 80010ca:	1871      	adds	r1, r6, r1
 80010cc:	1e53      	subs	r3, r2, #1
 80010ce:	42b1      	cmp	r1, r6
 80010d0:	d327      	bcc.n	8001122 <__aeabi_ddiv+0x582>
 80010d2:	42a9      	cmp	r1, r5
 80010d4:	d315      	bcc.n	8001102 <__aeabi_ddiv+0x562>
 80010d6:	d058      	beq.n	800118a <__aeabi_ddiv+0x5ea>
 80010d8:	001a      	movs	r2, r3
 80010da:	e773      	b.n	8000fc4 <__aeabi_ddiv+0x424>
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_ddiv+0x542>
 80010e0:	e604      	b.n	8000cec <__aeabi_ddiv+0x14c>
 80010e2:	2301      	movs	r3, #1
 80010e4:	2200      	movs	r2, #0
 80010e6:	449b      	add	fp, r3
 80010e8:	e5cd      	b.n	8000c86 <__aeabi_ddiv+0xe6>
 80010ea:	2302      	movs	r3, #2
 80010ec:	4447      	add	r7, r8
 80010ee:	4547      	cmp	r7, r8
 80010f0:	4189      	sbcs	r1, r1
 80010f2:	425b      	negs	r3, r3
 80010f4:	469c      	mov	ip, r3
 80010f6:	4249      	negs	r1, r1
 80010f8:	1989      	adds	r1, r1, r6
 80010fa:	190c      	adds	r4, r1, r4
 80010fc:	44e3      	add	fp, ip
 80010fe:	1a24      	subs	r4, r4, r0
 8001100:	e703      	b.n	8000f0a <__aeabi_ddiv+0x36a>
 8001102:	4643      	mov	r3, r8
 8001104:	005f      	lsls	r7, r3, #1
 8001106:	4547      	cmp	r7, r8
 8001108:	419b      	sbcs	r3, r3
 800110a:	46b8      	mov	r8, r7
 800110c:	425b      	negs	r3, r3
 800110e:	199e      	adds	r6, r3, r6
 8001110:	3a02      	subs	r2, #2
 8001112:	1989      	adds	r1, r1, r6
 8001114:	42a9      	cmp	r1, r5
 8001116:	d000      	beq.n	800111a <__aeabi_ddiv+0x57a>
 8001118:	e754      	b.n	8000fc4 <__aeabi_ddiv+0x424>
 800111a:	4540      	cmp	r0, r8
 800111c:	d000      	beq.n	8001120 <__aeabi_ddiv+0x580>
 800111e:	e751      	b.n	8000fc4 <__aeabi_ddiv+0x424>
 8001120:	e5ab      	b.n	8000c7a <__aeabi_ddiv+0xda>
 8001122:	001a      	movs	r2, r3
 8001124:	e7f6      	b.n	8001114 <__aeabi_ddiv+0x574>
 8001126:	211f      	movs	r1, #31
 8001128:	465f      	mov	r7, fp
 800112a:	4249      	negs	r1, r1
 800112c:	1b0c      	subs	r4, r1, r4
 800112e:	40e7      	lsrs	r7, r4
 8001130:	2b20      	cmp	r3, #32
 8001132:	d007      	beq.n	8001144 <__aeabi_ddiv+0x5a4>
 8001134:	491a      	ldr	r1, [pc, #104]	; (80011a0 <__aeabi_ddiv+0x600>)
 8001136:	9b00      	ldr	r3, [sp, #0]
 8001138:	468c      	mov	ip, r1
 800113a:	4463      	add	r3, ip
 800113c:	0018      	movs	r0, r3
 800113e:	465b      	mov	r3, fp
 8001140:	4083      	lsls	r3, r0
 8001142:	431a      	orrs	r2, r3
 8001144:	1e50      	subs	r0, r2, #1
 8001146:	4182      	sbcs	r2, r0
 8001148:	433a      	orrs	r2, r7
 800114a:	2707      	movs	r7, #7
 800114c:	2300      	movs	r3, #0
 800114e:	4017      	ands	r7, r2
 8001150:	d009      	beq.n	8001166 <__aeabi_ddiv+0x5c6>
 8001152:	210f      	movs	r1, #15
 8001154:	2300      	movs	r3, #0
 8001156:	4011      	ands	r1, r2
 8001158:	0014      	movs	r4, r2
 800115a:	2904      	cmp	r1, #4
 800115c:	d195      	bne.n	800108a <__aeabi_ddiv+0x4ea>
 800115e:	0022      	movs	r2, r4
 8001160:	075f      	lsls	r7, r3, #29
 8001162:	025b      	lsls	r3, r3, #9
 8001164:	0b1b      	lsrs	r3, r3, #12
 8001166:	08d2      	lsrs	r2, r2, #3
 8001168:	4317      	orrs	r7, r2
 800116a:	2200      	movs	r2, #0
 800116c:	e5a6      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	4659      	mov	r1, fp
 8001172:	031b      	lsls	r3, r3, #12
 8001174:	430b      	orrs	r3, r1
 8001176:	031b      	lsls	r3, r3, #12
 8001178:	0017      	movs	r7, r2
 800117a:	0b1b      	lsrs	r3, r3, #12
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <__aeabi_ddiv+0x5f8>)
 800117e:	e59d      	b.n	8000cbc <__aeabi_ddiv+0x11c>
 8001180:	42bd      	cmp	r5, r7
 8001182:	d8b2      	bhi.n	80010ea <__aeabi_ddiv+0x54a>
 8001184:	469b      	mov	fp, r3
 8001186:	2400      	movs	r4, #0
 8001188:	e6bf      	b.n	8000f0a <__aeabi_ddiv+0x36a>
 800118a:	4580      	cmp	r8, r0
 800118c:	d3b9      	bcc.n	8001102 <__aeabi_ddiv+0x562>
 800118e:	001a      	movs	r2, r3
 8001190:	e7c3      	b.n	800111a <__aeabi_ddiv+0x57a>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	000003ff 	.word	0x000003ff
 8001198:	000007ff 	.word	0x000007ff
 800119c:	0000041e 	.word	0x0000041e
 80011a0:	0000043e 	.word	0x0000043e

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	464f      	mov	r7, r9
 80011a8:	4646      	mov	r6, r8
 80011aa:	46d6      	mov	lr, sl
 80011ac:	4684      	mov	ip, r0
 80011ae:	b5c0      	push	{r6, r7, lr}
 80011b0:	4680      	mov	r8, r0
 80011b2:	4e19      	ldr	r6, [pc, #100]	; (8001218 <__eqdf2+0x74>)
 80011b4:	0318      	lsls	r0, r3, #12
 80011b6:	030f      	lsls	r7, r1, #12
 80011b8:	004d      	lsls	r5, r1, #1
 80011ba:	0b00      	lsrs	r0, r0, #12
 80011bc:	005c      	lsls	r4, r3, #1
 80011be:	4682      	mov	sl, r0
 80011c0:	0b3f      	lsrs	r7, r7, #12
 80011c2:	0d6d      	lsrs	r5, r5, #21
 80011c4:	0fc9      	lsrs	r1, r1, #31
 80011c6:	4691      	mov	r9, r2
 80011c8:	0d64      	lsrs	r4, r4, #21
 80011ca:	0fdb      	lsrs	r3, r3, #31
 80011cc:	2001      	movs	r0, #1
 80011ce:	42b5      	cmp	r5, r6
 80011d0:	d00a      	beq.n	80011e8 <__eqdf2+0x44>
 80011d2:	42b4      	cmp	r4, r6
 80011d4:	d003      	beq.n	80011de <__eqdf2+0x3a>
 80011d6:	42a5      	cmp	r5, r4
 80011d8:	d101      	bne.n	80011de <__eqdf2+0x3a>
 80011da:	4557      	cmp	r7, sl
 80011dc:	d00c      	beq.n	80011f8 <__eqdf2+0x54>
 80011de:	bc1c      	pop	{r2, r3, r4}
 80011e0:	4690      	mov	r8, r2
 80011e2:	4699      	mov	r9, r3
 80011e4:	46a2      	mov	sl, r4
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e8:	4666      	mov	r6, ip
 80011ea:	433e      	orrs	r6, r7
 80011ec:	d1f7      	bne.n	80011de <__eqdf2+0x3a>
 80011ee:	42ac      	cmp	r4, r5
 80011f0:	d1f5      	bne.n	80011de <__eqdf2+0x3a>
 80011f2:	4654      	mov	r4, sl
 80011f4:	4314      	orrs	r4, r2
 80011f6:	d1f2      	bne.n	80011de <__eqdf2+0x3a>
 80011f8:	2001      	movs	r0, #1
 80011fa:	45c8      	cmp	r8, r9
 80011fc:	d1ef      	bne.n	80011de <__eqdf2+0x3a>
 80011fe:	4299      	cmp	r1, r3
 8001200:	d007      	beq.n	8001212 <__eqdf2+0x6e>
 8001202:	2d00      	cmp	r5, #0
 8001204:	d1eb      	bne.n	80011de <__eqdf2+0x3a>
 8001206:	4663      	mov	r3, ip
 8001208:	431f      	orrs	r7, r3
 800120a:	0038      	movs	r0, r7
 800120c:	1e47      	subs	r7, r0, #1
 800120e:	41b8      	sbcs	r0, r7
 8001210:	e7e5      	b.n	80011de <__eqdf2+0x3a>
 8001212:	2000      	movs	r0, #0
 8001214:	e7e3      	b.n	80011de <__eqdf2+0x3a>
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	000007ff 	.word	0x000007ff

0800121c <__gedf2>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	464f      	mov	r7, r9
 8001220:	4646      	mov	r6, r8
 8001222:	46d6      	mov	lr, sl
 8001224:	004d      	lsls	r5, r1, #1
 8001226:	b5c0      	push	{r6, r7, lr}
 8001228:	030e      	lsls	r6, r1, #12
 800122a:	0fc9      	lsrs	r1, r1, #31
 800122c:	468a      	mov	sl, r1
 800122e:	492c      	ldr	r1, [pc, #176]	; (80012e0 <__gedf2+0xc4>)
 8001230:	031f      	lsls	r7, r3, #12
 8001232:	005c      	lsls	r4, r3, #1
 8001234:	4680      	mov	r8, r0
 8001236:	0b36      	lsrs	r6, r6, #12
 8001238:	0d6d      	lsrs	r5, r5, #21
 800123a:	4691      	mov	r9, r2
 800123c:	0b3f      	lsrs	r7, r7, #12
 800123e:	0d64      	lsrs	r4, r4, #21
 8001240:	0fdb      	lsrs	r3, r3, #31
 8001242:	428d      	cmp	r5, r1
 8001244:	d01e      	beq.n	8001284 <__gedf2+0x68>
 8001246:	428c      	cmp	r4, r1
 8001248:	d016      	beq.n	8001278 <__gedf2+0x5c>
 800124a:	2d00      	cmp	r5, #0
 800124c:	d11e      	bne.n	800128c <__gedf2+0x70>
 800124e:	4330      	orrs	r0, r6
 8001250:	4684      	mov	ip, r0
 8001252:	2c00      	cmp	r4, #0
 8001254:	d101      	bne.n	800125a <__gedf2+0x3e>
 8001256:	433a      	orrs	r2, r7
 8001258:	d023      	beq.n	80012a2 <__gedf2+0x86>
 800125a:	4662      	mov	r2, ip
 800125c:	2a00      	cmp	r2, #0
 800125e:	d01a      	beq.n	8001296 <__gedf2+0x7a>
 8001260:	459a      	cmp	sl, r3
 8001262:	d029      	beq.n	80012b8 <__gedf2+0x9c>
 8001264:	4651      	mov	r1, sl
 8001266:	2002      	movs	r0, #2
 8001268:	3901      	subs	r1, #1
 800126a:	4008      	ands	r0, r1
 800126c:	3801      	subs	r0, #1
 800126e:	bc1c      	pop	{r2, r3, r4}
 8001270:	4690      	mov	r8, r2
 8001272:	4699      	mov	r9, r3
 8001274:	46a2      	mov	sl, r4
 8001276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001278:	0039      	movs	r1, r7
 800127a:	4311      	orrs	r1, r2
 800127c:	d0e5      	beq.n	800124a <__gedf2+0x2e>
 800127e:	2002      	movs	r0, #2
 8001280:	4240      	negs	r0, r0
 8001282:	e7f4      	b.n	800126e <__gedf2+0x52>
 8001284:	4330      	orrs	r0, r6
 8001286:	d1fa      	bne.n	800127e <__gedf2+0x62>
 8001288:	42ac      	cmp	r4, r5
 800128a:	d00f      	beq.n	80012ac <__gedf2+0x90>
 800128c:	2c00      	cmp	r4, #0
 800128e:	d10f      	bne.n	80012b0 <__gedf2+0x94>
 8001290:	433a      	orrs	r2, r7
 8001292:	d0e7      	beq.n	8001264 <__gedf2+0x48>
 8001294:	e00c      	b.n	80012b0 <__gedf2+0x94>
 8001296:	2201      	movs	r2, #1
 8001298:	3b01      	subs	r3, #1
 800129a:	4393      	bics	r3, r2
 800129c:	0018      	movs	r0, r3
 800129e:	3001      	adds	r0, #1
 80012a0:	e7e5      	b.n	800126e <__gedf2+0x52>
 80012a2:	4663      	mov	r3, ip
 80012a4:	2000      	movs	r0, #0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0e1      	beq.n	800126e <__gedf2+0x52>
 80012aa:	e7db      	b.n	8001264 <__gedf2+0x48>
 80012ac:	433a      	orrs	r2, r7
 80012ae:	d1e6      	bne.n	800127e <__gedf2+0x62>
 80012b0:	459a      	cmp	sl, r3
 80012b2:	d1d7      	bne.n	8001264 <__gedf2+0x48>
 80012b4:	42a5      	cmp	r5, r4
 80012b6:	dcd5      	bgt.n	8001264 <__gedf2+0x48>
 80012b8:	42a5      	cmp	r5, r4
 80012ba:	db05      	blt.n	80012c8 <__gedf2+0xac>
 80012bc:	42be      	cmp	r6, r7
 80012be:	d8d1      	bhi.n	8001264 <__gedf2+0x48>
 80012c0:	d008      	beq.n	80012d4 <__gedf2+0xb8>
 80012c2:	2000      	movs	r0, #0
 80012c4:	42be      	cmp	r6, r7
 80012c6:	d2d2      	bcs.n	800126e <__gedf2+0x52>
 80012c8:	4650      	mov	r0, sl
 80012ca:	2301      	movs	r3, #1
 80012cc:	3801      	subs	r0, #1
 80012ce:	4398      	bics	r0, r3
 80012d0:	3001      	adds	r0, #1
 80012d2:	e7cc      	b.n	800126e <__gedf2+0x52>
 80012d4:	45c8      	cmp	r8, r9
 80012d6:	d8c5      	bhi.n	8001264 <__gedf2+0x48>
 80012d8:	2000      	movs	r0, #0
 80012da:	45c8      	cmp	r8, r9
 80012dc:	d3f4      	bcc.n	80012c8 <__gedf2+0xac>
 80012de:	e7c6      	b.n	800126e <__gedf2+0x52>
 80012e0:	000007ff 	.word	0x000007ff

080012e4 <__ledf2>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464f      	mov	r7, r9
 80012e8:	4646      	mov	r6, r8
 80012ea:	46d6      	mov	lr, sl
 80012ec:	004d      	lsls	r5, r1, #1
 80012ee:	b5c0      	push	{r6, r7, lr}
 80012f0:	030e      	lsls	r6, r1, #12
 80012f2:	0fc9      	lsrs	r1, r1, #31
 80012f4:	468a      	mov	sl, r1
 80012f6:	492e      	ldr	r1, [pc, #184]	; (80013b0 <__ledf2+0xcc>)
 80012f8:	031f      	lsls	r7, r3, #12
 80012fa:	005c      	lsls	r4, r3, #1
 80012fc:	4680      	mov	r8, r0
 80012fe:	0b36      	lsrs	r6, r6, #12
 8001300:	0d6d      	lsrs	r5, r5, #21
 8001302:	4691      	mov	r9, r2
 8001304:	0b3f      	lsrs	r7, r7, #12
 8001306:	0d64      	lsrs	r4, r4, #21
 8001308:	0fdb      	lsrs	r3, r3, #31
 800130a:	428d      	cmp	r5, r1
 800130c:	d018      	beq.n	8001340 <__ledf2+0x5c>
 800130e:	428c      	cmp	r4, r1
 8001310:	d011      	beq.n	8001336 <__ledf2+0x52>
 8001312:	2d00      	cmp	r5, #0
 8001314:	d118      	bne.n	8001348 <__ledf2+0x64>
 8001316:	4330      	orrs	r0, r6
 8001318:	4684      	mov	ip, r0
 800131a:	2c00      	cmp	r4, #0
 800131c:	d11e      	bne.n	800135c <__ledf2+0x78>
 800131e:	433a      	orrs	r2, r7
 8001320:	d11c      	bne.n	800135c <__ledf2+0x78>
 8001322:	4663      	mov	r3, ip
 8001324:	2000      	movs	r0, #0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <__ledf2+0xa8>
 800132a:	4651      	mov	r1, sl
 800132c:	2002      	movs	r0, #2
 800132e:	3901      	subs	r1, #1
 8001330:	4008      	ands	r0, r1
 8001332:	3801      	subs	r0, #1
 8001334:	e02a      	b.n	800138c <__ledf2+0xa8>
 8001336:	0039      	movs	r1, r7
 8001338:	4311      	orrs	r1, r2
 800133a:	d0ea      	beq.n	8001312 <__ledf2+0x2e>
 800133c:	2002      	movs	r0, #2
 800133e:	e025      	b.n	800138c <__ledf2+0xa8>
 8001340:	4330      	orrs	r0, r6
 8001342:	d1fb      	bne.n	800133c <__ledf2+0x58>
 8001344:	42ac      	cmp	r4, r5
 8001346:	d026      	beq.n	8001396 <__ledf2+0xb2>
 8001348:	2c00      	cmp	r4, #0
 800134a:	d126      	bne.n	800139a <__ledf2+0xb6>
 800134c:	433a      	orrs	r2, r7
 800134e:	d124      	bne.n	800139a <__ledf2+0xb6>
 8001350:	4651      	mov	r1, sl
 8001352:	2002      	movs	r0, #2
 8001354:	3901      	subs	r1, #1
 8001356:	4008      	ands	r0, r1
 8001358:	3801      	subs	r0, #1
 800135a:	e017      	b.n	800138c <__ledf2+0xa8>
 800135c:	4662      	mov	r2, ip
 800135e:	2a00      	cmp	r2, #0
 8001360:	d00f      	beq.n	8001382 <__ledf2+0x9e>
 8001362:	459a      	cmp	sl, r3
 8001364:	d1e1      	bne.n	800132a <__ledf2+0x46>
 8001366:	42a5      	cmp	r5, r4
 8001368:	db05      	blt.n	8001376 <__ledf2+0x92>
 800136a:	42be      	cmp	r6, r7
 800136c:	d8dd      	bhi.n	800132a <__ledf2+0x46>
 800136e:	d019      	beq.n	80013a4 <__ledf2+0xc0>
 8001370:	2000      	movs	r0, #0
 8001372:	42be      	cmp	r6, r7
 8001374:	d20a      	bcs.n	800138c <__ledf2+0xa8>
 8001376:	4650      	mov	r0, sl
 8001378:	2301      	movs	r3, #1
 800137a:	3801      	subs	r0, #1
 800137c:	4398      	bics	r0, r3
 800137e:	3001      	adds	r0, #1
 8001380:	e004      	b.n	800138c <__ledf2+0xa8>
 8001382:	2201      	movs	r2, #1
 8001384:	3b01      	subs	r3, #1
 8001386:	4393      	bics	r3, r2
 8001388:	0018      	movs	r0, r3
 800138a:	3001      	adds	r0, #1
 800138c:	bc1c      	pop	{r2, r3, r4}
 800138e:	4690      	mov	r8, r2
 8001390:	4699      	mov	r9, r3
 8001392:	46a2      	mov	sl, r4
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	433a      	orrs	r2, r7
 8001398:	d1d0      	bne.n	800133c <__ledf2+0x58>
 800139a:	459a      	cmp	sl, r3
 800139c:	d1c5      	bne.n	800132a <__ledf2+0x46>
 800139e:	42a5      	cmp	r5, r4
 80013a0:	dcc3      	bgt.n	800132a <__ledf2+0x46>
 80013a2:	e7e0      	b.n	8001366 <__ledf2+0x82>
 80013a4:	45c8      	cmp	r8, r9
 80013a6:	d8c0      	bhi.n	800132a <__ledf2+0x46>
 80013a8:	2000      	movs	r0, #0
 80013aa:	45c8      	cmp	r8, r9
 80013ac:	d3e3      	bcc.n	8001376 <__ledf2+0x92>
 80013ae:	e7ed      	b.n	800138c <__ledf2+0xa8>
 80013b0:	000007ff 	.word	0x000007ff

080013b4 <__aeabi_dmul>:
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	4657      	mov	r7, sl
 80013b8:	46de      	mov	lr, fp
 80013ba:	464e      	mov	r6, r9
 80013bc:	4645      	mov	r5, r8
 80013be:	b5e0      	push	{r5, r6, r7, lr}
 80013c0:	4683      	mov	fp, r0
 80013c2:	0006      	movs	r6, r0
 80013c4:	030f      	lsls	r7, r1, #12
 80013c6:	0048      	lsls	r0, r1, #1
 80013c8:	b087      	sub	sp, #28
 80013ca:	4692      	mov	sl, r2
 80013cc:	001d      	movs	r5, r3
 80013ce:	0b3f      	lsrs	r7, r7, #12
 80013d0:	0d40      	lsrs	r0, r0, #21
 80013d2:	0fcc      	lsrs	r4, r1, #31
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0x26>
 80013d8:	e06f      	b.n	80014ba <__aeabi_dmul+0x106>
 80013da:	4bde      	ldr	r3, [pc, #888]	; (8001754 <__aeabi_dmul+0x3a0>)
 80013dc:	4298      	cmp	r0, r3
 80013de:	d038      	beq.n	8001452 <__aeabi_dmul+0x9e>
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	00ff      	lsls	r7, r7, #3
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	431f      	orrs	r7, r3
 80013e8:	0f73      	lsrs	r3, r6, #29
 80013ea:	433b      	orrs	r3, r7
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	4bda      	ldr	r3, [pc, #872]	; (8001758 <__aeabi_dmul+0x3a4>)
 80013f0:	2700      	movs	r7, #0
 80013f2:	4699      	mov	r9, r3
 80013f4:	2300      	movs	r3, #0
 80013f6:	469b      	mov	fp, r3
 80013f8:	00f6      	lsls	r6, r6, #3
 80013fa:	4481      	add	r9, r0
 80013fc:	032b      	lsls	r3, r5, #12
 80013fe:	0069      	lsls	r1, r5, #1
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	4652      	mov	r2, sl
 8001404:	4698      	mov	r8, r3
 8001406:	0d49      	lsrs	r1, r1, #21
 8001408:	0fed      	lsrs	r5, r5, #31
 800140a:	2900      	cmp	r1, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dmul+0x5c>
 800140e:	e085      	b.n	800151c <__aeabi_dmul+0x168>
 8001410:	4bd0      	ldr	r3, [pc, #832]	; (8001754 <__aeabi_dmul+0x3a0>)
 8001412:	4299      	cmp	r1, r3
 8001414:	d100      	bne.n	8001418 <__aeabi_dmul+0x64>
 8001416:	e073      	b.n	8001500 <__aeabi_dmul+0x14c>
 8001418:	4643      	mov	r3, r8
 800141a:	00da      	lsls	r2, r3, #3
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	4313      	orrs	r3, r2
 8001422:	4652      	mov	r2, sl
 8001424:	48cc      	ldr	r0, [pc, #816]	; (8001758 <__aeabi_dmul+0x3a4>)
 8001426:	0f52      	lsrs	r2, r2, #29
 8001428:	4684      	mov	ip, r0
 800142a:	4313      	orrs	r3, r2
 800142c:	4652      	mov	r2, sl
 800142e:	2000      	movs	r0, #0
 8001430:	4461      	add	r1, ip
 8001432:	00d2      	lsls	r2, r2, #3
 8001434:	4489      	add	r9, r1
 8001436:	0021      	movs	r1, r4
 8001438:	4069      	eors	r1, r5
 800143a:	9100      	str	r1, [sp, #0]
 800143c:	468c      	mov	ip, r1
 800143e:	2101      	movs	r1, #1
 8001440:	4449      	add	r1, r9
 8001442:	468a      	mov	sl, r1
 8001444:	2f0f      	cmp	r7, #15
 8001446:	d900      	bls.n	800144a <__aeabi_dmul+0x96>
 8001448:	e090      	b.n	800156c <__aeabi_dmul+0x1b8>
 800144a:	49c4      	ldr	r1, [pc, #784]	; (800175c <__aeabi_dmul+0x3a8>)
 800144c:	00bf      	lsls	r7, r7, #2
 800144e:	59cf      	ldr	r7, [r1, r7]
 8001450:	46bf      	mov	pc, r7
 8001452:	465b      	mov	r3, fp
 8001454:	433b      	orrs	r3, r7
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	d000      	beq.n	800145c <__aeabi_dmul+0xa8>
 800145a:	e16a      	b.n	8001732 <__aeabi_dmul+0x37e>
 800145c:	2302      	movs	r3, #2
 800145e:	2708      	movs	r7, #8
 8001460:	2600      	movs	r6, #0
 8001462:	4681      	mov	r9, r0
 8001464:	469b      	mov	fp, r3
 8001466:	e7c9      	b.n	80013fc <__aeabi_dmul+0x48>
 8001468:	0032      	movs	r2, r6
 800146a:	4658      	mov	r0, fp
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	4661      	mov	r1, ip
 8001470:	9100      	str	r1, [sp, #0]
 8001472:	2802      	cmp	r0, #2
 8001474:	d100      	bne.n	8001478 <__aeabi_dmul+0xc4>
 8001476:	e075      	b.n	8001564 <__aeabi_dmul+0x1b0>
 8001478:	2803      	cmp	r0, #3
 800147a:	d100      	bne.n	800147e <__aeabi_dmul+0xca>
 800147c:	e1fe      	b.n	800187c <__aeabi_dmul+0x4c8>
 800147e:	2801      	cmp	r0, #1
 8001480:	d000      	beq.n	8001484 <__aeabi_dmul+0xd0>
 8001482:	e12c      	b.n	80016de <__aeabi_dmul+0x32a>
 8001484:	2300      	movs	r3, #0
 8001486:	2700      	movs	r7, #0
 8001488:	2600      	movs	r6, #0
 800148a:	2500      	movs	r5, #0
 800148c:	033f      	lsls	r7, r7, #12
 800148e:	0d2a      	lsrs	r2, r5, #20
 8001490:	0b3f      	lsrs	r7, r7, #12
 8001492:	48b3      	ldr	r0, [pc, #716]	; (8001760 <__aeabi_dmul+0x3ac>)
 8001494:	0512      	lsls	r2, r2, #20
 8001496:	433a      	orrs	r2, r7
 8001498:	4002      	ands	r2, r0
 800149a:	051b      	lsls	r3, r3, #20
 800149c:	4313      	orrs	r3, r2
 800149e:	9a00      	ldr	r2, [sp, #0]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	07d1      	lsls	r1, r2, #31
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	430b      	orrs	r3, r1
 80014a8:	0030      	movs	r0, r6
 80014aa:	0019      	movs	r1, r3
 80014ac:	b007      	add	sp, #28
 80014ae:	bc3c      	pop	{r2, r3, r4, r5}
 80014b0:	4690      	mov	r8, r2
 80014b2:	4699      	mov	r9, r3
 80014b4:	46a2      	mov	sl, r4
 80014b6:	46ab      	mov	fp, r5
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	465b      	mov	r3, fp
 80014bc:	433b      	orrs	r3, r7
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0x110>
 80014c2:	e12f      	b.n	8001724 <__aeabi_dmul+0x370>
 80014c4:	2f00      	cmp	r7, #0
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x116>
 80014c8:	e1a5      	b.n	8001816 <__aeabi_dmul+0x462>
 80014ca:	0038      	movs	r0, r7
 80014cc:	f000 fec0 	bl	8002250 <__clzsi2>
 80014d0:	0003      	movs	r3, r0
 80014d2:	3b0b      	subs	r3, #11
 80014d4:	2b1c      	cmp	r3, #28
 80014d6:	dd00      	ble.n	80014da <__aeabi_dmul+0x126>
 80014d8:	e196      	b.n	8001808 <__aeabi_dmul+0x454>
 80014da:	221d      	movs	r2, #29
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	465a      	mov	r2, fp
 80014e0:	0001      	movs	r1, r0
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	465e      	mov	r6, fp
 80014e6:	3908      	subs	r1, #8
 80014e8:	408f      	lsls	r7, r1
 80014ea:	0013      	movs	r3, r2
 80014ec:	408e      	lsls	r6, r1
 80014ee:	433b      	orrs	r3, r7
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	4b9c      	ldr	r3, [pc, #624]	; (8001764 <__aeabi_dmul+0x3b0>)
 80014f4:	2700      	movs	r7, #0
 80014f6:	1a1b      	subs	r3, r3, r0
 80014f8:	4699      	mov	r9, r3
 80014fa:	2300      	movs	r3, #0
 80014fc:	469b      	mov	fp, r3
 80014fe:	e77d      	b.n	80013fc <__aeabi_dmul+0x48>
 8001500:	4641      	mov	r1, r8
 8001502:	4653      	mov	r3, sl
 8001504:	430b      	orrs	r3, r1
 8001506:	4993      	ldr	r1, [pc, #588]	; (8001754 <__aeabi_dmul+0x3a0>)
 8001508:	468c      	mov	ip, r1
 800150a:	44e1      	add	r9, ip
 800150c:	2b00      	cmp	r3, #0
 800150e:	d000      	beq.n	8001512 <__aeabi_dmul+0x15e>
 8001510:	e11a      	b.n	8001748 <__aeabi_dmul+0x394>
 8001512:	2202      	movs	r2, #2
 8001514:	2002      	movs	r0, #2
 8001516:	4317      	orrs	r7, r2
 8001518:	2200      	movs	r2, #0
 800151a:	e78c      	b.n	8001436 <__aeabi_dmul+0x82>
 800151c:	4313      	orrs	r3, r2
 800151e:	d100      	bne.n	8001522 <__aeabi_dmul+0x16e>
 8001520:	e10d      	b.n	800173e <__aeabi_dmul+0x38a>
 8001522:	4643      	mov	r3, r8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d100      	bne.n	800152a <__aeabi_dmul+0x176>
 8001528:	e181      	b.n	800182e <__aeabi_dmul+0x47a>
 800152a:	4640      	mov	r0, r8
 800152c:	f000 fe90 	bl	8002250 <__clzsi2>
 8001530:	0002      	movs	r2, r0
 8001532:	3a0b      	subs	r2, #11
 8001534:	2a1c      	cmp	r2, #28
 8001536:	dd00      	ble.n	800153a <__aeabi_dmul+0x186>
 8001538:	e172      	b.n	8001820 <__aeabi_dmul+0x46c>
 800153a:	0001      	movs	r1, r0
 800153c:	4643      	mov	r3, r8
 800153e:	3908      	subs	r1, #8
 8001540:	408b      	lsls	r3, r1
 8001542:	4698      	mov	r8, r3
 8001544:	231d      	movs	r3, #29
 8001546:	1a9a      	subs	r2, r3, r2
 8001548:	4653      	mov	r3, sl
 800154a:	40d3      	lsrs	r3, r2
 800154c:	001a      	movs	r2, r3
 800154e:	4643      	mov	r3, r8
 8001550:	4313      	orrs	r3, r2
 8001552:	4652      	mov	r2, sl
 8001554:	408a      	lsls	r2, r1
 8001556:	4649      	mov	r1, r9
 8001558:	1a08      	subs	r0, r1, r0
 800155a:	4982      	ldr	r1, [pc, #520]	; (8001764 <__aeabi_dmul+0x3b0>)
 800155c:	4689      	mov	r9, r1
 800155e:	4481      	add	r9, r0
 8001560:	2000      	movs	r0, #0
 8001562:	e768      	b.n	8001436 <__aeabi_dmul+0x82>
 8001564:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <__aeabi_dmul+0x3a0>)
 8001566:	2700      	movs	r7, #0
 8001568:	2600      	movs	r6, #0
 800156a:	e78e      	b.n	800148a <__aeabi_dmul+0xd6>
 800156c:	0c14      	lsrs	r4, r2, #16
 800156e:	0412      	lsls	r2, r2, #16
 8001570:	0c12      	lsrs	r2, r2, #16
 8001572:	0011      	movs	r1, r2
 8001574:	0c37      	lsrs	r7, r6, #16
 8001576:	0436      	lsls	r6, r6, #16
 8001578:	0c35      	lsrs	r5, r6, #16
 800157a:	4379      	muls	r1, r7
 800157c:	0028      	movs	r0, r5
 800157e:	468c      	mov	ip, r1
 8001580:	002e      	movs	r6, r5
 8001582:	4360      	muls	r0, r4
 8001584:	4460      	add	r0, ip
 8001586:	4683      	mov	fp, r0
 8001588:	4356      	muls	r6, r2
 800158a:	0021      	movs	r1, r4
 800158c:	0c30      	lsrs	r0, r6, #16
 800158e:	4680      	mov	r8, r0
 8001590:	4658      	mov	r0, fp
 8001592:	4379      	muls	r1, r7
 8001594:	4440      	add	r0, r8
 8001596:	9102      	str	r1, [sp, #8]
 8001598:	4584      	cmp	ip, r0
 800159a:	d906      	bls.n	80015aa <__aeabi_dmul+0x1f6>
 800159c:	4688      	mov	r8, r1
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0249      	lsls	r1, r1, #9
 80015a2:	468c      	mov	ip, r1
 80015a4:	44e0      	add	r8, ip
 80015a6:	4641      	mov	r1, r8
 80015a8:	9102      	str	r1, [sp, #8]
 80015aa:	0436      	lsls	r6, r6, #16
 80015ac:	0c01      	lsrs	r1, r0, #16
 80015ae:	0c36      	lsrs	r6, r6, #16
 80015b0:	0400      	lsls	r0, r0, #16
 80015b2:	468b      	mov	fp, r1
 80015b4:	1981      	adds	r1, r0, r6
 80015b6:	0c1e      	lsrs	r6, r3, #16
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	9103      	str	r1, [sp, #12]
 80015be:	0019      	movs	r1, r3
 80015c0:	4379      	muls	r1, r7
 80015c2:	468c      	mov	ip, r1
 80015c4:	0028      	movs	r0, r5
 80015c6:	4375      	muls	r5, r6
 80015c8:	4465      	add	r5, ip
 80015ca:	46a8      	mov	r8, r5
 80015cc:	4358      	muls	r0, r3
 80015ce:	0c05      	lsrs	r5, r0, #16
 80015d0:	4445      	add	r5, r8
 80015d2:	4377      	muls	r7, r6
 80015d4:	42a9      	cmp	r1, r5
 80015d6:	d903      	bls.n	80015e0 <__aeabi_dmul+0x22c>
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	0249      	lsls	r1, r1, #9
 80015dc:	468c      	mov	ip, r1
 80015de:	4467      	add	r7, ip
 80015e0:	0c29      	lsrs	r1, r5, #16
 80015e2:	468c      	mov	ip, r1
 80015e4:	0039      	movs	r1, r7
 80015e6:	0400      	lsls	r0, r0, #16
 80015e8:	0c00      	lsrs	r0, r0, #16
 80015ea:	042d      	lsls	r5, r5, #16
 80015ec:	182d      	adds	r5, r5, r0
 80015ee:	4461      	add	r1, ip
 80015f0:	44ab      	add	fp, r5
 80015f2:	9105      	str	r1, [sp, #20]
 80015f4:	4659      	mov	r1, fp
 80015f6:	9104      	str	r1, [sp, #16]
 80015f8:	9901      	ldr	r1, [sp, #4]
 80015fa:	040f      	lsls	r7, r1, #16
 80015fc:	0c3f      	lsrs	r7, r7, #16
 80015fe:	0c08      	lsrs	r0, r1, #16
 8001600:	0039      	movs	r1, r7
 8001602:	4351      	muls	r1, r2
 8001604:	4342      	muls	r2, r0
 8001606:	4690      	mov	r8, r2
 8001608:	0002      	movs	r2, r0
 800160a:	468c      	mov	ip, r1
 800160c:	0c09      	lsrs	r1, r1, #16
 800160e:	468b      	mov	fp, r1
 8001610:	4362      	muls	r2, r4
 8001612:	437c      	muls	r4, r7
 8001614:	4444      	add	r4, r8
 8001616:	445c      	add	r4, fp
 8001618:	45a0      	cmp	r8, r4
 800161a:	d903      	bls.n	8001624 <__aeabi_dmul+0x270>
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0249      	lsls	r1, r1, #9
 8001620:	4688      	mov	r8, r1
 8001622:	4442      	add	r2, r8
 8001624:	0c21      	lsrs	r1, r4, #16
 8001626:	4688      	mov	r8, r1
 8001628:	4661      	mov	r1, ip
 800162a:	0409      	lsls	r1, r1, #16
 800162c:	0c09      	lsrs	r1, r1, #16
 800162e:	468c      	mov	ip, r1
 8001630:	0039      	movs	r1, r7
 8001632:	4359      	muls	r1, r3
 8001634:	4343      	muls	r3, r0
 8001636:	4370      	muls	r0, r6
 8001638:	437e      	muls	r6, r7
 800163a:	0c0f      	lsrs	r7, r1, #16
 800163c:	18f6      	adds	r6, r6, r3
 800163e:	0424      	lsls	r4, r4, #16
 8001640:	19be      	adds	r6, r7, r6
 8001642:	4464      	add	r4, ip
 8001644:	4442      	add	r2, r8
 8001646:	468c      	mov	ip, r1
 8001648:	42b3      	cmp	r3, r6
 800164a:	d903      	bls.n	8001654 <__aeabi_dmul+0x2a0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	4698      	mov	r8, r3
 8001652:	4440      	add	r0, r8
 8001654:	9b02      	ldr	r3, [sp, #8]
 8001656:	4661      	mov	r1, ip
 8001658:	4698      	mov	r8, r3
 800165a:	9b04      	ldr	r3, [sp, #16]
 800165c:	0437      	lsls	r7, r6, #16
 800165e:	4443      	add	r3, r8
 8001660:	469b      	mov	fp, r3
 8001662:	45ab      	cmp	fp, r5
 8001664:	41ad      	sbcs	r5, r5
 8001666:	426b      	negs	r3, r5
 8001668:	040d      	lsls	r5, r1, #16
 800166a:	9905      	ldr	r1, [sp, #20]
 800166c:	0c2d      	lsrs	r5, r5, #16
 800166e:	468c      	mov	ip, r1
 8001670:	197f      	adds	r7, r7, r5
 8001672:	4467      	add	r7, ip
 8001674:	18fd      	adds	r5, r7, r3
 8001676:	46a8      	mov	r8, r5
 8001678:	465d      	mov	r5, fp
 800167a:	192d      	adds	r5, r5, r4
 800167c:	42a5      	cmp	r5, r4
 800167e:	41a4      	sbcs	r4, r4
 8001680:	4693      	mov	fp, r2
 8001682:	4264      	negs	r4, r4
 8001684:	46a4      	mov	ip, r4
 8001686:	44c3      	add	fp, r8
 8001688:	44dc      	add	ip, fp
 800168a:	428f      	cmp	r7, r1
 800168c:	41bf      	sbcs	r7, r7
 800168e:	4598      	cmp	r8, r3
 8001690:	419b      	sbcs	r3, r3
 8001692:	4593      	cmp	fp, r2
 8001694:	4192      	sbcs	r2, r2
 8001696:	45a4      	cmp	ip, r4
 8001698:	41a4      	sbcs	r4, r4
 800169a:	425b      	negs	r3, r3
 800169c:	427f      	negs	r7, r7
 800169e:	431f      	orrs	r7, r3
 80016a0:	0c36      	lsrs	r6, r6, #16
 80016a2:	4252      	negs	r2, r2
 80016a4:	4264      	negs	r4, r4
 80016a6:	19bf      	adds	r7, r7, r6
 80016a8:	4322      	orrs	r2, r4
 80016aa:	18bf      	adds	r7, r7, r2
 80016ac:	4662      	mov	r2, ip
 80016ae:	1838      	adds	r0, r7, r0
 80016b0:	0243      	lsls	r3, r0, #9
 80016b2:	0dd2      	lsrs	r2, r2, #23
 80016b4:	9903      	ldr	r1, [sp, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	026a      	lsls	r2, r5, #9
 80016ba:	430a      	orrs	r2, r1
 80016bc:	1e50      	subs	r0, r2, #1
 80016be:	4182      	sbcs	r2, r0
 80016c0:	4661      	mov	r1, ip
 80016c2:	0ded      	lsrs	r5, r5, #23
 80016c4:	432a      	orrs	r2, r5
 80016c6:	024e      	lsls	r6, r1, #9
 80016c8:	4332      	orrs	r2, r6
 80016ca:	01d9      	lsls	r1, r3, #7
 80016cc:	d400      	bmi.n	80016d0 <__aeabi_dmul+0x31c>
 80016ce:	e0b3      	b.n	8001838 <__aeabi_dmul+0x484>
 80016d0:	2601      	movs	r6, #1
 80016d2:	0850      	lsrs	r0, r2, #1
 80016d4:	4032      	ands	r2, r6
 80016d6:	4302      	orrs	r2, r0
 80016d8:	07de      	lsls	r6, r3, #31
 80016da:	4332      	orrs	r2, r6
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	4c22      	ldr	r4, [pc, #136]	; (8001768 <__aeabi_dmul+0x3b4>)
 80016e0:	4454      	add	r4, sl
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	dd62      	ble.n	80017ac <__aeabi_dmul+0x3f8>
 80016e6:	0751      	lsls	r1, r2, #29
 80016e8:	d009      	beq.n	80016fe <__aeabi_dmul+0x34a>
 80016ea:	200f      	movs	r0, #15
 80016ec:	4010      	ands	r0, r2
 80016ee:	2804      	cmp	r0, #4
 80016f0:	d005      	beq.n	80016fe <__aeabi_dmul+0x34a>
 80016f2:	1d10      	adds	r0, r2, #4
 80016f4:	4290      	cmp	r0, r2
 80016f6:	4192      	sbcs	r2, r2
 80016f8:	4252      	negs	r2, r2
 80016fa:	189b      	adds	r3, r3, r2
 80016fc:	0002      	movs	r2, r0
 80016fe:	01d9      	lsls	r1, r3, #7
 8001700:	d504      	bpl.n	800170c <__aeabi_dmul+0x358>
 8001702:	2480      	movs	r4, #128	; 0x80
 8001704:	4819      	ldr	r0, [pc, #100]	; (800176c <__aeabi_dmul+0x3b8>)
 8001706:	00e4      	lsls	r4, r4, #3
 8001708:	4003      	ands	r3, r0
 800170a:	4454      	add	r4, sl
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <__aeabi_dmul+0x3bc>)
 800170e:	4284      	cmp	r4, r0
 8001710:	dd00      	ble.n	8001714 <__aeabi_dmul+0x360>
 8001712:	e727      	b.n	8001564 <__aeabi_dmul+0x1b0>
 8001714:	075e      	lsls	r6, r3, #29
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	08d2      	lsrs	r2, r2, #3
 800171a:	0b1f      	lsrs	r7, r3, #12
 800171c:	0563      	lsls	r3, r4, #21
 800171e:	4316      	orrs	r6, r2
 8001720:	0d5b      	lsrs	r3, r3, #21
 8001722:	e6b2      	b.n	800148a <__aeabi_dmul+0xd6>
 8001724:	2300      	movs	r3, #0
 8001726:	4699      	mov	r9, r3
 8001728:	3301      	adds	r3, #1
 800172a:	2704      	movs	r7, #4
 800172c:	2600      	movs	r6, #0
 800172e:	469b      	mov	fp, r3
 8001730:	e664      	b.n	80013fc <__aeabi_dmul+0x48>
 8001732:	2303      	movs	r3, #3
 8001734:	9701      	str	r7, [sp, #4]
 8001736:	4681      	mov	r9, r0
 8001738:	270c      	movs	r7, #12
 800173a:	469b      	mov	fp, r3
 800173c:	e65e      	b.n	80013fc <__aeabi_dmul+0x48>
 800173e:	2201      	movs	r2, #1
 8001740:	2001      	movs	r0, #1
 8001742:	4317      	orrs	r7, r2
 8001744:	2200      	movs	r2, #0
 8001746:	e676      	b.n	8001436 <__aeabi_dmul+0x82>
 8001748:	2303      	movs	r3, #3
 800174a:	2003      	movs	r0, #3
 800174c:	431f      	orrs	r7, r3
 800174e:	4643      	mov	r3, r8
 8001750:	e671      	b.n	8001436 <__aeabi_dmul+0x82>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	000007ff 	.word	0x000007ff
 8001758:	fffffc01 	.word	0xfffffc01
 800175c:	080083dc 	.word	0x080083dc
 8001760:	800fffff 	.word	0x800fffff
 8001764:	fffffc0d 	.word	0xfffffc0d
 8001768:	000003ff 	.word	0x000003ff
 800176c:	feffffff 	.word	0xfeffffff
 8001770:	000007fe 	.word	0x000007fe
 8001774:	2300      	movs	r3, #0
 8001776:	2780      	movs	r7, #128	; 0x80
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	033f      	lsls	r7, r7, #12
 800177c:	2600      	movs	r6, #0
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <__aeabi_dmul+0x4d8>)
 8001780:	e683      	b.n	800148a <__aeabi_dmul+0xd6>
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	0032      	movs	r2, r6
 8001786:	46a4      	mov	ip, r4
 8001788:	4658      	mov	r0, fp
 800178a:	e670      	b.n	800146e <__aeabi_dmul+0xba>
 800178c:	46ac      	mov	ip, r5
 800178e:	e66e      	b.n	800146e <__aeabi_dmul+0xba>
 8001790:	2780      	movs	r7, #128	; 0x80
 8001792:	9901      	ldr	r1, [sp, #4]
 8001794:	033f      	lsls	r7, r7, #12
 8001796:	4239      	tst	r1, r7
 8001798:	d02d      	beq.n	80017f6 <__aeabi_dmul+0x442>
 800179a:	423b      	tst	r3, r7
 800179c:	d12b      	bne.n	80017f6 <__aeabi_dmul+0x442>
 800179e:	431f      	orrs	r7, r3
 80017a0:	033f      	lsls	r7, r7, #12
 80017a2:	0b3f      	lsrs	r7, r7, #12
 80017a4:	9500      	str	r5, [sp, #0]
 80017a6:	0016      	movs	r6, r2
 80017a8:	4b38      	ldr	r3, [pc, #224]	; (800188c <__aeabi_dmul+0x4d8>)
 80017aa:	e66e      	b.n	800148a <__aeabi_dmul+0xd6>
 80017ac:	2501      	movs	r5, #1
 80017ae:	1b2d      	subs	r5, r5, r4
 80017b0:	2d38      	cmp	r5, #56	; 0x38
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dmul+0x402>
 80017b4:	e666      	b.n	8001484 <__aeabi_dmul+0xd0>
 80017b6:	2d1f      	cmp	r5, #31
 80017b8:	dc40      	bgt.n	800183c <__aeabi_dmul+0x488>
 80017ba:	4835      	ldr	r0, [pc, #212]	; (8001890 <__aeabi_dmul+0x4dc>)
 80017bc:	001c      	movs	r4, r3
 80017be:	4450      	add	r0, sl
 80017c0:	0016      	movs	r6, r2
 80017c2:	4082      	lsls	r2, r0
 80017c4:	4084      	lsls	r4, r0
 80017c6:	40ee      	lsrs	r6, r5
 80017c8:	1e50      	subs	r0, r2, #1
 80017ca:	4182      	sbcs	r2, r0
 80017cc:	4334      	orrs	r4, r6
 80017ce:	4314      	orrs	r4, r2
 80017d0:	40eb      	lsrs	r3, r5
 80017d2:	0762      	lsls	r2, r4, #29
 80017d4:	d009      	beq.n	80017ea <__aeabi_dmul+0x436>
 80017d6:	220f      	movs	r2, #15
 80017d8:	4022      	ands	r2, r4
 80017da:	2a04      	cmp	r2, #4
 80017dc:	d005      	beq.n	80017ea <__aeabi_dmul+0x436>
 80017de:	0022      	movs	r2, r4
 80017e0:	1d14      	adds	r4, r2, #4
 80017e2:	4294      	cmp	r4, r2
 80017e4:	4180      	sbcs	r0, r0
 80017e6:	4240      	negs	r0, r0
 80017e8:	181b      	adds	r3, r3, r0
 80017ea:	021a      	lsls	r2, r3, #8
 80017ec:	d53e      	bpl.n	800186c <__aeabi_dmul+0x4b8>
 80017ee:	2301      	movs	r3, #1
 80017f0:	2700      	movs	r7, #0
 80017f2:	2600      	movs	r6, #0
 80017f4:	e649      	b.n	800148a <__aeabi_dmul+0xd6>
 80017f6:	2780      	movs	r7, #128	; 0x80
 80017f8:	9b01      	ldr	r3, [sp, #4]
 80017fa:	033f      	lsls	r7, r7, #12
 80017fc:	431f      	orrs	r7, r3
 80017fe:	033f      	lsls	r7, r7, #12
 8001800:	0b3f      	lsrs	r7, r7, #12
 8001802:	9400      	str	r4, [sp, #0]
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <__aeabi_dmul+0x4d8>)
 8001806:	e640      	b.n	800148a <__aeabi_dmul+0xd6>
 8001808:	0003      	movs	r3, r0
 800180a:	465a      	mov	r2, fp
 800180c:	3b28      	subs	r3, #40	; 0x28
 800180e:	409a      	lsls	r2, r3
 8001810:	2600      	movs	r6, #0
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	e66d      	b.n	80014f2 <__aeabi_dmul+0x13e>
 8001816:	4658      	mov	r0, fp
 8001818:	f000 fd1a 	bl	8002250 <__clzsi2>
 800181c:	3020      	adds	r0, #32
 800181e:	e657      	b.n	80014d0 <__aeabi_dmul+0x11c>
 8001820:	0003      	movs	r3, r0
 8001822:	4652      	mov	r2, sl
 8001824:	3b28      	subs	r3, #40	; 0x28
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	2200      	movs	r2, #0
 800182c:	e693      	b.n	8001556 <__aeabi_dmul+0x1a2>
 800182e:	4650      	mov	r0, sl
 8001830:	f000 fd0e 	bl	8002250 <__clzsi2>
 8001834:	3020      	adds	r0, #32
 8001836:	e67b      	b.n	8001530 <__aeabi_dmul+0x17c>
 8001838:	46ca      	mov	sl, r9
 800183a:	e750      	b.n	80016de <__aeabi_dmul+0x32a>
 800183c:	201f      	movs	r0, #31
 800183e:	001e      	movs	r6, r3
 8001840:	4240      	negs	r0, r0
 8001842:	1b04      	subs	r4, r0, r4
 8001844:	40e6      	lsrs	r6, r4
 8001846:	2d20      	cmp	r5, #32
 8001848:	d003      	beq.n	8001852 <__aeabi_dmul+0x49e>
 800184a:	4c12      	ldr	r4, [pc, #72]	; (8001894 <__aeabi_dmul+0x4e0>)
 800184c:	4454      	add	r4, sl
 800184e:	40a3      	lsls	r3, r4
 8001850:	431a      	orrs	r2, r3
 8001852:	1e50      	subs	r0, r2, #1
 8001854:	4182      	sbcs	r2, r0
 8001856:	4332      	orrs	r2, r6
 8001858:	2607      	movs	r6, #7
 800185a:	2700      	movs	r7, #0
 800185c:	4016      	ands	r6, r2
 800185e:	d009      	beq.n	8001874 <__aeabi_dmul+0x4c0>
 8001860:	200f      	movs	r0, #15
 8001862:	2300      	movs	r3, #0
 8001864:	4010      	ands	r0, r2
 8001866:	0014      	movs	r4, r2
 8001868:	2804      	cmp	r0, #4
 800186a:	d1b9      	bne.n	80017e0 <__aeabi_dmul+0x42c>
 800186c:	0022      	movs	r2, r4
 800186e:	075e      	lsls	r6, r3, #29
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	0b1f      	lsrs	r7, r3, #12
 8001874:	08d2      	lsrs	r2, r2, #3
 8001876:	4316      	orrs	r6, r2
 8001878:	2300      	movs	r3, #0
 800187a:	e606      	b.n	800148a <__aeabi_dmul+0xd6>
 800187c:	2780      	movs	r7, #128	; 0x80
 800187e:	033f      	lsls	r7, r7, #12
 8001880:	431f      	orrs	r7, r3
 8001882:	033f      	lsls	r7, r7, #12
 8001884:	0b3f      	lsrs	r7, r7, #12
 8001886:	0016      	movs	r6, r2
 8001888:	4b00      	ldr	r3, [pc, #0]	; (800188c <__aeabi_dmul+0x4d8>)
 800188a:	e5fe      	b.n	800148a <__aeabi_dmul+0xd6>
 800188c:	000007ff 	.word	0x000007ff
 8001890:	0000041e 	.word	0x0000041e
 8001894:	0000043e 	.word	0x0000043e

08001898 <__aeabi_dsub>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	4657      	mov	r7, sl
 800189c:	464e      	mov	r6, r9
 800189e:	4645      	mov	r5, r8
 80018a0:	46de      	mov	lr, fp
 80018a2:	000c      	movs	r4, r1
 80018a4:	0309      	lsls	r1, r1, #12
 80018a6:	b5e0      	push	{r5, r6, r7, lr}
 80018a8:	0a49      	lsrs	r1, r1, #9
 80018aa:	0f46      	lsrs	r6, r0, #29
 80018ac:	005f      	lsls	r7, r3, #1
 80018ae:	4331      	orrs	r1, r6
 80018b0:	031e      	lsls	r6, r3, #12
 80018b2:	0fdb      	lsrs	r3, r3, #31
 80018b4:	0a76      	lsrs	r6, r6, #9
 80018b6:	469b      	mov	fp, r3
 80018b8:	0f53      	lsrs	r3, r2, #29
 80018ba:	4333      	orrs	r3, r6
 80018bc:	4ec8      	ldr	r6, [pc, #800]	; (8001be0 <__aeabi_dsub+0x348>)
 80018be:	0065      	lsls	r5, r4, #1
 80018c0:	00c0      	lsls	r0, r0, #3
 80018c2:	0fe4      	lsrs	r4, r4, #31
 80018c4:	00d2      	lsls	r2, r2, #3
 80018c6:	0d6d      	lsrs	r5, r5, #21
 80018c8:	46a2      	mov	sl, r4
 80018ca:	4681      	mov	r9, r0
 80018cc:	0d7f      	lsrs	r7, r7, #21
 80018ce:	469c      	mov	ip, r3
 80018d0:	4690      	mov	r8, r2
 80018d2:	42b7      	cmp	r7, r6
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dsub+0x40>
 80018d6:	e0b9      	b.n	8001a4c <__aeabi_dsub+0x1b4>
 80018d8:	465b      	mov	r3, fp
 80018da:	2601      	movs	r6, #1
 80018dc:	4073      	eors	r3, r6
 80018de:	469b      	mov	fp, r3
 80018e0:	1bee      	subs	r6, r5, r7
 80018e2:	45a3      	cmp	fp, r4
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dsub+0x50>
 80018e6:	e083      	b.n	80019f0 <__aeabi_dsub+0x158>
 80018e8:	2e00      	cmp	r6, #0
 80018ea:	dd63      	ble.n	80019b4 <__aeabi_dsub+0x11c>
 80018ec:	2f00      	cmp	r7, #0
 80018ee:	d000      	beq.n	80018f2 <__aeabi_dsub+0x5a>
 80018f0:	e0b1      	b.n	8001a56 <__aeabi_dsub+0x1be>
 80018f2:	4663      	mov	r3, ip
 80018f4:	4313      	orrs	r3, r2
 80018f6:	d100      	bne.n	80018fa <__aeabi_dsub+0x62>
 80018f8:	e123      	b.n	8001b42 <__aeabi_dsub+0x2aa>
 80018fa:	1e73      	subs	r3, r6, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <__aeabi_dsub+0x6a>
 8001900:	e1ba      	b.n	8001c78 <__aeabi_dsub+0x3e0>
 8001902:	1a86      	subs	r6, r0, r2
 8001904:	4663      	mov	r3, ip
 8001906:	42b0      	cmp	r0, r6
 8001908:	4180      	sbcs	r0, r0
 800190a:	2501      	movs	r5, #1
 800190c:	1ac9      	subs	r1, r1, r3
 800190e:	4240      	negs	r0, r0
 8001910:	1a09      	subs	r1, r1, r0
 8001912:	020b      	lsls	r3, r1, #8
 8001914:	d400      	bmi.n	8001918 <__aeabi_dsub+0x80>
 8001916:	e147      	b.n	8001ba8 <__aeabi_dsub+0x310>
 8001918:	0249      	lsls	r1, r1, #9
 800191a:	0a4b      	lsrs	r3, r1, #9
 800191c:	4698      	mov	r8, r3
 800191e:	4643      	mov	r3, r8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0x8e>
 8001924:	e189      	b.n	8001c3a <__aeabi_dsub+0x3a2>
 8001926:	4640      	mov	r0, r8
 8001928:	f000 fc92 	bl	8002250 <__clzsi2>
 800192c:	0003      	movs	r3, r0
 800192e:	3b08      	subs	r3, #8
 8001930:	2b1f      	cmp	r3, #31
 8001932:	dd00      	ble.n	8001936 <__aeabi_dsub+0x9e>
 8001934:	e17c      	b.n	8001c30 <__aeabi_dsub+0x398>
 8001936:	2220      	movs	r2, #32
 8001938:	0030      	movs	r0, r6
 800193a:	1ad2      	subs	r2, r2, r3
 800193c:	4641      	mov	r1, r8
 800193e:	40d0      	lsrs	r0, r2
 8001940:	4099      	lsls	r1, r3
 8001942:	0002      	movs	r2, r0
 8001944:	409e      	lsls	r6, r3
 8001946:	430a      	orrs	r2, r1
 8001948:	429d      	cmp	r5, r3
 800194a:	dd00      	ble.n	800194e <__aeabi_dsub+0xb6>
 800194c:	e16a      	b.n	8001c24 <__aeabi_dsub+0x38c>
 800194e:	1b5d      	subs	r5, r3, r5
 8001950:	1c6b      	adds	r3, r5, #1
 8001952:	2b1f      	cmp	r3, #31
 8001954:	dd00      	ble.n	8001958 <__aeabi_dsub+0xc0>
 8001956:	e194      	b.n	8001c82 <__aeabi_dsub+0x3ea>
 8001958:	2120      	movs	r1, #32
 800195a:	0010      	movs	r0, r2
 800195c:	0035      	movs	r5, r6
 800195e:	1ac9      	subs	r1, r1, r3
 8001960:	408e      	lsls	r6, r1
 8001962:	40da      	lsrs	r2, r3
 8001964:	4088      	lsls	r0, r1
 8001966:	40dd      	lsrs	r5, r3
 8001968:	1e71      	subs	r1, r6, #1
 800196a:	418e      	sbcs	r6, r1
 800196c:	0011      	movs	r1, r2
 800196e:	2207      	movs	r2, #7
 8001970:	4328      	orrs	r0, r5
 8001972:	2500      	movs	r5, #0
 8001974:	4306      	orrs	r6, r0
 8001976:	4032      	ands	r2, r6
 8001978:	2a00      	cmp	r2, #0
 800197a:	d009      	beq.n	8001990 <__aeabi_dsub+0xf8>
 800197c:	230f      	movs	r3, #15
 800197e:	4033      	ands	r3, r6
 8001980:	2b04      	cmp	r3, #4
 8001982:	d005      	beq.n	8001990 <__aeabi_dsub+0xf8>
 8001984:	1d33      	adds	r3, r6, #4
 8001986:	42b3      	cmp	r3, r6
 8001988:	41b6      	sbcs	r6, r6
 800198a:	4276      	negs	r6, r6
 800198c:	1989      	adds	r1, r1, r6
 800198e:	001e      	movs	r6, r3
 8001990:	020b      	lsls	r3, r1, #8
 8001992:	d400      	bmi.n	8001996 <__aeabi_dsub+0xfe>
 8001994:	e23d      	b.n	8001e12 <__aeabi_dsub+0x57a>
 8001996:	1c6a      	adds	r2, r5, #1
 8001998:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <__aeabi_dsub+0x348>)
 800199a:	0555      	lsls	r5, r2, #21
 800199c:	0d6d      	lsrs	r5, r5, #21
 800199e:	429a      	cmp	r2, r3
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x10c>
 80019a2:	e119      	b.n	8001bd8 <__aeabi_dsub+0x340>
 80019a4:	4a8f      	ldr	r2, [pc, #572]	; (8001be4 <__aeabi_dsub+0x34c>)
 80019a6:	08f6      	lsrs	r6, r6, #3
 80019a8:	400a      	ands	r2, r1
 80019aa:	0757      	lsls	r7, r2, #29
 80019ac:	0252      	lsls	r2, r2, #9
 80019ae:	4337      	orrs	r7, r6
 80019b0:	0b12      	lsrs	r2, r2, #12
 80019b2:	e09b      	b.n	8001aec <__aeabi_dsub+0x254>
 80019b4:	2e00      	cmp	r6, #0
 80019b6:	d000      	beq.n	80019ba <__aeabi_dsub+0x122>
 80019b8:	e0c5      	b.n	8001b46 <__aeabi_dsub+0x2ae>
 80019ba:	1c6e      	adds	r6, r5, #1
 80019bc:	0576      	lsls	r6, r6, #21
 80019be:	0d76      	lsrs	r6, r6, #21
 80019c0:	2e01      	cmp	r6, #1
 80019c2:	dc00      	bgt.n	80019c6 <__aeabi_dsub+0x12e>
 80019c4:	e148      	b.n	8001c58 <__aeabi_dsub+0x3c0>
 80019c6:	4667      	mov	r7, ip
 80019c8:	1a86      	subs	r6, r0, r2
 80019ca:	1bcb      	subs	r3, r1, r7
 80019cc:	42b0      	cmp	r0, r6
 80019ce:	41bf      	sbcs	r7, r7
 80019d0:	427f      	negs	r7, r7
 80019d2:	46b8      	mov	r8, r7
 80019d4:	001f      	movs	r7, r3
 80019d6:	4643      	mov	r3, r8
 80019d8:	1aff      	subs	r7, r7, r3
 80019da:	003b      	movs	r3, r7
 80019dc:	46b8      	mov	r8, r7
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	d500      	bpl.n	80019e4 <__aeabi_dsub+0x14c>
 80019e2:	e15f      	b.n	8001ca4 <__aeabi_dsub+0x40c>
 80019e4:	4337      	orrs	r7, r6
 80019e6:	d19a      	bne.n	800191e <__aeabi_dsub+0x86>
 80019e8:	2200      	movs	r2, #0
 80019ea:	2400      	movs	r4, #0
 80019ec:	2500      	movs	r5, #0
 80019ee:	e079      	b.n	8001ae4 <__aeabi_dsub+0x24c>
 80019f0:	2e00      	cmp	r6, #0
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dsub+0x15e>
 80019f4:	e0fa      	b.n	8001bec <__aeabi_dsub+0x354>
 80019f6:	2f00      	cmp	r7, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_dsub+0x164>
 80019fa:	e08d      	b.n	8001b18 <__aeabi_dsub+0x280>
 80019fc:	4b78      	ldr	r3, [pc, #480]	; (8001be0 <__aeabi_dsub+0x348>)
 80019fe:	429d      	cmp	r5, r3
 8001a00:	d067      	beq.n	8001ad2 <__aeabi_dsub+0x23a>
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	4667      	mov	r7, ip
 8001a06:	041b      	lsls	r3, r3, #16
 8001a08:	431f      	orrs	r7, r3
 8001a0a:	46bc      	mov	ip, r7
 8001a0c:	2e38      	cmp	r6, #56	; 0x38
 8001a0e:	dc00      	bgt.n	8001a12 <__aeabi_dsub+0x17a>
 8001a10:	e152      	b.n	8001cb8 <__aeabi_dsub+0x420>
 8001a12:	4663      	mov	r3, ip
 8001a14:	4313      	orrs	r3, r2
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	4193      	sbcs	r3, r2
 8001a1a:	181e      	adds	r6, r3, r0
 8001a1c:	4286      	cmp	r6, r0
 8001a1e:	4180      	sbcs	r0, r0
 8001a20:	4240      	negs	r0, r0
 8001a22:	1809      	adds	r1, r1, r0
 8001a24:	020b      	lsls	r3, r1, #8
 8001a26:	d400      	bmi.n	8001a2a <__aeabi_dsub+0x192>
 8001a28:	e0be      	b.n	8001ba8 <__aeabi_dsub+0x310>
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <__aeabi_dsub+0x348>)
 8001a2c:	3501      	adds	r5, #1
 8001a2e:	429d      	cmp	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x19c>
 8001a32:	e0d2      	b.n	8001bda <__aeabi_dsub+0x342>
 8001a34:	4a6b      	ldr	r2, [pc, #428]	; (8001be4 <__aeabi_dsub+0x34c>)
 8001a36:	0873      	lsrs	r3, r6, #1
 8001a38:	400a      	ands	r2, r1
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	400e      	ands	r6, r1
 8001a3e:	431e      	orrs	r6, r3
 8001a40:	0851      	lsrs	r1, r2, #1
 8001a42:	07d3      	lsls	r3, r2, #31
 8001a44:	2207      	movs	r2, #7
 8001a46:	431e      	orrs	r6, r3
 8001a48:	4032      	ands	r2, r6
 8001a4a:	e795      	b.n	8001978 <__aeabi_dsub+0xe0>
 8001a4c:	001e      	movs	r6, r3
 8001a4e:	4316      	orrs	r6, r2
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dsub+0x1bc>
 8001a52:	e745      	b.n	80018e0 <__aeabi_dsub+0x48>
 8001a54:	e740      	b.n	80018d8 <__aeabi_dsub+0x40>
 8001a56:	4b62      	ldr	r3, [pc, #392]	; (8001be0 <__aeabi_dsub+0x348>)
 8001a58:	429d      	cmp	r5, r3
 8001a5a:	d03a      	beq.n	8001ad2 <__aeabi_dsub+0x23a>
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	4667      	mov	r7, ip
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	431f      	orrs	r7, r3
 8001a64:	46bc      	mov	ip, r7
 8001a66:	2e38      	cmp	r6, #56	; 0x38
 8001a68:	dd00      	ble.n	8001a6c <__aeabi_dsub+0x1d4>
 8001a6a:	e0eb      	b.n	8001c44 <__aeabi_dsub+0x3ac>
 8001a6c:	2e1f      	cmp	r6, #31
 8001a6e:	dc00      	bgt.n	8001a72 <__aeabi_dsub+0x1da>
 8001a70:	e13a      	b.n	8001ce8 <__aeabi_dsub+0x450>
 8001a72:	0033      	movs	r3, r6
 8001a74:	4667      	mov	r7, ip
 8001a76:	3b20      	subs	r3, #32
 8001a78:	40df      	lsrs	r7, r3
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	2e20      	cmp	r6, #32
 8001a7e:	d005      	beq.n	8001a8c <__aeabi_dsub+0x1f4>
 8001a80:	2740      	movs	r7, #64	; 0x40
 8001a82:	1bbf      	subs	r7, r7, r6
 8001a84:	4666      	mov	r6, ip
 8001a86:	40be      	lsls	r6, r7
 8001a88:	4332      	orrs	r2, r6
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	4646      	mov	r6, r8
 8001a8e:	1e72      	subs	r2, r6, #1
 8001a90:	4196      	sbcs	r6, r2
 8001a92:	4333      	orrs	r3, r6
 8001a94:	e0da      	b.n	8001c4c <__aeabi_dsub+0x3b4>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x204>
 8001a9a:	e214      	b.n	8001ec6 <__aeabi_dsub+0x62e>
 8001a9c:	4663      	mov	r3, ip
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x20c>
 8001aa2:	e168      	b.n	8001d76 <__aeabi_dsub+0x4de>
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	074e      	lsls	r6, r1, #29
 8001aa8:	08c0      	lsrs	r0, r0, #3
 8001aaa:	08c9      	lsrs	r1, r1, #3
 8001aac:	031b      	lsls	r3, r3, #12
 8001aae:	4306      	orrs	r6, r0
 8001ab0:	4219      	tst	r1, r3
 8001ab2:	d008      	beq.n	8001ac6 <__aeabi_dsub+0x22e>
 8001ab4:	4660      	mov	r0, ip
 8001ab6:	08c0      	lsrs	r0, r0, #3
 8001ab8:	4218      	tst	r0, r3
 8001aba:	d104      	bne.n	8001ac6 <__aeabi_dsub+0x22e>
 8001abc:	4663      	mov	r3, ip
 8001abe:	0001      	movs	r1, r0
 8001ac0:	08d2      	lsrs	r2, r2, #3
 8001ac2:	075e      	lsls	r6, r3, #29
 8001ac4:	4316      	orrs	r6, r2
 8001ac6:	00f3      	lsls	r3, r6, #3
 8001ac8:	4699      	mov	r9, r3
 8001aca:	00c9      	lsls	r1, r1, #3
 8001acc:	0f72      	lsrs	r2, r6, #29
 8001ace:	4d44      	ldr	r5, [pc, #272]	; (8001be0 <__aeabi_dsub+0x348>)
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	08de      	lsrs	r6, r3, #3
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <__aeabi_dsub+0x348>)
 8001ad8:	074f      	lsls	r7, r1, #29
 8001ada:	4337      	orrs	r7, r6
 8001adc:	08ca      	lsrs	r2, r1, #3
 8001ade:	429d      	cmp	r5, r3
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dsub+0x24c>
 8001ae2:	e06e      	b.n	8001bc2 <__aeabi_dsub+0x32a>
 8001ae4:	0312      	lsls	r2, r2, #12
 8001ae6:	056d      	lsls	r5, r5, #21
 8001ae8:	0b12      	lsrs	r2, r2, #12
 8001aea:	0d6d      	lsrs	r5, r5, #21
 8001aec:	2100      	movs	r1, #0
 8001aee:	0312      	lsls	r2, r2, #12
 8001af0:	0b13      	lsrs	r3, r2, #12
 8001af2:	0d0a      	lsrs	r2, r1, #20
 8001af4:	0512      	lsls	r2, r2, #20
 8001af6:	431a      	orrs	r2, r3
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <__aeabi_dsub+0x350>)
 8001afa:	052d      	lsls	r5, r5, #20
 8001afc:	4013      	ands	r3, r2
 8001afe:	432b      	orrs	r3, r5
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	07e4      	lsls	r4, r4, #31
 8001b04:	085b      	lsrs	r3, r3, #1
 8001b06:	4323      	orrs	r3, r4
 8001b08:	0038      	movs	r0, r7
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	bc3c      	pop	{r2, r3, r4, r5}
 8001b0e:	4690      	mov	r8, r2
 8001b10:	4699      	mov	r9, r3
 8001b12:	46a2      	mov	sl, r4
 8001b14:	46ab      	mov	fp, r5
 8001b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b18:	4663      	mov	r3, ip
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	d011      	beq.n	8001b42 <__aeabi_dsub+0x2aa>
 8001b1e:	1e73      	subs	r3, r6, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d000      	beq.n	8001b26 <__aeabi_dsub+0x28e>
 8001b24:	e107      	b.n	8001d36 <__aeabi_dsub+0x49e>
 8001b26:	1886      	adds	r6, r0, r2
 8001b28:	4286      	cmp	r6, r0
 8001b2a:	4180      	sbcs	r0, r0
 8001b2c:	4461      	add	r1, ip
 8001b2e:	4240      	negs	r0, r0
 8001b30:	1809      	adds	r1, r1, r0
 8001b32:	2501      	movs	r5, #1
 8001b34:	020b      	lsls	r3, r1, #8
 8001b36:	d537      	bpl.n	8001ba8 <__aeabi_dsub+0x310>
 8001b38:	2502      	movs	r5, #2
 8001b3a:	e77b      	b.n	8001a34 <__aeabi_dsub+0x19c>
 8001b3c:	003e      	movs	r6, r7
 8001b3e:	4661      	mov	r1, ip
 8001b40:	4691      	mov	r9, r2
 8001b42:	0035      	movs	r5, r6
 8001b44:	e7c5      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001b46:	465c      	mov	r4, fp
 8001b48:	2d00      	cmp	r5, #0
 8001b4a:	d000      	beq.n	8001b4e <__aeabi_dsub+0x2b6>
 8001b4c:	e0e1      	b.n	8001d12 <__aeabi_dsub+0x47a>
 8001b4e:	000b      	movs	r3, r1
 8001b50:	4303      	orrs	r3, r0
 8001b52:	d0f3      	beq.n	8001b3c <__aeabi_dsub+0x2a4>
 8001b54:	1c73      	adds	r3, r6, #1
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x2c2>
 8001b58:	e1ac      	b.n	8001eb4 <__aeabi_dsub+0x61c>
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <__aeabi_dsub+0x348>)
 8001b5c:	429f      	cmp	r7, r3
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x2ca>
 8001b60:	e13a      	b.n	8001dd8 <__aeabi_dsub+0x540>
 8001b62:	43f3      	mvns	r3, r6
 8001b64:	2b38      	cmp	r3, #56	; 0x38
 8001b66:	dd00      	ble.n	8001b6a <__aeabi_dsub+0x2d2>
 8001b68:	e16f      	b.n	8001e4a <__aeabi_dsub+0x5b2>
 8001b6a:	2b1f      	cmp	r3, #31
 8001b6c:	dd00      	ble.n	8001b70 <__aeabi_dsub+0x2d8>
 8001b6e:	e18c      	b.n	8001e8a <__aeabi_dsub+0x5f2>
 8001b70:	2520      	movs	r5, #32
 8001b72:	000e      	movs	r6, r1
 8001b74:	1aed      	subs	r5, r5, r3
 8001b76:	40ae      	lsls	r6, r5
 8001b78:	46b0      	mov	r8, r6
 8001b7a:	0006      	movs	r6, r0
 8001b7c:	46aa      	mov	sl, r5
 8001b7e:	40de      	lsrs	r6, r3
 8001b80:	4645      	mov	r5, r8
 8001b82:	4335      	orrs	r5, r6
 8001b84:	002e      	movs	r6, r5
 8001b86:	4655      	mov	r5, sl
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	40a8      	lsls	r0, r5
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	1e45      	subs	r5, r0, #1
 8001b90:	41a8      	sbcs	r0, r5
 8001b92:	1a5b      	subs	r3, r3, r1
 8001b94:	469c      	mov	ip, r3
 8001b96:	4330      	orrs	r0, r6
 8001b98:	1a16      	subs	r6, r2, r0
 8001b9a:	42b2      	cmp	r2, r6
 8001b9c:	4192      	sbcs	r2, r2
 8001b9e:	4663      	mov	r3, ip
 8001ba0:	4252      	negs	r2, r2
 8001ba2:	1a99      	subs	r1, r3, r2
 8001ba4:	003d      	movs	r5, r7
 8001ba6:	e6b4      	b.n	8001912 <__aeabi_dsub+0x7a>
 8001ba8:	2207      	movs	r2, #7
 8001baa:	4032      	ands	r2, r6
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dsub+0x31a>
 8001bb0:	e6e4      	b.n	800197c <__aeabi_dsub+0xe4>
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <__aeabi_dsub+0x348>)
 8001bb4:	08f6      	lsrs	r6, r6, #3
 8001bb6:	074f      	lsls	r7, r1, #29
 8001bb8:	4337      	orrs	r7, r6
 8001bba:	08ca      	lsrs	r2, r1, #3
 8001bbc:	429d      	cmp	r5, r3
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x32a>
 8001bc0:	e790      	b.n	8001ae4 <__aeabi_dsub+0x24c>
 8001bc2:	003b      	movs	r3, r7
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x332>
 8001bc8:	e1a6      	b.n	8001f18 <__aeabi_dsub+0x680>
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	031b      	lsls	r3, r3, #12
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	0312      	lsls	r2, r2, #12
 8001bd2:	0b12      	lsrs	r2, r2, #12
 8001bd4:	4d02      	ldr	r5, [pc, #8]	; (8001be0 <__aeabi_dsub+0x348>)
 8001bd6:	e789      	b.n	8001aec <__aeabi_dsub+0x254>
 8001bd8:	0015      	movs	r5, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2700      	movs	r7, #0
 8001bde:	e785      	b.n	8001aec <__aeabi_dsub+0x254>
 8001be0:	000007ff 	.word	0x000007ff
 8001be4:	ff7fffff 	.word	0xff7fffff
 8001be8:	800fffff 	.word	0x800fffff
 8001bec:	2e00      	cmp	r6, #0
 8001bee:	d000      	beq.n	8001bf2 <__aeabi_dsub+0x35a>
 8001bf0:	e0c7      	b.n	8001d82 <__aeabi_dsub+0x4ea>
 8001bf2:	1c6b      	adds	r3, r5, #1
 8001bf4:	055e      	lsls	r6, r3, #21
 8001bf6:	0d76      	lsrs	r6, r6, #21
 8001bf8:	2e01      	cmp	r6, #1
 8001bfa:	dc00      	bgt.n	8001bfe <__aeabi_dsub+0x366>
 8001bfc:	e0f0      	b.n	8001de0 <__aeabi_dsub+0x548>
 8001bfe:	4dc8      	ldr	r5, [pc, #800]	; (8001f20 <__aeabi_dsub+0x688>)
 8001c00:	42ab      	cmp	r3, r5
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x36e>
 8001c04:	e0b9      	b.n	8001d7a <__aeabi_dsub+0x4e2>
 8001c06:	1885      	adds	r5, r0, r2
 8001c08:	000a      	movs	r2, r1
 8001c0a:	4285      	cmp	r5, r0
 8001c0c:	4189      	sbcs	r1, r1
 8001c0e:	4462      	add	r2, ip
 8001c10:	4249      	negs	r1, r1
 8001c12:	1851      	adds	r1, r2, r1
 8001c14:	2207      	movs	r2, #7
 8001c16:	07ce      	lsls	r6, r1, #31
 8001c18:	086d      	lsrs	r5, r5, #1
 8001c1a:	432e      	orrs	r6, r5
 8001c1c:	0849      	lsrs	r1, r1, #1
 8001c1e:	4032      	ands	r2, r6
 8001c20:	001d      	movs	r5, r3
 8001c22:	e6a9      	b.n	8001978 <__aeabi_dsub+0xe0>
 8001c24:	49bf      	ldr	r1, [pc, #764]	; (8001f24 <__aeabi_dsub+0x68c>)
 8001c26:	1aed      	subs	r5, r5, r3
 8001c28:	4011      	ands	r1, r2
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	4032      	ands	r2, r6
 8001c2e:	e6a3      	b.n	8001978 <__aeabi_dsub+0xe0>
 8001c30:	0032      	movs	r2, r6
 8001c32:	3828      	subs	r0, #40	; 0x28
 8001c34:	4082      	lsls	r2, r0
 8001c36:	2600      	movs	r6, #0
 8001c38:	e686      	b.n	8001948 <__aeabi_dsub+0xb0>
 8001c3a:	0030      	movs	r0, r6
 8001c3c:	f000 fb08 	bl	8002250 <__clzsi2>
 8001c40:	3020      	adds	r0, #32
 8001c42:	e673      	b.n	800192c <__aeabi_dsub+0x94>
 8001c44:	4663      	mov	r3, ip
 8001c46:	4313      	orrs	r3, r2
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	4193      	sbcs	r3, r2
 8001c4c:	1ac6      	subs	r6, r0, r3
 8001c4e:	42b0      	cmp	r0, r6
 8001c50:	4180      	sbcs	r0, r0
 8001c52:	4240      	negs	r0, r0
 8001c54:	1a09      	subs	r1, r1, r0
 8001c56:	e65c      	b.n	8001912 <__aeabi_dsub+0x7a>
 8001c58:	000e      	movs	r6, r1
 8001c5a:	4667      	mov	r7, ip
 8001c5c:	4306      	orrs	r6, r0
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	2d00      	cmp	r5, #0
 8001c62:	d15e      	bne.n	8001d22 <__aeabi_dsub+0x48a>
 8001c64:	2e00      	cmp	r6, #0
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x3d2>
 8001c68:	e0f3      	b.n	8001e52 <__aeabi_dsub+0x5ba>
 8001c6a:	2f00      	cmp	r7, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x3d8>
 8001c6e:	e11e      	b.n	8001eae <__aeabi_dsub+0x616>
 8001c70:	465c      	mov	r4, fp
 8001c72:	4661      	mov	r1, ip
 8001c74:	4691      	mov	r9, r2
 8001c76:	e72c      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001c78:	4fa9      	ldr	r7, [pc, #676]	; (8001f20 <__aeabi_dsub+0x688>)
 8001c7a:	42be      	cmp	r6, r7
 8001c7c:	d07b      	beq.n	8001d76 <__aeabi_dsub+0x4de>
 8001c7e:	001e      	movs	r6, r3
 8001c80:	e6f1      	b.n	8001a66 <__aeabi_dsub+0x1ce>
 8001c82:	0010      	movs	r0, r2
 8001c84:	3d1f      	subs	r5, #31
 8001c86:	40e8      	lsrs	r0, r5
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d003      	beq.n	8001c94 <__aeabi_dsub+0x3fc>
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	1acb      	subs	r3, r1, r3
 8001c90:	409a      	lsls	r2, r3
 8001c92:	4316      	orrs	r6, r2
 8001c94:	1e73      	subs	r3, r6, #1
 8001c96:	419e      	sbcs	r6, r3
 8001c98:	2207      	movs	r2, #7
 8001c9a:	4306      	orrs	r6, r0
 8001c9c:	4032      	ands	r2, r6
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	e783      	b.n	8001bac <__aeabi_dsub+0x314>
 8001ca4:	1a16      	subs	r6, r2, r0
 8001ca6:	4663      	mov	r3, ip
 8001ca8:	42b2      	cmp	r2, r6
 8001caa:	4180      	sbcs	r0, r0
 8001cac:	1a59      	subs	r1, r3, r1
 8001cae:	4240      	negs	r0, r0
 8001cb0:	1a0b      	subs	r3, r1, r0
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	465c      	mov	r4, fp
 8001cb6:	e632      	b.n	800191e <__aeabi_dsub+0x86>
 8001cb8:	2e1f      	cmp	r6, #31
 8001cba:	dd00      	ble.n	8001cbe <__aeabi_dsub+0x426>
 8001cbc:	e0ab      	b.n	8001e16 <__aeabi_dsub+0x57e>
 8001cbe:	2720      	movs	r7, #32
 8001cc0:	1bbb      	subs	r3, r7, r6
 8001cc2:	469a      	mov	sl, r3
 8001cc4:	4663      	mov	r3, ip
 8001cc6:	4657      	mov	r7, sl
 8001cc8:	40bb      	lsls	r3, r7
 8001cca:	4699      	mov	r9, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	464f      	mov	r7, r9
 8001cd0:	40f3      	lsrs	r3, r6
 8001cd2:	431f      	orrs	r7, r3
 8001cd4:	003b      	movs	r3, r7
 8001cd6:	4657      	mov	r7, sl
 8001cd8:	40ba      	lsls	r2, r7
 8001cda:	1e57      	subs	r7, r2, #1
 8001cdc:	41ba      	sbcs	r2, r7
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	40f2      	lsrs	r2, r6
 8001ce4:	1889      	adds	r1, r1, r2
 8001ce6:	e698      	b.n	8001a1a <__aeabi_dsub+0x182>
 8001ce8:	2720      	movs	r7, #32
 8001cea:	1bbb      	subs	r3, r7, r6
 8001cec:	469a      	mov	sl, r3
 8001cee:	4663      	mov	r3, ip
 8001cf0:	4657      	mov	r7, sl
 8001cf2:	40bb      	lsls	r3, r7
 8001cf4:	4699      	mov	r9, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	464f      	mov	r7, r9
 8001cfa:	40f3      	lsrs	r3, r6
 8001cfc:	431f      	orrs	r7, r3
 8001cfe:	003b      	movs	r3, r7
 8001d00:	4657      	mov	r7, sl
 8001d02:	40ba      	lsls	r2, r7
 8001d04:	1e57      	subs	r7, r2, #1
 8001d06:	41ba      	sbcs	r2, r7
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	4662      	mov	r2, ip
 8001d0c:	40f2      	lsrs	r2, r6
 8001d0e:	1a89      	subs	r1, r1, r2
 8001d10:	e79c      	b.n	8001c4c <__aeabi_dsub+0x3b4>
 8001d12:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <__aeabi_dsub+0x688>)
 8001d14:	429f      	cmp	r7, r3
 8001d16:	d05f      	beq.n	8001dd8 <__aeabi_dsub+0x540>
 8001d18:	2580      	movs	r5, #128	; 0x80
 8001d1a:	042d      	lsls	r5, r5, #16
 8001d1c:	4273      	negs	r3, r6
 8001d1e:	4329      	orrs	r1, r5
 8001d20:	e720      	b.n	8001b64 <__aeabi_dsub+0x2cc>
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d10c      	bne.n	8001d40 <__aeabi_dsub+0x4a8>
 8001d26:	2f00      	cmp	r7, #0
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x494>
 8001d2a:	e0d0      	b.n	8001ece <__aeabi_dsub+0x636>
 8001d2c:	465c      	mov	r4, fp
 8001d2e:	4661      	mov	r1, ip
 8001d30:	4691      	mov	r9, r2
 8001d32:	4d7b      	ldr	r5, [pc, #492]	; (8001f20 <__aeabi_dsub+0x688>)
 8001d34:	e6cd      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001d36:	4f7a      	ldr	r7, [pc, #488]	; (8001f20 <__aeabi_dsub+0x688>)
 8001d38:	42be      	cmp	r6, r7
 8001d3a:	d01c      	beq.n	8001d76 <__aeabi_dsub+0x4de>
 8001d3c:	001e      	movs	r6, r3
 8001d3e:	e665      	b.n	8001a0c <__aeabi_dsub+0x174>
 8001d40:	2f00      	cmp	r7, #0
 8001d42:	d018      	beq.n	8001d76 <__aeabi_dsub+0x4de>
 8001d44:	08c0      	lsrs	r0, r0, #3
 8001d46:	074e      	lsls	r6, r1, #29
 8001d48:	4306      	orrs	r6, r0
 8001d4a:	2080      	movs	r0, #128	; 0x80
 8001d4c:	08c9      	lsrs	r1, r1, #3
 8001d4e:	0300      	lsls	r0, r0, #12
 8001d50:	4201      	tst	r1, r0
 8001d52:	d008      	beq.n	8001d66 <__aeabi_dsub+0x4ce>
 8001d54:	4663      	mov	r3, ip
 8001d56:	08dc      	lsrs	r4, r3, #3
 8001d58:	4204      	tst	r4, r0
 8001d5a:	d104      	bne.n	8001d66 <__aeabi_dsub+0x4ce>
 8001d5c:	0021      	movs	r1, r4
 8001d5e:	46da      	mov	sl, fp
 8001d60:	08d2      	lsrs	r2, r2, #3
 8001d62:	075e      	lsls	r6, r3, #29
 8001d64:	4316      	orrs	r6, r2
 8001d66:	00f3      	lsls	r3, r6, #3
 8001d68:	4699      	mov	r9, r3
 8001d6a:	2401      	movs	r4, #1
 8001d6c:	4653      	mov	r3, sl
 8001d6e:	00c9      	lsls	r1, r1, #3
 8001d70:	0f72      	lsrs	r2, r6, #29
 8001d72:	4311      	orrs	r1, r2
 8001d74:	401c      	ands	r4, r3
 8001d76:	4d6a      	ldr	r5, [pc, #424]	; (8001f20 <__aeabi_dsub+0x688>)
 8001d78:	e6ab      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001d7a:	001d      	movs	r5, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2700      	movs	r7, #0
 8001d80:	e6b4      	b.n	8001aec <__aeabi_dsub+0x254>
 8001d82:	2d00      	cmp	r5, #0
 8001d84:	d159      	bne.n	8001e3a <__aeabi_dsub+0x5a2>
 8001d86:	000b      	movs	r3, r1
 8001d88:	4303      	orrs	r3, r0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x4f6>
 8001d8c:	e6d6      	b.n	8001b3c <__aeabi_dsub+0x2a4>
 8001d8e:	1c73      	adds	r3, r6, #1
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x4fc>
 8001d92:	e0b2      	b.n	8001efa <__aeabi_dsub+0x662>
 8001d94:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <__aeabi_dsub+0x688>)
 8001d96:	429f      	cmp	r7, r3
 8001d98:	d01e      	beq.n	8001dd8 <__aeabi_dsub+0x540>
 8001d9a:	43f3      	mvns	r3, r6
 8001d9c:	2b38      	cmp	r3, #56	; 0x38
 8001d9e:	dc6f      	bgt.n	8001e80 <__aeabi_dsub+0x5e8>
 8001da0:	2b1f      	cmp	r3, #31
 8001da2:	dd00      	ble.n	8001da6 <__aeabi_dsub+0x50e>
 8001da4:	e097      	b.n	8001ed6 <__aeabi_dsub+0x63e>
 8001da6:	2520      	movs	r5, #32
 8001da8:	000e      	movs	r6, r1
 8001daa:	1aed      	subs	r5, r5, r3
 8001dac:	40ae      	lsls	r6, r5
 8001dae:	46b0      	mov	r8, r6
 8001db0:	0006      	movs	r6, r0
 8001db2:	46aa      	mov	sl, r5
 8001db4:	40de      	lsrs	r6, r3
 8001db6:	4645      	mov	r5, r8
 8001db8:	4335      	orrs	r5, r6
 8001dba:	002e      	movs	r6, r5
 8001dbc:	4655      	mov	r5, sl
 8001dbe:	40a8      	lsls	r0, r5
 8001dc0:	40d9      	lsrs	r1, r3
 8001dc2:	1e45      	subs	r5, r0, #1
 8001dc4:	41a8      	sbcs	r0, r5
 8001dc6:	448c      	add	ip, r1
 8001dc8:	4306      	orrs	r6, r0
 8001dca:	18b6      	adds	r6, r6, r2
 8001dcc:	4296      	cmp	r6, r2
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	4251      	negs	r1, r2
 8001dd2:	4461      	add	r1, ip
 8001dd4:	003d      	movs	r5, r7
 8001dd6:	e625      	b.n	8001a24 <__aeabi_dsub+0x18c>
 8001dd8:	003d      	movs	r5, r7
 8001dda:	4661      	mov	r1, ip
 8001ddc:	4691      	mov	r9, r2
 8001dde:	e678      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001de0:	000b      	movs	r3, r1
 8001de2:	4303      	orrs	r3, r0
 8001de4:	2d00      	cmp	r5, #0
 8001de6:	d000      	beq.n	8001dea <__aeabi_dsub+0x552>
 8001de8:	e655      	b.n	8001a96 <__aeabi_dsub+0x1fe>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f5      	beq.n	8001dda <__aeabi_dsub+0x542>
 8001dee:	4663      	mov	r3, ip
 8001df0:	4313      	orrs	r3, r2
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x55e>
 8001df4:	e66d      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001df6:	1886      	adds	r6, r0, r2
 8001df8:	4286      	cmp	r6, r0
 8001dfa:	4180      	sbcs	r0, r0
 8001dfc:	4461      	add	r1, ip
 8001dfe:	4240      	negs	r0, r0
 8001e00:	1809      	adds	r1, r1, r0
 8001e02:	2200      	movs	r2, #0
 8001e04:	020b      	lsls	r3, r1, #8
 8001e06:	d400      	bmi.n	8001e0a <__aeabi_dsub+0x572>
 8001e08:	e6d0      	b.n	8001bac <__aeabi_dsub+0x314>
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <__aeabi_dsub+0x68c>)
 8001e0c:	3501      	adds	r5, #1
 8001e0e:	4019      	ands	r1, r3
 8001e10:	e5b2      	b.n	8001978 <__aeabi_dsub+0xe0>
 8001e12:	46b1      	mov	r9, r6
 8001e14:	e65d      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001e16:	0033      	movs	r3, r6
 8001e18:	4667      	mov	r7, ip
 8001e1a:	3b20      	subs	r3, #32
 8001e1c:	40df      	lsrs	r7, r3
 8001e1e:	003b      	movs	r3, r7
 8001e20:	2e20      	cmp	r6, #32
 8001e22:	d005      	beq.n	8001e30 <__aeabi_dsub+0x598>
 8001e24:	2740      	movs	r7, #64	; 0x40
 8001e26:	1bbf      	subs	r7, r7, r6
 8001e28:	4666      	mov	r6, ip
 8001e2a:	40be      	lsls	r6, r7
 8001e2c:	4332      	orrs	r2, r6
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4646      	mov	r6, r8
 8001e32:	1e72      	subs	r2, r6, #1
 8001e34:	4196      	sbcs	r6, r2
 8001e36:	4333      	orrs	r3, r6
 8001e38:	e5ef      	b.n	8001a1a <__aeabi_dsub+0x182>
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <__aeabi_dsub+0x688>)
 8001e3c:	429f      	cmp	r7, r3
 8001e3e:	d0cb      	beq.n	8001dd8 <__aeabi_dsub+0x540>
 8001e40:	2580      	movs	r5, #128	; 0x80
 8001e42:	042d      	lsls	r5, r5, #16
 8001e44:	4273      	negs	r3, r6
 8001e46:	4329      	orrs	r1, r5
 8001e48:	e7a8      	b.n	8001d9c <__aeabi_dsub+0x504>
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	1e41      	subs	r1, r0, #1
 8001e4e:	4188      	sbcs	r0, r1
 8001e50:	e6a2      	b.n	8001b98 <__aeabi_dsub+0x300>
 8001e52:	2f00      	cmp	r7, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x5c0>
 8001e56:	e63c      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001e58:	4663      	mov	r3, ip
 8001e5a:	1a86      	subs	r6, r0, r2
 8001e5c:	1acf      	subs	r7, r1, r3
 8001e5e:	42b0      	cmp	r0, r6
 8001e60:	419b      	sbcs	r3, r3
 8001e62:	425b      	negs	r3, r3
 8001e64:	1afb      	subs	r3, r7, r3
 8001e66:	4698      	mov	r8, r3
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	d54e      	bpl.n	8001f0a <__aeabi_dsub+0x672>
 8001e6c:	1a16      	subs	r6, r2, r0
 8001e6e:	4663      	mov	r3, ip
 8001e70:	42b2      	cmp	r2, r6
 8001e72:	4192      	sbcs	r2, r2
 8001e74:	1a59      	subs	r1, r3, r1
 8001e76:	4252      	negs	r2, r2
 8001e78:	1a89      	subs	r1, r1, r2
 8001e7a:	465c      	mov	r4, fp
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	e57b      	b.n	8001978 <__aeabi_dsub+0xe0>
 8001e80:	4301      	orrs	r1, r0
 8001e82:	000e      	movs	r6, r1
 8001e84:	1e71      	subs	r1, r6, #1
 8001e86:	418e      	sbcs	r6, r1
 8001e88:	e79f      	b.n	8001dca <__aeabi_dsub+0x532>
 8001e8a:	001d      	movs	r5, r3
 8001e8c:	000e      	movs	r6, r1
 8001e8e:	3d20      	subs	r5, #32
 8001e90:	40ee      	lsrs	r6, r5
 8001e92:	46b0      	mov	r8, r6
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d004      	beq.n	8001ea2 <__aeabi_dsub+0x60a>
 8001e98:	2540      	movs	r5, #64	; 0x40
 8001e9a:	1aeb      	subs	r3, r5, r3
 8001e9c:	4099      	lsls	r1, r3
 8001e9e:	4308      	orrs	r0, r1
 8001ea0:	4681      	mov	r9, r0
 8001ea2:	4648      	mov	r0, r9
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	1e41      	subs	r1, r0, #1
 8001ea8:	4188      	sbcs	r0, r1
 8001eaa:	4318      	orrs	r0, r3
 8001eac:	e674      	b.n	8001b98 <__aeabi_dsub+0x300>
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	e617      	b.n	8001ae4 <__aeabi_dsub+0x24c>
 8001eb4:	1a16      	subs	r6, r2, r0
 8001eb6:	4663      	mov	r3, ip
 8001eb8:	42b2      	cmp	r2, r6
 8001eba:	4192      	sbcs	r2, r2
 8001ebc:	1a59      	subs	r1, r3, r1
 8001ebe:	4252      	negs	r2, r2
 8001ec0:	1a89      	subs	r1, r1, r2
 8001ec2:	003d      	movs	r5, r7
 8001ec4:	e525      	b.n	8001912 <__aeabi_dsub+0x7a>
 8001ec6:	4661      	mov	r1, ip
 8001ec8:	4691      	mov	r9, r2
 8001eca:	4d15      	ldr	r5, [pc, #84]	; (8001f20 <__aeabi_dsub+0x688>)
 8001ecc:	e601      	b.n	8001ad2 <__aeabi_dsub+0x23a>
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	0312      	lsls	r2, r2, #12
 8001ed4:	e679      	b.n	8001bca <__aeabi_dsub+0x332>
 8001ed6:	001d      	movs	r5, r3
 8001ed8:	000e      	movs	r6, r1
 8001eda:	3d20      	subs	r5, #32
 8001edc:	40ee      	lsrs	r6, r5
 8001ede:	46b0      	mov	r8, r6
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d004      	beq.n	8001eee <__aeabi_dsub+0x656>
 8001ee4:	2540      	movs	r5, #64	; 0x40
 8001ee6:	1aeb      	subs	r3, r5, r3
 8001ee8:	4099      	lsls	r1, r3
 8001eea:	4308      	orrs	r0, r1
 8001eec:	4681      	mov	r9, r0
 8001eee:	464e      	mov	r6, r9
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	1e71      	subs	r1, r6, #1
 8001ef4:	418e      	sbcs	r6, r1
 8001ef6:	431e      	orrs	r6, r3
 8001ef8:	e767      	b.n	8001dca <__aeabi_dsub+0x532>
 8001efa:	1886      	adds	r6, r0, r2
 8001efc:	4296      	cmp	r6, r2
 8001efe:	419b      	sbcs	r3, r3
 8001f00:	4461      	add	r1, ip
 8001f02:	425b      	negs	r3, r3
 8001f04:	18c9      	adds	r1, r1, r3
 8001f06:	003d      	movs	r5, r7
 8001f08:	e58c      	b.n	8001a24 <__aeabi_dsub+0x18c>
 8001f0a:	4647      	mov	r7, r8
 8001f0c:	4337      	orrs	r7, r6
 8001f0e:	d0ce      	beq.n	8001eae <__aeabi_dsub+0x616>
 8001f10:	2207      	movs	r2, #7
 8001f12:	4641      	mov	r1, r8
 8001f14:	4032      	ands	r2, r6
 8001f16:	e649      	b.n	8001bac <__aeabi_dsub+0x314>
 8001f18:	2700      	movs	r7, #0
 8001f1a:	003a      	movs	r2, r7
 8001f1c:	e5e6      	b.n	8001aec <__aeabi_dsub+0x254>
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	000007ff 	.word	0x000007ff
 8001f24:	ff7fffff 	.word	0xff7fffff

08001f28 <__aeabi_dcmpun>:
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	4e0c      	ldr	r6, [pc, #48]	; (8001f5c <__aeabi_dcmpun+0x34>)
 8001f2c:	030d      	lsls	r5, r1, #12
 8001f2e:	031c      	lsls	r4, r3, #12
 8001f30:	0049      	lsls	r1, r1, #1
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	0b2d      	lsrs	r5, r5, #12
 8001f36:	0d49      	lsrs	r1, r1, #21
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	0d5b      	lsrs	r3, r3, #21
 8001f3c:	42b1      	cmp	r1, r6
 8001f3e:	d008      	beq.n	8001f52 <__aeabi_dcmpun+0x2a>
 8001f40:	4906      	ldr	r1, [pc, #24]	; (8001f5c <__aeabi_dcmpun+0x34>)
 8001f42:	2000      	movs	r0, #0
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d103      	bne.n	8001f50 <__aeabi_dcmpun+0x28>
 8001f48:	4314      	orrs	r4, r2
 8001f4a:	0020      	movs	r0, r4
 8001f4c:	1e44      	subs	r4, r0, #1
 8001f4e:	41a0      	sbcs	r0, r4
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
 8001f52:	4305      	orrs	r5, r0
 8001f54:	2001      	movs	r0, #1
 8001f56:	2d00      	cmp	r5, #0
 8001f58:	d1fa      	bne.n	8001f50 <__aeabi_dcmpun+0x28>
 8001f5a:	e7f1      	b.n	8001f40 <__aeabi_dcmpun+0x18>
 8001f5c:	000007ff 	.word	0x000007ff

08001f60 <__aeabi_d2iz>:
 8001f60:	b530      	push	{r4, r5, lr}
 8001f62:	4d14      	ldr	r5, [pc, #80]	; (8001fb4 <__aeabi_d2iz+0x54>)
 8001f64:	030a      	lsls	r2, r1, #12
 8001f66:	004b      	lsls	r3, r1, #1
 8001f68:	0b12      	lsrs	r2, r2, #12
 8001f6a:	0d5b      	lsrs	r3, r3, #21
 8001f6c:	0fc9      	lsrs	r1, r1, #31
 8001f6e:	2400      	movs	r4, #0
 8001f70:	42ab      	cmp	r3, r5
 8001f72:	dd11      	ble.n	8001f98 <__aeabi_d2iz+0x38>
 8001f74:	4c10      	ldr	r4, [pc, #64]	; (8001fb8 <__aeabi_d2iz+0x58>)
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	dc10      	bgt.n	8001f9c <__aeabi_d2iz+0x3c>
 8001f7a:	2480      	movs	r4, #128	; 0x80
 8001f7c:	0364      	lsls	r4, r4, #13
 8001f7e:	4322      	orrs	r2, r4
 8001f80:	4c0e      	ldr	r4, [pc, #56]	; (8001fbc <__aeabi_d2iz+0x5c>)
 8001f82:	1ae4      	subs	r4, r4, r3
 8001f84:	2c1f      	cmp	r4, #31
 8001f86:	dd0c      	ble.n	8001fa2 <__aeabi_d2iz+0x42>
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <__aeabi_d2iz+0x60>)
 8001f8a:	1ac3      	subs	r3, r0, r3
 8001f8c:	40da      	lsrs	r2, r3
 8001f8e:	0013      	movs	r3, r2
 8001f90:	425c      	negs	r4, r3
 8001f92:	2900      	cmp	r1, #0
 8001f94:	d100      	bne.n	8001f98 <__aeabi_d2iz+0x38>
 8001f96:	001c      	movs	r4, r3
 8001f98:	0020      	movs	r0, r4
 8001f9a:	bd30      	pop	{r4, r5, pc}
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <__aeabi_d2iz+0x64>)
 8001f9e:	18cc      	adds	r4, r1, r3
 8001fa0:	e7fa      	b.n	8001f98 <__aeabi_d2iz+0x38>
 8001fa2:	4d09      	ldr	r5, [pc, #36]	; (8001fc8 <__aeabi_d2iz+0x68>)
 8001fa4:	40e0      	lsrs	r0, r4
 8001fa6:	46ac      	mov	ip, r5
 8001fa8:	4463      	add	r3, ip
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	4303      	orrs	r3, r0
 8001fb0:	e7ee      	b.n	8001f90 <__aeabi_d2iz+0x30>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	000003fe 	.word	0x000003fe
 8001fb8:	0000041d 	.word	0x0000041d
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	7fffffff 	.word	0x7fffffff
 8001fc8:	fffffbed 	.word	0xfffffbed

08001fcc <__aeabi_i2d>:
 8001fcc:	b570      	push	{r4, r5, r6, lr}
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d02d      	beq.n	800202e <__aeabi_i2d+0x62>
 8001fd2:	17c3      	asrs	r3, r0, #31
 8001fd4:	18c5      	adds	r5, r0, r3
 8001fd6:	405d      	eors	r5, r3
 8001fd8:	0fc4      	lsrs	r4, r0, #31
 8001fda:	0028      	movs	r0, r5
 8001fdc:	f000 f938 	bl	8002250 <__clzsi2>
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <__aeabi_i2d+0x6c>)
 8001fe2:	1a1b      	subs	r3, r3, r0
 8001fe4:	055b      	lsls	r3, r3, #21
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	280a      	cmp	r0, #10
 8001fea:	dd15      	ble.n	8002018 <__aeabi_i2d+0x4c>
 8001fec:	380b      	subs	r0, #11
 8001fee:	4085      	lsls	r5, r0
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	032d      	lsls	r5, r5, #12
 8001ff4:	0b2d      	lsrs	r5, r5, #12
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	032d      	lsls	r5, r5, #12
 8001ffc:	0d0a      	lsrs	r2, r1, #20
 8001ffe:	0b2d      	lsrs	r5, r5, #12
 8002000:	0512      	lsls	r2, r2, #20
 8002002:	432a      	orrs	r2, r5
 8002004:	4d0d      	ldr	r5, [pc, #52]	; (800203c <__aeabi_i2d+0x70>)
 8002006:	051b      	lsls	r3, r3, #20
 8002008:	402a      	ands	r2, r5
 800200a:	4313      	orrs	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	07e4      	lsls	r4, r4, #31
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	4323      	orrs	r3, r4
 8002014:	0019      	movs	r1, r3
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	0002      	movs	r2, r0
 800201a:	0029      	movs	r1, r5
 800201c:	3215      	adds	r2, #21
 800201e:	4091      	lsls	r1, r2
 8002020:	000a      	movs	r2, r1
 8002022:	210b      	movs	r1, #11
 8002024:	1a08      	subs	r0, r1, r0
 8002026:	40c5      	lsrs	r5, r0
 8002028:	032d      	lsls	r5, r5, #12
 800202a:	0b2d      	lsrs	r5, r5, #12
 800202c:	e7e3      	b.n	8001ff6 <__aeabi_i2d+0x2a>
 800202e:	2400      	movs	r4, #0
 8002030:	2300      	movs	r3, #0
 8002032:	2500      	movs	r5, #0
 8002034:	2200      	movs	r2, #0
 8002036:	e7de      	b.n	8001ff6 <__aeabi_i2d+0x2a>
 8002038:	0000041e 	.word	0x0000041e
 800203c:	800fffff 	.word	0x800fffff

08002040 <__aeabi_ui2d>:
 8002040:	b510      	push	{r4, lr}
 8002042:	1e04      	subs	r4, r0, #0
 8002044:	d025      	beq.n	8002092 <__aeabi_ui2d+0x52>
 8002046:	f000 f903 	bl	8002250 <__clzsi2>
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <__aeabi_ui2d+0x5c>)
 800204c:	1a1b      	subs	r3, r3, r0
 800204e:	055b      	lsls	r3, r3, #21
 8002050:	0d5b      	lsrs	r3, r3, #21
 8002052:	280a      	cmp	r0, #10
 8002054:	dd12      	ble.n	800207c <__aeabi_ui2d+0x3c>
 8002056:	380b      	subs	r0, #11
 8002058:	4084      	lsls	r4, r0
 800205a:	2200      	movs	r2, #0
 800205c:	0324      	lsls	r4, r4, #12
 800205e:	0b24      	lsrs	r4, r4, #12
 8002060:	2100      	movs	r1, #0
 8002062:	0010      	movs	r0, r2
 8002064:	0324      	lsls	r4, r4, #12
 8002066:	0d0a      	lsrs	r2, r1, #20
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0512      	lsls	r2, r2, #20
 800206c:	4322      	orrs	r2, r4
 800206e:	4c0c      	ldr	r4, [pc, #48]	; (80020a0 <__aeabi_ui2d+0x60>)
 8002070:	051b      	lsls	r3, r3, #20
 8002072:	4022      	ands	r2, r4
 8002074:	4313      	orrs	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	0859      	lsrs	r1, r3, #1
 800207a:	bd10      	pop	{r4, pc}
 800207c:	0002      	movs	r2, r0
 800207e:	0021      	movs	r1, r4
 8002080:	3215      	adds	r2, #21
 8002082:	4091      	lsls	r1, r2
 8002084:	000a      	movs	r2, r1
 8002086:	210b      	movs	r1, #11
 8002088:	1a08      	subs	r0, r1, r0
 800208a:	40c4      	lsrs	r4, r0
 800208c:	0324      	lsls	r4, r4, #12
 800208e:	0b24      	lsrs	r4, r4, #12
 8002090:	e7e6      	b.n	8002060 <__aeabi_ui2d+0x20>
 8002092:	2300      	movs	r3, #0
 8002094:	2400      	movs	r4, #0
 8002096:	2200      	movs	r2, #0
 8002098:	e7e2      	b.n	8002060 <__aeabi_ui2d+0x20>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	0000041e 	.word	0x0000041e
 80020a0:	800fffff 	.word	0x800fffff

080020a4 <__aeabi_f2d>:
 80020a4:	0041      	lsls	r1, r0, #1
 80020a6:	0e09      	lsrs	r1, r1, #24
 80020a8:	1c4b      	adds	r3, r1, #1
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	0246      	lsls	r6, r0, #9
 80020b0:	0a75      	lsrs	r5, r6, #9
 80020b2:	0fc4      	lsrs	r4, r0, #31
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	dd14      	ble.n	80020e2 <__aeabi_f2d+0x3e>
 80020b8:	23e0      	movs	r3, #224	; 0xe0
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	076d      	lsls	r5, r5, #29
 80020be:	0b36      	lsrs	r6, r6, #12
 80020c0:	18cb      	adds	r3, r1, r3
 80020c2:	2100      	movs	r1, #0
 80020c4:	0d0a      	lsrs	r2, r1, #20
 80020c6:	0028      	movs	r0, r5
 80020c8:	0512      	lsls	r2, r2, #20
 80020ca:	4d1c      	ldr	r5, [pc, #112]	; (800213c <__aeabi_f2d+0x98>)
 80020cc:	4332      	orrs	r2, r6
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	402a      	ands	r2, r5
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	4313      	orrs	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	07e4      	lsls	r4, r4, #31
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	4323      	orrs	r3, r4
 80020de:	0019      	movs	r1, r3
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d114      	bne.n	8002110 <__aeabi_f2d+0x6c>
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	d01e      	beq.n	8002128 <__aeabi_f2d+0x84>
 80020ea:	0028      	movs	r0, r5
 80020ec:	f000 f8b0 	bl	8002250 <__clzsi2>
 80020f0:	280a      	cmp	r0, #10
 80020f2:	dc1c      	bgt.n	800212e <__aeabi_f2d+0x8a>
 80020f4:	230b      	movs	r3, #11
 80020f6:	002a      	movs	r2, r5
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	0003      	movs	r3, r0
 80020fe:	3315      	adds	r3, #21
 8002100:	409d      	lsls	r5, r3
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <__aeabi_f2d+0x9c>)
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	1a1b      	subs	r3, r3, r0
 8002108:	055b      	lsls	r3, r3, #21
 800210a:	0b16      	lsrs	r6, r2, #12
 800210c:	0d5b      	lsrs	r3, r3, #21
 800210e:	e7d8      	b.n	80020c2 <__aeabi_f2d+0x1e>
 8002110:	2d00      	cmp	r5, #0
 8002112:	d006      	beq.n	8002122 <__aeabi_f2d+0x7e>
 8002114:	0b32      	lsrs	r2, r6, #12
 8002116:	2680      	movs	r6, #128	; 0x80
 8002118:	0336      	lsls	r6, r6, #12
 800211a:	076d      	lsls	r5, r5, #29
 800211c:	4316      	orrs	r6, r2
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <__aeabi_f2d+0xa0>)
 8002120:	e7cf      	b.n	80020c2 <__aeabi_f2d+0x1e>
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <__aeabi_f2d+0xa0>)
 8002124:	2600      	movs	r6, #0
 8002126:	e7cc      	b.n	80020c2 <__aeabi_f2d+0x1e>
 8002128:	2300      	movs	r3, #0
 800212a:	2600      	movs	r6, #0
 800212c:	e7c9      	b.n	80020c2 <__aeabi_f2d+0x1e>
 800212e:	0003      	movs	r3, r0
 8002130:	002a      	movs	r2, r5
 8002132:	3b0b      	subs	r3, #11
 8002134:	409a      	lsls	r2, r3
 8002136:	2500      	movs	r5, #0
 8002138:	e7e3      	b.n	8002102 <__aeabi_f2d+0x5e>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	800fffff 	.word	0x800fffff
 8002140:	00000389 	.word	0x00000389
 8002144:	000007ff 	.word	0x000007ff

08002148 <__aeabi_d2f>:
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	004c      	lsls	r4, r1, #1
 800214c:	0d64      	lsrs	r4, r4, #21
 800214e:	030b      	lsls	r3, r1, #12
 8002150:	1c62      	adds	r2, r4, #1
 8002152:	0a5b      	lsrs	r3, r3, #9
 8002154:	0f46      	lsrs	r6, r0, #29
 8002156:	0552      	lsls	r2, r2, #21
 8002158:	0fc9      	lsrs	r1, r1, #31
 800215a:	431e      	orrs	r6, r3
 800215c:	00c5      	lsls	r5, r0, #3
 800215e:	0d52      	lsrs	r2, r2, #21
 8002160:	2a01      	cmp	r2, #1
 8002162:	dd29      	ble.n	80021b8 <__aeabi_d2f+0x70>
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <__aeabi_d2f+0xfc>)
 8002166:	18e7      	adds	r7, r4, r3
 8002168:	2ffe      	cmp	r7, #254	; 0xfe
 800216a:	dc1c      	bgt.n	80021a6 <__aeabi_d2f+0x5e>
 800216c:	2f00      	cmp	r7, #0
 800216e:	dd3b      	ble.n	80021e8 <__aeabi_d2f+0xa0>
 8002170:	0180      	lsls	r0, r0, #6
 8002172:	1e43      	subs	r3, r0, #1
 8002174:	4198      	sbcs	r0, r3
 8002176:	2207      	movs	r2, #7
 8002178:	00f3      	lsls	r3, r6, #3
 800217a:	0f6d      	lsrs	r5, r5, #29
 800217c:	4303      	orrs	r3, r0
 800217e:	432b      	orrs	r3, r5
 8002180:	401a      	ands	r2, r3
 8002182:	2a00      	cmp	r2, #0
 8002184:	d004      	beq.n	8002190 <__aeabi_d2f+0x48>
 8002186:	220f      	movs	r2, #15
 8002188:	401a      	ands	r2, r3
 800218a:	2a04      	cmp	r2, #4
 800218c:	d000      	beq.n	8002190 <__aeabi_d2f+0x48>
 800218e:	3304      	adds	r3, #4
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	04d2      	lsls	r2, r2, #19
 8002194:	401a      	ands	r2, r3
 8002196:	d024      	beq.n	80021e2 <__aeabi_d2f+0x9a>
 8002198:	3701      	adds	r7, #1
 800219a:	b2fa      	uxtb	r2, r7
 800219c:	2fff      	cmp	r7, #255	; 0xff
 800219e:	d002      	beq.n	80021a6 <__aeabi_d2f+0x5e>
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	0a58      	lsrs	r0, r3, #9
 80021a4:	e001      	b.n	80021aa <__aeabi_d2f+0x62>
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	2000      	movs	r0, #0
 80021aa:	0240      	lsls	r0, r0, #9
 80021ac:	05d2      	lsls	r2, r2, #23
 80021ae:	0a40      	lsrs	r0, r0, #9
 80021b0:	07c9      	lsls	r1, r1, #31
 80021b2:	4310      	orrs	r0, r2
 80021b4:	4308      	orrs	r0, r1
 80021b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b8:	4335      	orrs	r5, r6
 80021ba:	2c00      	cmp	r4, #0
 80021bc:	d104      	bne.n	80021c8 <__aeabi_d2f+0x80>
 80021be:	2d00      	cmp	r5, #0
 80021c0:	d10a      	bne.n	80021d8 <__aeabi_d2f+0x90>
 80021c2:	2200      	movs	r2, #0
 80021c4:	2000      	movs	r0, #0
 80021c6:	e7f0      	b.n	80021aa <__aeabi_d2f+0x62>
 80021c8:	2d00      	cmp	r5, #0
 80021ca:	d0ec      	beq.n	80021a6 <__aeabi_d2f+0x5e>
 80021cc:	2080      	movs	r0, #128	; 0x80
 80021ce:	03c0      	lsls	r0, r0, #15
 80021d0:	4330      	orrs	r0, r6
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	e7e9      	b.n	80021aa <__aeabi_d2f+0x62>
 80021d6:	2400      	movs	r4, #0
 80021d8:	2300      	movs	r3, #0
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	0a58      	lsrs	r0, r3, #9
 80021de:	b2e2      	uxtb	r2, r4
 80021e0:	e7e3      	b.n	80021aa <__aeabi_d2f+0x62>
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	003c      	movs	r4, r7
 80021e6:	e7f8      	b.n	80021da <__aeabi_d2f+0x92>
 80021e8:	003b      	movs	r3, r7
 80021ea:	3317      	adds	r3, #23
 80021ec:	dbf3      	blt.n	80021d6 <__aeabi_d2f+0x8e>
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	4333      	orrs	r3, r6
 80021f4:	261e      	movs	r6, #30
 80021f6:	1bf6      	subs	r6, r6, r7
 80021f8:	2e1f      	cmp	r6, #31
 80021fa:	dd14      	ble.n	8002226 <__aeabi_d2f+0xde>
 80021fc:	2202      	movs	r2, #2
 80021fe:	4252      	negs	r2, r2
 8002200:	1bd7      	subs	r7, r2, r7
 8002202:	001a      	movs	r2, r3
 8002204:	40fa      	lsrs	r2, r7
 8002206:	0017      	movs	r7, r2
 8002208:	2e20      	cmp	r6, #32
 800220a:	d004      	beq.n	8002216 <__aeabi_d2f+0xce>
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <__aeabi_d2f+0x100>)
 800220e:	4694      	mov	ip, r2
 8002210:	4464      	add	r4, ip
 8002212:	40a3      	lsls	r3, r4
 8002214:	431d      	orrs	r5, r3
 8002216:	002b      	movs	r3, r5
 8002218:	1e5d      	subs	r5, r3, #1
 800221a:	41ab      	sbcs	r3, r5
 800221c:	2207      	movs	r2, #7
 800221e:	433b      	orrs	r3, r7
 8002220:	401a      	ands	r2, r3
 8002222:	2700      	movs	r7, #0
 8002224:	e7ad      	b.n	8002182 <__aeabi_d2f+0x3a>
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <__aeabi_d2f+0x104>)
 8002228:	0028      	movs	r0, r5
 800222a:	18a2      	adds	r2, r4, r2
 800222c:	4095      	lsls	r5, r2
 800222e:	4093      	lsls	r3, r2
 8002230:	1e6c      	subs	r4, r5, #1
 8002232:	41a5      	sbcs	r5, r4
 8002234:	40f0      	lsrs	r0, r6
 8002236:	2207      	movs	r2, #7
 8002238:	432b      	orrs	r3, r5
 800223a:	4303      	orrs	r3, r0
 800223c:	401a      	ands	r2, r3
 800223e:	2700      	movs	r7, #0
 8002240:	e79f      	b.n	8002182 <__aeabi_d2f+0x3a>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	fffffc80 	.word	0xfffffc80
 8002248:	fffffca2 	.word	0xfffffca2
 800224c:	fffffc82 	.word	0xfffffc82

08002250 <__clzsi2>:
 8002250:	211c      	movs	r1, #28
 8002252:	2301      	movs	r3, #1
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	4298      	cmp	r0, r3
 8002258:	d301      	bcc.n	800225e <__clzsi2+0xe>
 800225a:	0c00      	lsrs	r0, r0, #16
 800225c:	3910      	subs	r1, #16
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	4298      	cmp	r0, r3
 8002262:	d301      	bcc.n	8002268 <__clzsi2+0x18>
 8002264:	0a00      	lsrs	r0, r0, #8
 8002266:	3908      	subs	r1, #8
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	4298      	cmp	r0, r3
 800226c:	d301      	bcc.n	8002272 <__clzsi2+0x22>
 800226e:	0900      	lsrs	r0, r0, #4
 8002270:	3904      	subs	r1, #4
 8002272:	a202      	add	r2, pc, #8	; (adr r2, 800227c <__clzsi2+0x2c>)
 8002274:	5c10      	ldrb	r0, [r2, r0]
 8002276:	1840      	adds	r0, r0, r1
 8002278:	4770      	bx	lr
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	02020304 	.word	0x02020304
 8002280:	01010101 	.word	0x01010101
	...

0800228c <__divdi3>:
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	464e      	mov	r6, r9
 8002290:	4657      	mov	r7, sl
 8002292:	46de      	mov	lr, fp
 8002294:	4645      	mov	r5, r8
 8002296:	b5e0      	push	{r5, r6, r7, lr}
 8002298:	000f      	movs	r7, r1
 800229a:	2100      	movs	r1, #0
 800229c:	b083      	sub	sp, #12
 800229e:	0006      	movs	r6, r0
 80022a0:	4689      	mov	r9, r1
 80022a2:	2f00      	cmp	r7, #0
 80022a4:	da06      	bge.n	80022b4 <__divdi3+0x28>
 80022a6:	0039      	movs	r1, r7
 80022a8:	2700      	movs	r7, #0
 80022aa:	4246      	negs	r6, r0
 80022ac:	418f      	sbcs	r7, r1
 80022ae:	2101      	movs	r1, #1
 80022b0:	4249      	negs	r1, r1
 80022b2:	4689      	mov	r9, r1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da07      	bge.n	80022c8 <__divdi3+0x3c>
 80022b8:	4649      	mov	r1, r9
 80022ba:	43c9      	mvns	r1, r1
 80022bc:	0010      	movs	r0, r2
 80022be:	4689      	mov	r9, r1
 80022c0:	0019      	movs	r1, r3
 80022c2:	2300      	movs	r3, #0
 80022c4:	4242      	negs	r2, r0
 80022c6:	418b      	sbcs	r3, r1
 80022c8:	0034      	movs	r4, r6
 80022ca:	003d      	movs	r5, r7
 80022cc:	4692      	mov	sl, r2
 80022ce:	4698      	mov	r8, r3
 80022d0:	42bb      	cmp	r3, r7
 80022d2:	d869      	bhi.n	80023a8 <__divdi3+0x11c>
 80022d4:	d066      	beq.n	80023a4 <__divdi3+0x118>
 80022d6:	4641      	mov	r1, r8
 80022d8:	4650      	mov	r0, sl
 80022da:	f000 f8af 	bl	800243c <__clzdi2>
 80022de:	4683      	mov	fp, r0
 80022e0:	0039      	movs	r1, r7
 80022e2:	0030      	movs	r0, r6
 80022e4:	f000 f8aa 	bl	800243c <__clzdi2>
 80022e8:	465b      	mov	r3, fp
 80022ea:	1a1b      	subs	r3, r3, r0
 80022ec:	469c      	mov	ip, r3
 80022ee:	3b20      	subs	r3, #32
 80022f0:	469b      	mov	fp, r3
 80022f2:	d500      	bpl.n	80022f6 <__divdi3+0x6a>
 80022f4:	e075      	b.n	80023e2 <__divdi3+0x156>
 80022f6:	4651      	mov	r1, sl
 80022f8:	4658      	mov	r0, fp
 80022fa:	4081      	lsls	r1, r0
 80022fc:	000b      	movs	r3, r1
 80022fe:	4651      	mov	r1, sl
 8002300:	4660      	mov	r0, ip
 8002302:	4081      	lsls	r1, r0
 8002304:	000a      	movs	r2, r1
 8002306:	42bb      	cmp	r3, r7
 8002308:	d861      	bhi.n	80023ce <__divdi3+0x142>
 800230a:	d05e      	beq.n	80023ca <__divdi3+0x13e>
 800230c:	0034      	movs	r4, r6
 800230e:	003d      	movs	r5, r7
 8002310:	4659      	mov	r1, fp
 8002312:	1aa4      	subs	r4, r4, r2
 8002314:	419d      	sbcs	r5, r3
 8002316:	2900      	cmp	r1, #0
 8002318:	da00      	bge.n	800231c <__divdi3+0x90>
 800231a:	e07a      	b.n	8002412 <__divdi3+0x186>
 800231c:	2100      	movs	r1, #0
 800231e:	2000      	movs	r0, #0
 8002320:	2601      	movs	r6, #1
 8002322:	9000      	str	r0, [sp, #0]
 8002324:	9101      	str	r1, [sp, #4]
 8002326:	4659      	mov	r1, fp
 8002328:	408e      	lsls	r6, r1
 800232a:	9601      	str	r6, [sp, #4]
 800232c:	4661      	mov	r1, ip
 800232e:	2601      	movs	r6, #1
 8002330:	408e      	lsls	r6, r1
 8002332:	4661      	mov	r1, ip
 8002334:	9600      	str	r6, [sp, #0]
 8002336:	2900      	cmp	r1, #0
 8002338:	d050      	beq.n	80023dc <__divdi3+0x150>
 800233a:	07d9      	lsls	r1, r3, #31
 800233c:	0856      	lsrs	r6, r2, #1
 800233e:	085f      	lsrs	r7, r3, #1
 8002340:	430e      	orrs	r6, r1
 8002342:	4663      	mov	r3, ip
 8002344:	e00e      	b.n	8002364 <__divdi3+0xd8>
 8002346:	42af      	cmp	r7, r5
 8002348:	d101      	bne.n	800234e <__divdi3+0xc2>
 800234a:	42a6      	cmp	r6, r4
 800234c:	d80c      	bhi.n	8002368 <__divdi3+0xdc>
 800234e:	1ba4      	subs	r4, r4, r6
 8002350:	41bd      	sbcs	r5, r7
 8002352:	2101      	movs	r1, #1
 8002354:	1924      	adds	r4, r4, r4
 8002356:	416d      	adcs	r5, r5
 8002358:	2200      	movs	r2, #0
 800235a:	3b01      	subs	r3, #1
 800235c:	1864      	adds	r4, r4, r1
 800235e:	4155      	adcs	r5, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <__divdi3+0xe6>
 8002364:	42af      	cmp	r7, r5
 8002366:	d9ee      	bls.n	8002346 <__divdi3+0xba>
 8002368:	3b01      	subs	r3, #1
 800236a:	1924      	adds	r4, r4, r4
 800236c:	416d      	adcs	r5, r5
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f8      	bne.n	8002364 <__divdi3+0xd8>
 8002372:	9800      	ldr	r0, [sp, #0]
 8002374:	9901      	ldr	r1, [sp, #4]
 8002376:	465b      	mov	r3, fp
 8002378:	1900      	adds	r0, r0, r4
 800237a:	4169      	adcs	r1, r5
 800237c:	2b00      	cmp	r3, #0
 800237e:	db3d      	blt.n	80023fc <__divdi3+0x170>
 8002380:	002e      	movs	r6, r5
 8002382:	40de      	lsrs	r6, r3
 8002384:	4663      	mov	r3, ip
 8002386:	002c      	movs	r4, r5
 8002388:	40dc      	lsrs	r4, r3
 800238a:	465b      	mov	r3, fp
 800238c:	2b00      	cmp	r3, #0
 800238e:	db4b      	blt.n	8002428 <__divdi3+0x19c>
 8002390:	0034      	movs	r4, r6
 8002392:	465d      	mov	r5, fp
 8002394:	40ac      	lsls	r4, r5
 8002396:	0023      	movs	r3, r4
 8002398:	4664      	mov	r4, ip
 800239a:	40a6      	lsls	r6, r4
 800239c:	0032      	movs	r2, r6
 800239e:	1a80      	subs	r0, r0, r2
 80023a0:	4199      	sbcs	r1, r3
 80023a2:	e003      	b.n	80023ac <__divdi3+0x120>
 80023a4:	42b2      	cmp	r2, r6
 80023a6:	d996      	bls.n	80022d6 <__divdi3+0x4a>
 80023a8:	2000      	movs	r0, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	464b      	mov	r3, r9
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <__divdi3+0x130>
 80023b2:	0003      	movs	r3, r0
 80023b4:	000c      	movs	r4, r1
 80023b6:	2100      	movs	r1, #0
 80023b8:	4258      	negs	r0, r3
 80023ba:	41a1      	sbcs	r1, r4
 80023bc:	b003      	add	sp, #12
 80023be:	bc3c      	pop	{r2, r3, r4, r5}
 80023c0:	4690      	mov	r8, r2
 80023c2:	4699      	mov	r9, r3
 80023c4:	46a2      	mov	sl, r4
 80023c6:	46ab      	mov	fp, r5
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	42b1      	cmp	r1, r6
 80023cc:	d99e      	bls.n	800230c <__divdi3+0x80>
 80023ce:	2100      	movs	r1, #0
 80023d0:	2000      	movs	r0, #0
 80023d2:	9000      	str	r0, [sp, #0]
 80023d4:	9101      	str	r1, [sp, #4]
 80023d6:	4661      	mov	r1, ip
 80023d8:	2900      	cmp	r1, #0
 80023da:	d1ae      	bne.n	800233a <__divdi3+0xae>
 80023dc:	9800      	ldr	r0, [sp, #0]
 80023de:	9901      	ldr	r1, [sp, #4]
 80023e0:	e7e4      	b.n	80023ac <__divdi3+0x120>
 80023e2:	2320      	movs	r3, #32
 80023e4:	4662      	mov	r2, ip
 80023e6:	4651      	mov	r1, sl
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	40d9      	lsrs	r1, r3
 80023ec:	4640      	mov	r0, r8
 80023ee:	9100      	str	r1, [sp, #0]
 80023f0:	4661      	mov	r1, ip
 80023f2:	4088      	lsls	r0, r1
 80023f4:	0003      	movs	r3, r0
 80023f6:	9900      	ldr	r1, [sp, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	e780      	b.n	80022fe <__divdi3+0x72>
 80023fc:	4662      	mov	r2, ip
 80023fe:	2320      	movs	r3, #32
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	002a      	movs	r2, r5
 8002404:	409a      	lsls	r2, r3
 8002406:	0026      	movs	r6, r4
 8002408:	0013      	movs	r3, r2
 800240a:	4662      	mov	r2, ip
 800240c:	40d6      	lsrs	r6, r2
 800240e:	431e      	orrs	r6, r3
 8002410:	e7b8      	b.n	8002384 <__divdi3+0xf8>
 8002412:	4661      	mov	r1, ip
 8002414:	2620      	movs	r6, #32
 8002416:	2701      	movs	r7, #1
 8002418:	1a76      	subs	r6, r6, r1
 800241a:	2000      	movs	r0, #0
 800241c:	2100      	movs	r1, #0
 800241e:	40f7      	lsrs	r7, r6
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	9101      	str	r1, [sp, #4]
 8002424:	9701      	str	r7, [sp, #4]
 8002426:	e781      	b.n	800232c <__divdi3+0xa0>
 8002428:	4667      	mov	r7, ip
 800242a:	2320      	movs	r3, #32
 800242c:	4662      	mov	r2, ip
 800242e:	0035      	movs	r5, r6
 8002430:	40bc      	lsls	r4, r7
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	40dd      	lsrs	r5, r3
 8002436:	0023      	movs	r3, r4
 8002438:	432b      	orrs	r3, r5
 800243a:	e7ad      	b.n	8002398 <__divdi3+0x10c>

0800243c <__clzdi2>:
 800243c:	b510      	push	{r4, lr}
 800243e:	2900      	cmp	r1, #0
 8002440:	d103      	bne.n	800244a <__clzdi2+0xe>
 8002442:	f7ff ff05 	bl	8002250 <__clzsi2>
 8002446:	3020      	adds	r0, #32
 8002448:	e002      	b.n	8002450 <__clzdi2+0x14>
 800244a:	1c08      	adds	r0, r1, #0
 800244c:	f7ff ff00 	bl	8002250 <__clzsi2>
 8002450:	bd10      	pop	{r4, pc}
 8002452:	46c0      	nop			; (mov r8, r8)

08002454 <bme280_init>:
//	.size = 2
//};

// initialise BME280 by setting settings and mode to forced
void bme280_init(I2C_HandleTypeDef* hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	// set humidity settings, followed by other settings
	write_i2c_register(hi2c, &bme280_ctrl_hum, BME280_ADDR);
 800245c:	4913      	ldr	r1, [pc, #76]	; (80024ac <bme280_init+0x58>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2276      	movs	r2, #118	; 0x76
 8002462:	0018      	movs	r0, r3
 8002464:	f000 fe6e 	bl	8003144 <write_i2c_register>
	write_i2c_register(hi2c, &bme280_ctrl_meas, BME280_ADDR);
 8002468:	4911      	ldr	r1, [pc, #68]	; (80024b0 <bme280_init+0x5c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2276      	movs	r2, #118	; 0x76
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fe68 	bl	8003144 <write_i2c_register>
	read_i2c_register(hi2c, &calibration_data_temp, BME280_ADDR);
 8002474:	490f      	ldr	r1, [pc, #60]	; (80024b4 <bme280_init+0x60>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2276      	movs	r2, #118	; 0x76
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fe89 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &calibration_data_press, BME280_ADDR);
 8002480:	490d      	ldr	r1, [pc, #52]	; (80024b8 <bme280_init+0x64>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2276      	movs	r2, #118	; 0x76
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fe83 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &calibration_data_hum_1, BME280_ADDR);
 800248c:	490b      	ldr	r1, [pc, #44]	; (80024bc <bme280_init+0x68>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2276      	movs	r2, #118	; 0x76
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fe7d 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &calibration_data_hum_2, BME280_ADDR);
 8002498:	4909      	ldr	r1, [pc, #36]	; (80024c0 <bme280_init+0x6c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2276      	movs	r2, #118	; 0x76
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 fe77 	bl	8003192 <read_i2c_register>
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000014 	.word	0x20000014
 80024b4:	20000044 	.word	0x20000044
 80024b8:	20000050 	.word	0x20000050
 80024bc:	2000005c 	.word	0x2000005c
 80024c0:	20000068 	.word	0x20000068

080024c4 <bme280_read>:

// read temperature, humidity, pressure from registers
void bme280_read(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	// set sensor back to force mode
	write_i2c_register(hi2c, &bme280_ctrl_meas, BME280_ADDR);
 80024cc:	4936      	ldr	r1, [pc, #216]	; (80025a8 <bme280_read+0xe4>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2276      	movs	r2, #118	; 0x76
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fe36 	bl	8003144 <write_i2c_register>
	// read ADC registers
	read_i2c_register(hi2c, &bme280_temp, BME280_ADDR);
 80024d8:	4934      	ldr	r1, [pc, #208]	; (80025ac <bme280_read+0xe8>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2276      	movs	r2, #118	; 0x76
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 fe57 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &bme280_hum, BME280_ADDR);
 80024e4:	4932      	ldr	r1, [pc, #200]	; (80025b0 <bme280_read+0xec>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2276      	movs	r2, #118	; 0x76
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fe51 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &bme280_press, BME280_ADDR);
 80024f0:	4930      	ldr	r1, [pc, #192]	; (80025b4 <bme280_read+0xf0>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2276      	movs	r2, #118	; 0x76
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 fe4b 	bl	8003192 <read_i2c_register>
	// compensate the raw data
	if(bme280_temp.status == HAL_OK) {
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <bme280_read+0xe8>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <bme280_read+0x68>
		sensor_data.air_temperature = temp_calibrate()/100.0;
 8002504:	f000 f860 	bl	80025c8 <temp_calibrate>
 8002508:	0003      	movs	r3, r0
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff fd5e 	bl	8001fcc <__aeabi_i2d>
 8002510:	2200      	movs	r2, #0
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <bme280_read+0xf4>)
 8002514:	f7fe fb44 	bl	8000ba0 <__aeabi_ddiv>
 8002518:	0003      	movs	r3, r0
 800251a:	000c      	movs	r4, r1
 800251c:	0018      	movs	r0, r3
 800251e:	0021      	movs	r1, r4
 8002520:	f7ff fe12 	bl	8002148 <__aeabi_d2f>
 8002524:	1c02      	adds	r2, r0, #0
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <bme280_read+0xf8>)
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	e002      	b.n	8002532 <bme280_read+0x6e>
	} else {
		sensor_data.air_temperature = 0;
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <bme280_read+0xf8>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
	}
	if(bme280_press.status == HAL_OK) {
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <bme280_read+0xf0>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <bme280_read+0x9e>
		sensor_data.air_pressure = press_calibrate()/256.0;
 800253a:	f000 f8bd 	bl	80026b8 <press_calibrate>
 800253e:	0003      	movs	r3, r0
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff fd7d 	bl	8002040 <__aeabi_ui2d>
 8002546:	2200      	movs	r2, #0
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <bme280_read+0xfc>)
 800254a:	f7fe fb29 	bl	8000ba0 <__aeabi_ddiv>
 800254e:	0003      	movs	r3, r0
 8002550:	000c      	movs	r4, r1
 8002552:	0018      	movs	r0, r3
 8002554:	0021      	movs	r1, r4
 8002556:	f7ff fdf7 	bl	8002148 <__aeabi_d2f>
 800255a:	1c02      	adds	r2, r0, #0
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <bme280_read+0xf8>)
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	e002      	b.n	8002568 <bme280_read+0xa4>
	} else {
		sensor_data.air_pressure = 0;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <bme280_read+0xf8>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
	}
	if(bme280_hum.status == HAL_OK) {
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <bme280_read+0xec>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d113      	bne.n	8002598 <bme280_read+0xd4>
		sensor_data.air_humidity = hum_calibrate()/1024.0;
 8002570:	f000 fb1a 	bl	8002ba8 <hum_calibrate>
 8002574:	0003      	movs	r3, r0
 8002576:	0018      	movs	r0, r3
 8002578:	f7ff fd62 	bl	8002040 <__aeabi_ui2d>
 800257c:	2200      	movs	r2, #0
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <bme280_read+0x100>)
 8002580:	f7fe fb0e 	bl	8000ba0 <__aeabi_ddiv>
 8002584:	0003      	movs	r3, r0
 8002586:	000c      	movs	r4, r1
 8002588:	0018      	movs	r0, r3
 800258a:	0021      	movs	r1, r4
 800258c:	f7ff fddc 	bl	8002148 <__aeabi_d2f>
 8002590:	1c02      	adds	r2, r0, #0
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <bme280_read+0xf8>)
 8002594:	605a      	str	r2, [r3, #4]
	} else {
		sensor_data.air_humidity = 0;
	}

}
 8002596:	e002      	b.n	800259e <bme280_read+0xda>
		sensor_data.air_humidity = 0;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <bme280_read+0xf8>)
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b003      	add	sp, #12
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000014 	.word	0x20000014
 80025ac:	20000020 	.word	0x20000020
 80025b0:	2000002c 	.word	0x2000002c
 80025b4:	20000038 	.word	0x20000038
 80025b8:	40590000 	.word	0x40590000
 80025bc:	200002d0 	.word	0x200002d0
 80025c0:	40700000 	.word	0x40700000
 80025c4:	40900000 	.word	0x40900000

080025c8 <temp_calibrate>:


int32_t temp_calibrate(void)
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
	int32_t adc_temp = ((uint32_t)bme280_temp.data[0] << 12) | ((uint32_t)bme280_temp.data[1] << 4) | (bme280_temp.data[2] >> 4);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <temp_calibrate+0xe4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	031a      	lsls	r2, r3, #12
 80025d6:	4b35      	ldr	r3, [pc, #212]	; (80026ac <temp_calibrate+0xe4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	3301      	adds	r3, #1
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	431a      	orrs	r2, r3
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <temp_calibrate+0xe4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	3302      	adds	r3, #2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
	int32_t var1, var2, result_t;
	uint16_t dig_t1 = calibration_data_temp.data[0] | ((uint16_t)calibration_data_temp.data[1] << 8);
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <temp_calibrate+0xe8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <temp_calibrate+0xe8>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	3301      	adds	r3, #1
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	b21b      	sxth	r3, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	b21a      	sxth	r2, r3
 800260a:	2012      	movs	r0, #18
 800260c:	183b      	adds	r3, r7, r0
 800260e:	801a      	strh	r2, [r3, #0]
	int16_t dig_t2 = calibration_data_temp.data[2] | ((int16_t)calibration_data_temp.data[3] << 8);
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <temp_calibrate+0xe8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	3302      	adds	r3, #2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b219      	sxth	r1, r3
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <temp_calibrate+0xe8>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	3303      	adds	r3, #3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	b21a      	sxth	r2, r3
 8002626:	2410      	movs	r4, #16
 8002628:	193b      	adds	r3, r7, r4
 800262a:	430a      	orrs	r2, r1
 800262c:	801a      	strh	r2, [r3, #0]
	int16_t dig_t3 = calibration_data_temp.data[4] | ((int16_t)calibration_data_temp.data[5] << 8);
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <temp_calibrate+0xe8>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b219      	sxth	r1, r3
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <temp_calibrate+0xe8>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	3305      	adds	r3, #5
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	250e      	movs	r5, #14
 8002646:	197b      	adds	r3, r7, r5
 8002648:	430a      	orrs	r2, r1
 800264a:	801a      	strh	r2, [r3, #0]
	// int16_t dig_t3 = dig_t3_reg.data[0];
	var1 = ((((adc_temp>>3) - ((int32_t)dig_t1<<1))) * ((int32_t)dig_t2)) >> 11;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	10da      	asrs	r2, r3, #3
 8002650:	183b      	adds	r3, r7, r0
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	193a      	adds	r2, r7, r4
 800265a:	2100      	movs	r1, #0
 800265c:	5e52      	ldrsh	r2, [r2, r1]
 800265e:	4353      	muls	r3, r2
 8002660:	12db      	asrs	r3, r3, #11
 8002662:	60bb      	str	r3, [r7, #8]
	var2 = (((((adc_temp>>4) - ((int32_t)dig_t1)) * ((adc_temp>>4) - ((int32_t)dig_t1)))>>12) * ((int32_t)dig_t3))>>14;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	111a      	asrs	r2, r3, #4
 8002668:	183b      	adds	r3, r7, r0
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	1111      	asrs	r1, r2, #4
 8002672:	183a      	adds	r2, r7, r0
 8002674:	8812      	ldrh	r2, [r2, #0]
 8002676:	1a8a      	subs	r2, r1, r2
 8002678:	4353      	muls	r3, r2
 800267a:	131b      	asrs	r3, r3, #12
 800267c:	197a      	adds	r2, r7, r5
 800267e:	2100      	movs	r1, #0
 8002680:	5e52      	ldrsh	r2, [r2, r1]
 8002682:	4353      	muls	r3, r2
 8002684:	139b      	asrs	r3, r3, #14
 8002686:	607b      	str	r3, [r7, #4]
	temp_fine = var1 + var2;
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	18d2      	adds	r2, r2, r3
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <temp_calibrate+0xec>)
 8002690:	601a      	str	r2, [r3, #0]
	result_t = (temp_fine * 5 + 128) >> 8;
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <temp_calibrate+0xec>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	0013      	movs	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	189b      	adds	r3, r3, r2
 800269c:	3380      	adds	r3, #128	; 0x80
 800269e:	121b      	asrs	r3, r3, #8
 80026a0:	603b      	str	r3, [r7, #0]
	return result_t;
 80026a2:	683b      	ldr	r3, [r7, #0]
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b006      	add	sp, #24
 80026aa:	bdb0      	pop	{r4, r5, r7, pc}
 80026ac:	20000020 	.word	0x20000020
 80026b0:	20000044 	.word	0x20000044
 80026b4:	200002e8 	.word	0x200002e8

080026b8 <press_calibrate>:

uint32_t press_calibrate(void)
{
 80026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ba:	b0b1      	sub	sp, #196	; 0xc4
 80026bc:	af00      	add	r7, sp, #0
	int32_t adc_press = ((uint32_t)bme280_press.data[0] << 12) | ((uint32_t)bme280_press.data[1] << 4) | (bme280_press.data[2] >> 4);
 80026be:	4bd1      	ldr	r3, [pc, #836]	; (8002a04 <press_calibrate+0x34c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	031a      	lsls	r2, r3, #12
 80026c6:	4bcf      	ldr	r3, [pc, #828]	; (8002a04 <press_calibrate+0x34c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	3301      	adds	r3, #1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	431a      	orrs	r2, r3
 80026d2:	4bcc      	ldr	r3, [pc, #816]	; (8002a04 <press_calibrate+0x34c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	3302      	adds	r3, #2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	22bc      	movs	r2, #188	; 0xbc
 80026e2:	18ba      	adds	r2, r7, r2
 80026e4:	6013      	str	r3, [r2, #0]
	uint16_t dig_p1 = calibration_data_press.data[0] | ((uint16_t)calibration_data_press.data[1] << 8);
 80026e6:	4bc8      	ldr	r3, [pc, #800]	; (8002a08 <press_calibrate+0x350>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	4bc6      	ldr	r3, [pc, #792]	; (8002a08 <press_calibrate+0x350>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	222a      	movs	r2, #42	; 0x2a
 8002700:	2190      	movs	r1, #144	; 0x90
 8002702:	468c      	mov	ip, r1
 8002704:	44bc      	add	ip, r7
 8002706:	4462      	add	r2, ip
 8002708:	8013      	strh	r3, [r2, #0]
	int16_t dig_p2 = calibration_data_press.data[2] | ((uint16_t)calibration_data_press.data[3] << 8);
 800270a:	4bbf      	ldr	r3, [pc, #764]	; (8002a08 <press_calibrate+0x350>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	3302      	adds	r3, #2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b219      	sxth	r1, r3
 8002714:	4bbc      	ldr	r3, [pc, #752]	; (8002a08 <press_calibrate+0x350>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	3303      	adds	r3, #3
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	b21b      	sxth	r3, r3
 8002720:	2028      	movs	r0, #40	; 0x28
 8002722:	2290      	movs	r2, #144	; 0x90
 8002724:	18bc      	adds	r4, r7, r2
 8002726:	1822      	adds	r2, r4, r0
 8002728:	430b      	orrs	r3, r1
 800272a:	8013      	strh	r3, [r2, #0]
	int16_t dig_p3 = calibration_data_press.data[4] | ((uint16_t)calibration_data_press.data[5] << 8);
 800272c:	4bb6      	ldr	r3, [pc, #728]	; (8002a08 <press_calibrate+0x350>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b219      	sxth	r1, r3
 8002736:	4bb4      	ldr	r3, [pc, #720]	; (8002a08 <press_calibrate+0x350>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	3305      	adds	r3, #5
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	b21b      	sxth	r3, r3
 8002742:	2426      	movs	r4, #38	; 0x26
 8002744:	2290      	movs	r2, #144	; 0x90
 8002746:	18b8      	adds	r0, r7, r2
 8002748:	1902      	adds	r2, r0, r4
 800274a:	430b      	orrs	r3, r1
 800274c:	8013      	strh	r3, [r2, #0]
	int16_t dig_p4 = calibration_data_press.data[6] | ((uint16_t)calibration_data_press.data[7] << 8);
 800274e:	4bae      	ldr	r3, [pc, #696]	; (8002a08 <press_calibrate+0x350>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	3306      	adds	r3, #6
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b219      	sxth	r1, r3
 8002758:	4bab      	ldr	r3, [pc, #684]	; (8002a08 <press_calibrate+0x350>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	3307      	adds	r3, #7
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	b21b      	sxth	r3, r3
 8002764:	2224      	movs	r2, #36	; 0x24
 8002766:	2090      	movs	r0, #144	; 0x90
 8002768:	4684      	mov	ip, r0
 800276a:	44bc      	add	ip, r7
 800276c:	4462      	add	r2, ip
 800276e:	430b      	orrs	r3, r1
 8002770:	8013      	strh	r3, [r2, #0]
	int16_t dig_p5 = calibration_data_press.data[8] | ((uint16_t)calibration_data_press.data[9] << 8);
 8002772:	4ba5      	ldr	r3, [pc, #660]	; (8002a08 <press_calibrate+0x350>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	3308      	adds	r3, #8
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b219      	sxth	r1, r3
 800277c:	4ba2      	ldr	r3, [pc, #648]	; (8002a08 <press_calibrate+0x350>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	3309      	adds	r3, #9
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	b21b      	sxth	r3, r3
 8002788:	2022      	movs	r0, #34	; 0x22
 800278a:	2290      	movs	r2, #144	; 0x90
 800278c:	18ba      	adds	r2, r7, r2
 800278e:	1812      	adds	r2, r2, r0
 8002790:	430b      	orrs	r3, r1
 8002792:	8013      	strh	r3, [r2, #0]
	int16_t dig_p6 = calibration_data_press.data[10] | ((uint16_t)calibration_data_press.data[11] << 8);
 8002794:	4b9c      	ldr	r3, [pc, #624]	; (8002a08 <press_calibrate+0x350>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	330a      	adds	r3, #10
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b219      	sxth	r1, r3
 800279e:	4b9a      	ldr	r3, [pc, #616]	; (8002a08 <press_calibrate+0x350>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	330b      	adds	r3, #11
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	2420      	movs	r4, #32
 80027ac:	2290      	movs	r2, #144	; 0x90
 80027ae:	18ba      	adds	r2, r7, r2
 80027b0:	1912      	adds	r2, r2, r4
 80027b2:	430b      	orrs	r3, r1
 80027b4:	8013      	strh	r3, [r2, #0]
	int16_t dig_p7 = calibration_data_press.data[12] | ((uint16_t)calibration_data_press.data[13] << 8);
 80027b6:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <press_calibrate+0x350>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	330c      	adds	r3, #12
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b219      	sxth	r1, r3
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <press_calibrate+0x350>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	330d      	adds	r3, #13
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	221e      	movs	r2, #30
 80027ce:	2090      	movs	r0, #144	; 0x90
 80027d0:	4684      	mov	ip, r0
 80027d2:	44bc      	add	ip, r7
 80027d4:	4462      	add	r2, ip
 80027d6:	430b      	orrs	r3, r1
 80027d8:	8013      	strh	r3, [r2, #0]
	int16_t dig_p8 = calibration_data_press.data[14] | ((uint16_t)calibration_data_press.data[15] << 8);
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <press_calibrate+0x350>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	330e      	adds	r3, #14
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b219      	sxth	r1, r3
 80027e4:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <press_calibrate+0x350>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	330f      	adds	r3, #15
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	221c      	movs	r2, #28
 80027f2:	2090      	movs	r0, #144	; 0x90
 80027f4:	4684      	mov	ip, r0
 80027f6:	44bc      	add	ip, r7
 80027f8:	4462      	add	r2, ip
 80027fa:	430b      	orrs	r3, r1
 80027fc:	8013      	strh	r3, [r2, #0]
	int16_t dig_p9 = calibration_data_press.data[16] | ((uint16_t)calibration_data_press.data[17] << 8);
 80027fe:	4b82      	ldr	r3, [pc, #520]	; (8002a08 <press_calibrate+0x350>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	3310      	adds	r3, #16
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b219      	sxth	r1, r3
 8002808:	4b7f      	ldr	r3, [pc, #508]	; (8002a08 <press_calibrate+0x350>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	3311      	adds	r3, #17
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21b      	sxth	r3, r3
 8002814:	221a      	movs	r2, #26
 8002816:	2090      	movs	r0, #144	; 0x90
 8002818:	4684      	mov	ip, r0
 800281a:	44bc      	add	ip, r7
 800281c:	4462      	add	r2, ip
 800281e:	430b      	orrs	r3, r1
 8002820:	8013      	strh	r3, [r2, #0]
	int64_t var1, var2, result_p;
	var1 = ((int64_t)temp_fine) - 128000;
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <press_calibrate+0x354>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	65bb      	str	r3, [r7, #88]	; 0x58
 8002828:	17db      	asrs	r3, r3, #31
 800282a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282c:	4b78      	ldr	r3, [pc, #480]	; (8002a10 <press_calibrate+0x358>)
 800282e:	2401      	movs	r4, #1
 8002830:	4264      	negs	r4, r4
 8002832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002836:	18c9      	adds	r1, r1, r3
 8002838:	4162      	adcs	r2, r4
 800283a:	000b      	movs	r3, r1
 800283c:	0014      	movs	r4, r2
 800283e:	21a0      	movs	r1, #160	; 0xa0
 8002840:	187a      	adds	r2, r7, r1
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	6054      	str	r4, [r2, #4]
	var2 = var1 * var1 * (int64_t)dig_p6;
 8002846:	187a      	adds	r2, r7, r1
 8002848:	6853      	ldr	r3, [r2, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	1878      	adds	r0, r7, r1
 800284e:	6841      	ldr	r1, [r0, #4]
 8002850:	6800      	ldr	r0, [r0, #0]
 8002852:	f7fd fe43 	bl	80004dc <__aeabi_lmul>
 8002856:	0003      	movs	r3, r0
 8002858:	000c      	movs	r4, r1
 800285a:	0018      	movs	r0, r3
 800285c:	0021      	movs	r1, r4
 800285e:	2320      	movs	r3, #32
 8002860:	2290      	movs	r2, #144	; 0x90
 8002862:	4694      	mov	ip, r2
 8002864:	44bc      	add	ip, r7
 8002866:	4463      	add	r3, ip
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b21b      	sxth	r3, r3
 800286c:	653b      	str	r3, [r7, #80]	; 0x50
 800286e:	17db      	asrs	r3, r3, #31
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
 8002872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002876:	f7fd fe31 	bl	80004dc <__aeabi_lmul>
 800287a:	0003      	movs	r3, r0
 800287c:	000c      	movs	r4, r1
 800287e:	2298      	movs	r2, #152	; 0x98
 8002880:	18b8      	adds	r0, r7, r2
 8002882:	6003      	str	r3, [r0, #0]
 8002884:	6044      	str	r4, [r0, #4]
	var2 = var2 + ((var1*(int64_t)dig_p5)<<17);
 8002886:	2122      	movs	r1, #34	; 0x22
 8002888:	2390      	movs	r3, #144	; 0x90
 800288a:	18f8      	adds	r0, r7, r3
 800288c:	1843      	adds	r3, r0, r1
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b21b      	sxth	r3, r3
 8002892:	64bb      	str	r3, [r7, #72]	; 0x48
 8002894:	17db      	asrs	r3, r3, #31
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002898:	21a0      	movs	r1, #160	; 0xa0
 800289a:	1878      	adds	r0, r7, r1
 800289c:	6802      	ldr	r2, [r0, #0]
 800289e:	6843      	ldr	r3, [r0, #4]
 80028a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028a4:	f7fd fe1a 	bl	80004dc <__aeabi_lmul>
 80028a8:	0003      	movs	r3, r0
 80028aa:	000c      	movs	r4, r1
 80028ac:	0bda      	lsrs	r2, r3, #15
 80028ae:	0466      	lsls	r6, r4, #17
 80028b0:	4316      	orrs	r6, r2
 80028b2:	045d      	lsls	r5, r3, #17
 80028b4:	2298      	movs	r2, #152	; 0x98
 80028b6:	18b8      	adds	r0, r7, r2
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	6844      	ldr	r4, [r0, #4]
 80028bc:	195b      	adds	r3, r3, r5
 80028be:	4174      	adcs	r4, r6
 80028c0:	18b8      	adds	r0, r7, r2
 80028c2:	6003      	str	r3, [r0, #0]
 80028c4:	6044      	str	r4, [r0, #4]
	var2 = var2 + (((int64_t)dig_p4)<<35);
 80028c6:	2324      	movs	r3, #36	; 0x24
 80028c8:	2090      	movs	r0, #144	; 0x90
 80028ca:	4684      	mov	ip, r0
 80028cc:	44bc      	add	ip, r7
 80028ce:	4463      	add	r3, ip
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
 80028d6:	17db      	asrs	r3, r3, #31
 80028d8:	647b      	str	r3, [r7, #68]	; 0x44
 80028da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	2300      	movs	r3, #0
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e4:	0010      	movs	r0, r2
 80028e6:	18ba      	adds	r2, r7, r2
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	6854      	ldr	r4, [r2, #4]
 80028ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f0:	185b      	adds	r3, r3, r1
 80028f2:	4154      	adcs	r4, r2
 80028f4:	0002      	movs	r2, r0
 80028f6:	18ba      	adds	r2, r7, r2
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	6054      	str	r4, [r2, #4]
	var1 = ((var1*var1*(int64_t)dig_p3)>>8) + ((var1 * (int64_t)dig_p2)<<12);
 80028fc:	25a0      	movs	r5, #160	; 0xa0
 80028fe:	197a      	adds	r2, r7, r5
 8002900:	6853      	ldr	r3, [r2, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	1979      	adds	r1, r7, r5
 8002906:	6808      	ldr	r0, [r1, #0]
 8002908:	6849      	ldr	r1, [r1, #4]
 800290a:	f7fd fde7 	bl	80004dc <__aeabi_lmul>
 800290e:	0003      	movs	r3, r0
 8002910:	000c      	movs	r4, r1
 8002912:	0018      	movs	r0, r3
 8002914:	0021      	movs	r1, r4
 8002916:	2426      	movs	r4, #38	; 0x26
 8002918:	2690      	movs	r6, #144	; 0x90
 800291a:	19bb      	adds	r3, r7, r6
 800291c:	191b      	adds	r3, r3, r4
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b21b      	sxth	r3, r3
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
 8002924:	17db      	asrs	r3, r3, #31
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
 8002928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	f7fd fdd6 	bl	80004dc <__aeabi_lmul>
 8002930:	0003      	movs	r3, r0
 8002932:	000c      	movs	r4, r1
 8002934:	0622      	lsls	r2, r4, #24
 8002936:	4694      	mov	ip, r2
 8002938:	0a19      	lsrs	r1, r3, #8
 800293a:	2088      	movs	r0, #136	; 0x88
 800293c:	183a      	adds	r2, r7, r0
 800293e:	6011      	str	r1, [r2, #0]
 8002940:	1839      	adds	r1, r7, r0
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	4662      	mov	r2, ip
 8002946:	4311      	orrs	r1, r2
 8002948:	183a      	adds	r2, r7, r0
 800294a:	6011      	str	r1, [r2, #0]
 800294c:	1223      	asrs	r3, r4, #8
 800294e:	228c      	movs	r2, #140	; 0x8c
 8002950:	18ba      	adds	r2, r7, r2
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	2028      	movs	r0, #40	; 0x28
 8002956:	19bb      	adds	r3, r7, r6
 8002958:	181b      	adds	r3, r3, r0
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b21b      	sxth	r3, r3
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	17db      	asrs	r3, r3, #31
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	197b      	adds	r3, r7, r5
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800296e:	f7fd fdb5 	bl	80004dc <__aeabi_lmul>
 8002972:	0003      	movs	r3, r0
 8002974:	000c      	movs	r4, r1
 8002976:	0d1a      	lsrs	r2, r3, #20
 8002978:	4694      	mov	ip, r2
 800297a:	0321      	lsls	r1, r4, #12
 800297c:	2084      	movs	r0, #132	; 0x84
 800297e:	183a      	adds	r2, r7, r0
 8002980:	6011      	str	r1, [r2, #0]
 8002982:	0001      	movs	r1, r0
 8002984:	0008      	movs	r0, r1
 8002986:	1879      	adds	r1, r7, r1
 8002988:	6809      	ldr	r1, [r1, #0]
 800298a:	4662      	mov	r2, ip
 800298c:	4311      	orrs	r1, r2
 800298e:	0002      	movs	r2, r0
 8002990:	18ba      	adds	r2, r7, r2
 8002992:	6011      	str	r1, [r2, #0]
 8002994:	031b      	lsls	r3, r3, #12
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	18b9      	adds	r1, r7, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	2088      	movs	r0, #136	; 0x88
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	685c      	ldr	r4, [r3, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	18ba      	adds	r2, r7, r2
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	6852      	ldr	r2, [r2, #4]
 80029aa:	185b      	adds	r3, r3, r1
 80029ac:	4154      	adcs	r4, r2
 80029ae:	197a      	adds	r2, r7, r5
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	6054      	str	r4, [r2, #4]
	var1 = (((((int64_t)1)<<47)+var1)) * ((int64_t)dig_p1)>>33;
 80029b4:	197b      	adds	r3, r7, r5
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	2300      	movs	r3, #0
 80029bc:	2480      	movs	r4, #128	; 0x80
 80029be:	0224      	lsls	r4, r4, #8
 80029c0:	18c9      	adds	r1, r1, r3
 80029c2:	4162      	adcs	r2, r4
 80029c4:	0008      	movs	r0, r1
 80029c6:	0011      	movs	r1, r2
 80029c8:	222a      	movs	r2, #42	; 0x2a
 80029ca:	19bb      	adds	r3, r7, r6
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f7fd fd7e 	bl	80004dc <__aeabi_lmul>
 80029e0:	0003      	movs	r3, r0
 80029e2:	000c      	movs	r4, r1
 80029e4:	1062      	asrs	r2, r4, #1
 80029e6:	1979      	adds	r1, r7, r5
 80029e8:	600a      	str	r2, [r1, #0]
 80029ea:	17e3      	asrs	r3, r4, #31
 80029ec:	21a4      	movs	r1, #164	; 0xa4
 80029ee:	187a      	adds	r2, r7, r1
 80029f0:	6013      	str	r3, [r2, #0]
	if(var1 == 0) return 0;
 80029f2:	197b      	adds	r3, r7, r5
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	d10a      	bne.n	8002a14 <press_calibrate+0x35c>
 80029fe:	2300      	movs	r3, #0
 8002a00:	e0cc      	b.n	8002b9c <press_calibrate+0x4e4>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	20000038 	.word	0x20000038
 8002a08:	20000050 	.word	0x20000050
 8002a0c:	200002e8 	.word	0x200002e8
 8002a10:	fffe0c00 	.word	0xfffe0c00
	result_p = 1048576 - adc_press;
 8002a14:	23bc      	movs	r3, #188	; 0xbc
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	035b      	lsls	r3, r3, #13
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	2590      	movs	r5, #144	; 0x90
 8002a22:	197a      	adds	r2, r7, r5
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	17db      	asrs	r3, r3, #31
 8002a28:	2694      	movs	r6, #148	; 0x94
 8002a2a:	19ba      	adds	r2, r7, r6
 8002a2c:	6013      	str	r3, [r2, #0]
	result_p = (((result_p<<31)-var2)*3125)/var1;
 8002a2e:	197b      	adds	r3, r7, r5
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	105b      	asrs	r3, r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	197b      	adds	r3, r7, r5
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	07db      	lsls	r3, r3, #31
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	2098      	movs	r0, #152	; 0x98
 8002a40:	183b      	adds	r3, r7, r0
 8002a42:	685c      	ldr	r4, [r3, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69b8      	ldr	r0, [r7, #24]
 8002a48:	69f9      	ldr	r1, [r7, #28]
 8002a4a:	1ac0      	subs	r0, r0, r3
 8002a4c:	41a1      	sbcs	r1, r4
 8002a4e:	4a55      	ldr	r2, [pc, #340]	; (8002ba4 <press_calibrate+0x4ec>)
 8002a50:	2300      	movs	r3, #0
 8002a52:	f7fd fd43 	bl	80004dc <__aeabi_lmul>
 8002a56:	0003      	movs	r3, r0
 8002a58:	000c      	movs	r4, r1
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	0021      	movs	r1, r4
 8002a5e:	23a0      	movs	r3, #160	; 0xa0
 8002a60:	18fa      	adds	r2, r7, r3
 8002a62:	6853      	ldr	r3, [r2, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	f7fd fd15 	bl	8000494 <__aeabi_ldivmod>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	000c      	movs	r4, r1
 8002a6e:	197a      	adds	r2, r7, r5
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	6054      	str	r4, [r2, #4]
	var1 = (((int64_t)dig_p9)) * (result_p>>13) * (result_p>>13) >> 25;
 8002a74:	231a      	movs	r3, #26
 8002a76:	2290      	movs	r2, #144	; 0x90
 8002a78:	4694      	mov	ip, r2
 8002a7a:	44bc      	add	ip, r7
 8002a7c:	4463      	add	r3, ip
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	17db      	asrs	r3, r3, #31
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	19ba      	adds	r2, r7, r6
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	04da      	lsls	r2, r3, #19
 8002a8e:	1979      	adds	r1, r7, r5
 8002a90:	680b      	ldr	r3, [r1, #0]
 8002a92:	0b5b      	lsrs	r3, r3, #13
 8002a94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a9c:	19ba      	adds	r2, r7, r6
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	135b      	asrs	r3, r3, #13
 8002aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	6979      	ldr	r1, [r7, #20]
 8002aac:	f7fd fd16 	bl	80004dc <__aeabi_lmul>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	000c      	movs	r4, r1
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	0021      	movs	r1, r4
 8002ab8:	19ba      	adds	r2, r7, r6
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	04da      	lsls	r2, r3, #19
 8002abe:	197c      	adds	r4, r7, r5
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	673b      	str	r3, [r7, #112]	; 0x70
 8002acc:	19ba      	adds	r2, r7, r6
 8002ace:	6813      	ldr	r3, [r2, #0]
 8002ad0:	135b      	asrs	r3, r3, #13
 8002ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ad4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad8:	f7fd fd00 	bl	80004dc <__aeabi_lmul>
 8002adc:	0003      	movs	r3, r0
 8002ade:	000c      	movs	r4, r1
 8002ae0:	01e2      	lsls	r2, r4, #7
 8002ae2:	0e59      	lsrs	r1, r3, #25
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	26a0      	movs	r6, #160	; 0xa0
 8002ae8:	19b9      	adds	r1, r7, r6
 8002aea:	600a      	str	r2, [r1, #0]
 8002aec:	1663      	asrs	r3, r4, #25
 8002aee:	22a4      	movs	r2, #164	; 0xa4
 8002af0:	18ba      	adds	r2, r7, r2
 8002af2:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t)dig_p8) * result_p) >> 19;
 8002af4:	231c      	movs	r3, #28
 8002af6:	2290      	movs	r2, #144	; 0x90
 8002af8:	4694      	mov	ip, r2
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	17db      	asrs	r3, r3, #31
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	197b      	adds	r3, r7, r5
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	f7fd fce3 	bl	80004dc <__aeabi_lmul>
 8002b16:	0003      	movs	r3, r0
 8002b18:	000c      	movs	r4, r1
 8002b1a:	0362      	lsls	r2, r4, #13
 8002b1c:	0cd9      	lsrs	r1, r3, #19
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	2098      	movs	r0, #152	; 0x98
 8002b22:	1839      	adds	r1, r7, r0
 8002b24:	600a      	str	r2, [r1, #0]
 8002b26:	14e3      	asrs	r3, r4, #19
 8002b28:	229c      	movs	r2, #156	; 0x9c
 8002b2a:	18ba      	adds	r2, r7, r2
 8002b2c:	6013      	str	r3, [r2, #0]
	result_p = ((result_p + var1 + var2) >> 8) + (((int64_t)dig_p7)<<4);
 8002b2e:	197b      	adds	r3, r7, r5
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	19bb      	adds	r3, r7, r6
 8002b36:	685c      	ldr	r4, [r3, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	18c9      	adds	r1, r1, r3
 8002b3c:	4162      	adcs	r2, r4
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	685c      	ldr	r4, [r3, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	185b      	adds	r3, r3, r1
 8002b46:	4154      	adcs	r4, r2
 8002b48:	0622      	lsls	r2, r4, #24
 8002b4a:	0a19      	lsrs	r1, r3, #8
 8002b4c:	66b9      	str	r1, [r7, #104]	; 0x68
 8002b4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b50:	4311      	orrs	r1, r2
 8002b52:	66b9      	str	r1, [r7, #104]	; 0x68
 8002b54:	1223      	asrs	r3, r4, #8
 8002b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b58:	231e      	movs	r3, #30
 8002b5a:	2290      	movs	r2, #144	; 0x90
 8002b5c:	4694      	mov	ip, r2
 8002b5e:	44bc      	add	ip, r7
 8002b60:	4463      	add	r3, ip
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	17db      	asrs	r3, r3, #31
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	000b      	movs	r3, r1
 8002b72:	0f1b      	lsrs	r3, r3, #28
 8002b74:	0010      	movs	r0, r2
 8002b76:	0100      	lsls	r0, r0, #4
 8002b78:	6678      	str	r0, [r7, #100]	; 0x64
 8002b7a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002b7c:	4318      	orrs	r0, r3
 8002b7e:	6678      	str	r0, [r7, #100]	; 0x64
 8002b80:	000b      	movs	r3, r1
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	663b      	str	r3, [r7, #96]	; 0x60
 8002b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b88:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8002b8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b8e:	185b      	adds	r3, r3, r1
 8002b90:	4154      	adcs	r4, r2
 8002b92:	197a      	adds	r2, r7, r5
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	6054      	str	r4, [r2, #4]
	return (int64_t)result_p;
 8002b98:	197b      	adds	r3, r7, r5
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b031      	add	sp, #196	; 0xc4
 8002ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba4:	00000c35 	.word	0x00000c35

08002ba8 <hum_calibrate>:

uint32_t hum_calibrate(void)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
	int32_t adc_hum = ((uint32_t)bme280_hum.data[0] << 8) | bme280_hum.data[1];
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <hum_calibrate+0x158>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <hum_calibrate+0x158>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
	uint8_t dig_h1 = calibration_data_hum_1.data[0];
 8002bc2:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <hum_calibrate+0x15c>)
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	2413      	movs	r4, #19
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	701a      	strb	r2, [r3, #0]
	int16_t dig_h2 = calibration_data_hum_2.data[0] | ((uint16_t)calibration_data_hum_2.data[1] << 8);
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <hum_calibrate+0x160>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b219      	sxth	r1, r3
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <hum_calibrate+0x160>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	b21a      	sxth	r2, r3
 8002be2:	2510      	movs	r5, #16
 8002be4:	197b      	adds	r3, r7, r5
 8002be6:	430a      	orrs	r2, r1
 8002be8:	801a      	strh	r2, [r3, #0]
	uint8_t dig_h3 = calibration_data_hum_2.data[2];
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <hum_calibrate+0x160>)
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	200f      	movs	r0, #15
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	7892      	ldrb	r2, [r2, #2]
 8002bf4:	701a      	strb	r2, [r3, #0]
	int16_t dig_h4 = ((uint16_t)calibration_data_hum_2.data[3] << 4) | (calibration_data_hum_2.data[4] & 0b1111);
 8002bf6:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <hum_calibrate+0x160>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	3303      	adds	r3, #3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	b219      	sxth	r1, r3
 8002c02:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <hum_calibrate+0x160>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	260c      	movs	r6, #12
 8002c14:	19bb      	adds	r3, r7, r6
 8002c16:	430a      	orrs	r2, r1
 8002c18:	801a      	strh	r2, [r3, #0]
	int16_t dig_h5 = (calibration_data_hum_2.data[4] >> 4) | ((uint16_t)calibration_data_hum_2.data[5] << 4);
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <hum_calibrate+0x160>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	b219      	sxth	r1, r3
 8002c28:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <hum_calibrate+0x160>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	3305      	adds	r3, #5
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	230a      	movs	r3, #10
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	801a      	strh	r2, [r3, #0]
	int8_t dig_h6 = calibration_data_hum_2.data[6];
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <hum_calibrate+0x160>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	3306      	adds	r3, #6
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	2109      	movs	r1, #9
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	701a      	strb	r2, [r3, #0]
	int32_t var = (temp_fine - ((int32_t)76800));
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <hum_calibrate+0x164>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <hum_calibrate+0x168>)
 8002c50:	4694      	mov	ip, r2
 8002c52:	4463      	add	r3, ip
 8002c54:	607b      	str	r3, [r7, #4]
	var = (((((adc_hum<<14) - (((int32_t)dig_h4)<<20) - (((int32_t)dig_h5) * var)) +
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	039a      	lsls	r2, r3, #14
 8002c5a:	19bb      	adds	r3, r7, r6
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	5f9b      	ldrsh	r3, [r3, r6]
 8002c60:	051b      	lsls	r3, r3, #20
 8002c62:	1ad2      	subs	r2, r2, r3
 8002c64:	230a      	movs	r3, #10
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2600      	movs	r6, #0
 8002c6a:	5f9b      	ldrsh	r3, [r3, r6]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	434b      	muls	r3, r1
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	01d2      	lsls	r2, r2, #7
 8002c76:	4694      	mov	ip, r2
 8002c78:	4463      	add	r3, ip
		((int32_t)16384))>>15) * (((((((var*((int32_t)dig_h6))>>10) *
 8002c7a:	13db      	asrs	r3, r3, #15
 8002c7c:	2109      	movs	r1, #9
 8002c7e:	187a      	adds	r2, r7, r1
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	b252      	sxtb	r2, r2
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	434a      	muls	r2, r1
 8002c88:	1292      	asrs	r2, r2, #10
		(((var*((int32_t)dig_h3))>>11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_h2) + 8192) >> 14));
 8002c8a:	1839      	adds	r1, r7, r0
 8002c8c:	7809      	ldrb	r1, [r1, #0]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4341      	muls	r1, r0
 8002c92:	12c9      	asrs	r1, r1, #11
 8002c94:	2080      	movs	r0, #128	; 0x80
 8002c96:	0200      	lsls	r0, r0, #8
 8002c98:	4684      	mov	ip, r0
 8002c9a:	4461      	add	r1, ip
		((int32_t)16384))>>15) * (((((((var*((int32_t)dig_h6))>>10) *
 8002c9c:	434a      	muls	r2, r1
		(((var*((int32_t)dig_h3))>>11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_h2) + 8192) >> 14));
 8002c9e:	1292      	asrs	r2, r2, #10
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	0389      	lsls	r1, r1, #14
 8002ca4:	468c      	mov	ip, r1
 8002ca6:	4462      	add	r2, ip
 8002ca8:	1979      	adds	r1, r7, r5
 8002caa:	2000      	movs	r0, #0
 8002cac:	5e09      	ldrsh	r1, [r1, r0]
 8002cae:	434a      	muls	r2, r1
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0189      	lsls	r1, r1, #6
 8002cb4:	468c      	mov	ip, r1
 8002cb6:	4462      	add	r2, ip
 8002cb8:	1392      	asrs	r2, r2, #14
	var = (((((adc_hum<<14) - (((int32_t)dig_h4)<<20) - (((int32_t)dig_h5) * var)) +
 8002cba:	4353      	muls	r3, r2
 8002cbc:	607b      	str	r3, [r7, #4]
	var = (var - (((((var >> 15) * (var >> 15)) >> 7) * ((int32_t)dig_h1))>>4));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	13db      	asrs	r3, r3, #15
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	13d2      	asrs	r2, r2, #15
 8002cc6:	4353      	muls	r3, r2
 8002cc8:	11db      	asrs	r3, r3, #7
 8002cca:	193a      	adds	r2, r7, r4
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	4353      	muls	r3, r2
 8002cd0:	111b      	asrs	r3, r3, #4
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	607b      	str	r3, [r7, #4]
	var = (var < 0 ? 0 : var);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da00      	bge.n	8002ce0 <hum_calibrate+0x138>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
	var = (var > 419430400 ? 419430400 : var);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	22c8      	movs	r2, #200	; 0xc8
 8002ce6:	0552      	lsls	r2, r2, #21
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	dd01      	ble.n	8002cf0 <hum_calibrate+0x148>
 8002cec:	23c8      	movs	r3, #200	; 0xc8
 8002cee:	055b      	lsls	r3, r3, #21
 8002cf0:	607b      	str	r3, [r7, #4]
	return (uint32_t)(var >> 12);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	131b      	asrs	r3, r3, #12
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b007      	add	sp, #28
 8002cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	2000002c 	.word	0x2000002c
 8002d04:	2000005c 	.word	0x2000005c
 8002d08:	20000068 	.word	0x20000068
 8002d0c:	200002e8 	.word	0x200002e8
 8002d10:	fffed400 	.word	0xfffed400

08002d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b09a      	sub	sp, #104	; 0x68
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char to_print_buf[100] = {0};
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2364      	movs	r3, #100	; 0x64
 8002d20:	001a      	movs	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	f003 fa88 	bl	8006238 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d28:	f000 fc48 	bl	80035bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d2c:	f000 f824 	bl	8002d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d30:	f000 f92e 	bl	8002f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d34:	f000 f8fc 	bl	8002f30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002d38:	f000 f87c 	bl	8002e34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002d3c:	f000 f8ba 	bl	8002eb4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  bme280_init(&hi2c1);
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <main+0x60>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff fb86 	bl	8002454 <bme280_init>
  veml6075_init(&hi2c1);
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <main+0x60>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fbcc 	bl	80034e8 <veml6075_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bme280_read(&hi2c1);
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <main+0x60>)
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7ff fbb6 	bl	80024c4 <bme280_read>
	  veml6075_read(&hi2c1);
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <main+0x60>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fbd4 	bl	8003508 <veml6075_read>
	  lora_transmit_data(to_print_buf);
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 f98c 	bl	8003080 <lora_transmit_data>
	  HAL_Delay(500);
 8002d68:	23fa      	movs	r3, #250	; 0xfa
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 fc89 	bl	8003684 <HAL_Delay>
	  bme280_read(&hi2c1);
 8002d72:	e7ed      	b.n	8002d50 <main+0x3c>
 8002d74:	20000308 	.word	0x20000308

08002d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b099      	sub	sp, #100	; 0x64
 8002d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7e:	242c      	movs	r4, #44	; 0x2c
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	0018      	movs	r0, r3
 8002d84:	2334      	movs	r3, #52	; 0x34
 8002d86:	001a      	movs	r2, r3
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f003 fa55 	bl	8006238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d8e:	231c      	movs	r3, #28
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	0018      	movs	r0, r3
 8002d94:	2310      	movs	r3, #16
 8002d96:	001a      	movs	r2, r3
 8002d98:	2100      	movs	r1, #0
 8002d9a:	f003 fa4d 	bl	8006238 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d9e:	003b      	movs	r3, r7
 8002da0:	0018      	movs	r0, r3
 8002da2:	231c      	movs	r3, #28
 8002da4:	001a      	movs	r2, r3
 8002da6:	2100      	movs	r1, #0
 8002da8:	f003 fa46 	bl	8006238 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002dac:	0021      	movs	r1, r4
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2222      	movs	r2, #34	; 0x22
 8002db2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2201      	movs	r2, #1
 8002db8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	2200      	movs	r2, #0
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f001 fc92 	bl	80046f8 <HAL_RCC_OscConfig>
 8002dd4:	1e03      	subs	r3, r0, #0
 8002dd6:	d001      	beq.n	8002ddc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002dd8:	f000 f9b0 	bl	800313c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ddc:	211c      	movs	r1, #28
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2203      	movs	r2, #3
 8002de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	2101      	movs	r1, #1
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f002 f802 	bl	8004e04 <HAL_RCC_ClockConfig>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002e04:	f000 f99a 	bl	800313c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002e08:	003b      	movs	r3, r7
 8002e0a:	2222      	movs	r2, #34	; 0x22
 8002e0c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e0e:	003b      	movs	r3, r7
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e14:	003b      	movs	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f002 f969 	bl	80050f4 <HAL_RCCEx_PeriphCLKConfig>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002e26:	f000 f989 	bl	800313c <Error_Handler>
  }
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b019      	add	sp, #100	; 0x64
 8002e30:	bd90      	pop	{r4, r7, pc}
	...

08002e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <MX_I2C1_Init+0x78>)
 8002e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <MX_I2C1_Init+0x7c>)
 8002e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 fe73 	bl	8003b5c <HAL_I2C_Init>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e7a:	f000 f95f 	bl	800313c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e80:	2100      	movs	r1, #0
 8002e82:	0018      	movs	r0, r3
 8002e84:	f001 fba0 	bl	80045c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e8c:	f000 f956 	bl	800313c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <MX_I2C1_Init+0x74>)
 8002e92:	2100      	movs	r1, #0
 8002e94:	0018      	movs	r0, r3
 8002e96:	f001 fbe3 	bl	8004660 <HAL_I2CEx_ConfigDigitalFilter>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e9e:	f000 f94d 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000308 	.word	0x20000308
 8002eac:	40005400 	.word	0x40005400
 8002eb0:	2000090e 	.word	0x2000090e

08002eb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <MX_SPI1_Init+0x78>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ec0:	2282      	movs	r2, #130	; 0x82
 8002ec2:	0052      	lsls	r2, r2, #1
 8002ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ece:	22e0      	movs	r2, #224	; 0xe0
 8002ed0:	00d2      	lsls	r2, r2, #3
 8002ed2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002f02:	2207      	movs	r2, #7
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002f0e:	2208      	movs	r2, #8
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <MX_SPI1_Init+0x74>)
 8002f14:	0018      	movs	r0, r3
 8002f16:	f002 f9ed 	bl	80052f4 <HAL_SPI_Init>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f1e:	f000 f90d 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000354 	.word	0x20000354
 8002f2c:	40013000 	.word	0x40013000

08002f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f36:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <MX_USART2_UART_Init+0x5c>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f3c:	2296      	movs	r2, #150	; 0x96
 8002f3e:	0192      	lsls	r2, r2, #6
 8002f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <MX_USART2_UART_Init+0x58>)
 8002f74:	0018      	movs	r0, r3
 8002f76:	f002 fd37 	bl	80059e8 <HAL_UART_Init>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f7e:	f000 f8dd 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200003b8 	.word	0x200003b8
 8002f8c:	40004400 	.word	0x40004400

08002f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b08b      	sub	sp, #44	; 0x2c
 8002f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f96:	2414      	movs	r4, #20
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2314      	movs	r3, #20
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	f003 f949 	bl	8006238 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b32      	ldr	r3, [pc, #200]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0309      	lsls	r1, r1, #12
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	031b      	lsls	r3, r3, #12
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	03c9      	lsls	r1, r1, #15
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	03db      	lsls	r3, r3, #15
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0289      	lsls	r1, r1, #10
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	615a      	str	r2, [r3, #20]
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <MX_GPIO_Init+0xe4>)
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <MX_GPIO_Init+0xe4>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	02c9      	lsls	r1, r1, #11
 8003004:	430a      	orrs	r2, r1
 8003006:	615a      	str	r2, [r3, #20]
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <MX_GPIO_Init+0xe4>)
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	02db      	lsls	r3, r3, #11
 8003010:	4013      	ands	r3, r2
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003016:	2390      	movs	r3, #144	; 0x90
 8003018:	05db      	lsls	r3, r3, #23
 800301a:	2200      	movs	r2, #0
 800301c:	2120      	movs	r1, #32
 800301e:	0018      	movs	r0, r3
 8003020:	f000 fd7e 	bl	8003b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003024:	193b      	adds	r3, r7, r4
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	0192      	lsls	r2, r2, #6
 800302a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800302c:	193b      	adds	r3, r7, r4
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <MX_GPIO_Init+0xe8>)
 8003030:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	193b      	adds	r3, r7, r4
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003038:	193b      	adds	r3, r7, r4
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <MX_GPIO_Init+0xec>)
 800303c:	0019      	movs	r1, r3
 800303e:	0010      	movs	r0, r2
 8003040:	f000 fbf6 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003044:	0021      	movs	r1, r4
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2220      	movs	r2, #32
 800304a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2201      	movs	r2, #1
 8003050:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305e:	187a      	adds	r2, r7, r1
 8003060:	2390      	movs	r3, #144	; 0x90
 8003062:	05db      	lsls	r3, r3, #23
 8003064:	0011      	movs	r1, r2
 8003066:	0018      	movs	r0, r3
 8003068:	f000 fbe2 	bl	8003830 <HAL_GPIO_Init>

}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b00b      	add	sp, #44	; 0x2c
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	10210000 	.word	0x10210000
 800307c:	48000800 	.word	0x48000800

08003080 <lora_transmit_data>:

/* USER CODE BEGIN 4 */


void lora_transmit_data(char* print_buf)
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b090      	sub	sp, #64	; 0x40
 8003084:	af08      	add	r7, sp, #32
 8003086:	61f8      	str	r0, [r7, #28]
	sprintf(print_buf, "G%.2fT%.2fH%.2fA%.2fB%.2f\n\r", sensor_data.air_pressure, sensor_data.air_temperature, sensor_data.air_humidity, sensor_data.uva, sensor_data.uvb);
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <lora_transmit_data+0xac>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	1c18      	adds	r0, r3, #0
 800308e:	f7ff f809 	bl	80020a4 <__aeabi_f2d>
 8003092:	6138      	str	r0, [r7, #16]
 8003094:	6179      	str	r1, [r7, #20]
 8003096:	4b25      	ldr	r3, [pc, #148]	; (800312c <lora_transmit_data+0xac>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	1c18      	adds	r0, r3, #0
 800309c:	f7ff f802 	bl	80020a4 <__aeabi_f2d>
 80030a0:	0004      	movs	r4, r0
 80030a2:	000d      	movs	r5, r1
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <lora_transmit_data+0xac>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	1c18      	adds	r0, r3, #0
 80030aa:	f7fe fffb 	bl	80020a4 <__aeabi_f2d>
 80030ae:	60b8      	str	r0, [r7, #8]
 80030b0:	60f9      	str	r1, [r7, #12]
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <lora_transmit_data+0xac>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	1c18      	adds	r0, r3, #0
 80030b8:	f7fe fff4 	bl	80020a4 <__aeabi_f2d>
 80030bc:	6038      	str	r0, [r7, #0]
 80030be:	6079      	str	r1, [r7, #4]
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <lora_transmit_data+0xac>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	1c18      	adds	r0, r3, #0
 80030c6:	f7fe ffed 	bl	80020a4 <__aeabi_f2d>
 80030ca:	0002      	movs	r2, r0
 80030cc:	000b      	movs	r3, r1
 80030ce:	4918      	ldr	r1, [pc, #96]	; (8003130 <lora_transmit_data+0xb0>)
 80030d0:	69f8      	ldr	r0, [r7, #28]
 80030d2:	9206      	str	r2, [sp, #24]
 80030d4:	9307      	str	r3, [sp, #28]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	9204      	str	r2, [sp, #16]
 80030dc:	9305      	str	r3, [sp, #20]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	9202      	str	r2, [sp, #8]
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	9400      	str	r4, [sp, #0]
 80030e8:	9501      	str	r5, [sp, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 fd09 	bl	8006b04 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)print_buf, strlen(print_buf), HAL_MAX_DELAY);
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd f807 	bl	8000108 <strlen>
 80030fa:	0003      	movs	r3, r0
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	2301      	movs	r3, #1
 8003100:	425b      	negs	r3, r3
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	480b      	ldr	r0, [pc, #44]	; (8003134 <lora_transmit_data+0xb4>)
 8003106:	f002 fcc3 	bl	8005a90 <HAL_UART_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)print_buf, strlen(print_buf), HAL_MAX_DELAY);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	0018      	movs	r0, r3
 800310e:	f7fc fffb 	bl	8000108 <strlen>
 8003112:	0003      	movs	r3, r0
 8003114:	b29a      	uxth	r2, r3
 8003116:	2301      	movs	r3, #1
 8003118:	425b      	negs	r3, r3
 800311a:	69f9      	ldr	r1, [r7, #28]
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <lora_transmit_data+0xb8>)
 800311e:	f002 f9a1 	bl	8005464 <HAL_SPI_Transmit>
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b008      	add	sp, #32
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	200002d0 	.word	0x200002d0
 8003130:	08008360 	.word	0x08008360
 8003134:	200003b8 	.word	0x200003b8
 8003138:	20000354 	.word	0x20000354

0800313c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003140:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003142:	e7fe      	b.n	8003142 <Error_Handler+0x6>

08003144 <write_i2c_register>:
//	}
//}

// write i2c_register to sensor defined by sensor_addr
void write_i2c_register(I2C_HandleTypeDef* hi2c, i2c_register_t* i2c_register, uint8_t sensor_addr)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af04      	add	r7, sp, #16
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	701a      	strb	r2, [r3, #0]
	i2c_register->status = HAL_I2C_Mem_Write(
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	18db      	adds	r3, r3, r3
 800315a:	b29c      	uxth	r4, r3
		hi2c,
		sensor_addr << 1,
		i2c_register->address,
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	785b      	ldrb	r3, [r3, #1]
	i2c_register->status = HAL_I2C_Mem_Write(
 8003160:	b29d      	uxth	r5, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	685b      	ldr	r3, [r3, #4]
		I2C_MEMADD_SIZE_8BIT,
		i2c_register->data,
		i2c_register->size,
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	7a12      	ldrb	r2, [r2, #8]
	i2c_register->status = HAL_I2C_Mem_Write(
 800316a:	b292      	uxth	r2, r2
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	2101      	movs	r1, #1
 8003170:	4249      	negs	r1, r1
 8003172:	9102      	str	r1, [sp, #8]
 8003174:	9201      	str	r2, [sp, #4]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2301      	movs	r3, #1
 800317a:	002a      	movs	r2, r5
 800317c:	0021      	movs	r1, r4
 800317e:	f000 fd83 	bl	8003c88 <HAL_I2C_Mem_Write>
 8003182:	0003      	movs	r3, r0
 8003184:	001a      	movs	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	701a      	strb	r2, [r3, #0]
		HAL_MAX_DELAY
	);
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bdb0      	pop	{r4, r5, r7, pc}

08003192 <read_i2c_register>:

// read from i2c_register from sensor defined by sensor_addr
void read_i2c_register(I2C_HandleTypeDef* hi2c, i2c_register_t* i2c_register, uint8_t sensor_addr)
{
 8003192:	b5b0      	push	{r4, r5, r7, lr}
 8003194:	b088      	sub	sp, #32
 8003196:	af04      	add	r7, sp, #16
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	701a      	strb	r2, [r3, #0]
	i2c_register->status = HAL_I2C_Mem_Read(
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	18db      	adds	r3, r3, r3
 80031a8:	b29c      	uxth	r4, r3
		hi2c,
		sensor_addr << 1,
		i2c_register->address,
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	785b      	ldrb	r3, [r3, #1]
	i2c_register->status = HAL_I2C_Mem_Read(
 80031ae:	b29d      	uxth	r5, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	685b      	ldr	r3, [r3, #4]
		I2C_MEMADD_SIZE_8BIT,
		i2c_register->data,
		i2c_register->size,
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	7a12      	ldrb	r2, [r2, #8]
	i2c_register->status = HAL_I2C_Mem_Read(
 80031b8:	b292      	uxth	r2, r2
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	2101      	movs	r1, #1
 80031be:	4249      	negs	r1, r1
 80031c0:	9102      	str	r1, [sp, #8]
 80031c2:	9201      	str	r2, [sp, #4]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	002a      	movs	r2, r5
 80031ca:	0021      	movs	r1, r4
 80031cc:	f000 fe8a 	bl	8003ee4 <HAL_I2C_Mem_Read>
 80031d0:	0003      	movs	r3, r0
 80031d2:	001a      	movs	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	701a      	strb	r2, [r3, #0]
		HAL_MAX_DELAY
	);
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bdb0      	pop	{r4, r5, r7, pc}

080031e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_MspInit+0x44>)
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_MspInit+0x44>)
 80031ec:	2101      	movs	r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HAL_MspInit+0x44>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_MspInit+0x44>)
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_MspInit+0x44>)
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0549      	lsls	r1, r1, #21
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_MspInit+0x44>)
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	4013      	ands	r3, r2
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	2314      	movs	r3, #20
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	0018      	movs	r0, r3
 8003236:	2314      	movs	r3, #20
 8003238:	001a      	movs	r2, r3
 800323a:	2100      	movs	r1, #0
 800323c:	f002 fffc 	bl	8006238 <memset>
  if(hi2c->Instance==I2C1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_I2C_MspInit+0x90>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d132      	bne.n	80032b0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_I2C_MspInit+0x94>)
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_I2C_MspInit+0x94>)
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	02c9      	lsls	r1, r1, #11
 8003254:	430a      	orrs	r2, r1
 8003256:	615a      	str	r2, [r3, #20]
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_I2C_MspInit+0x94>)
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	02db      	lsls	r3, r3, #11
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003266:	2114      	movs	r1, #20
 8003268:	187b      	adds	r3, r7, r1
 800326a:	22c0      	movs	r2, #192	; 0xc0
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2212      	movs	r2, #18
 8003274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003276:	187b      	adds	r3, r7, r1
 8003278:	2201      	movs	r2, #1
 800327a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2203      	movs	r2, #3
 8003280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2201      	movs	r2, #1
 8003286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	187b      	adds	r3, r7, r1
 800328a:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <HAL_I2C_MspInit+0x98>)
 800328c:	0019      	movs	r1, r3
 800328e:	0010      	movs	r0, r2
 8003290:	f000 face 	bl	8003830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_I2C_MspInit+0x94>)
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_I2C_MspInit+0x94>)
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	0389      	lsls	r1, r1, #14
 800329e:	430a      	orrs	r2, r1
 80032a0:	61da      	str	r2, [r3, #28]
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_I2C_MspInit+0x94>)
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	039b      	lsls	r3, r3, #14
 80032aa:	4013      	ands	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b00a      	add	sp, #40	; 0x28
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40005400 	.word	0x40005400
 80032bc:	40021000 	.word	0x40021000
 80032c0:	48000400 	.word	0x48000400

080032c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b08b      	sub	sp, #44	; 0x2c
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	2314      	movs	r3, #20
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	0018      	movs	r0, r3
 80032d2:	2314      	movs	r3, #20
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f002 ffae 	bl	8006238 <memset>
  if(hspi->Instance==SPI1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2e      	ldr	r2, [pc, #184]	; (800339c <HAL_SPI_MspInit+0xd8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d156      	bne.n	8003394 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0149      	lsls	r1, r1, #5
 80032f0:	430a      	orrs	r2, r1
 80032f2:	619a      	str	r2, [r3, #24]
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	015b      	lsls	r3, r3, #5
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0289      	lsls	r1, r1, #10
 800330c:	430a      	orrs	r2, r1
 800330e:	615a      	str	r2, [r3, #20]
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	02c9      	lsls	r1, r1, #11
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <HAL_SPI_MspInit+0xdc>)
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	02db      	lsls	r3, r3, #11
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800333a:	2414      	movs	r4, #20
 800333c:	193b      	adds	r3, r7, r4
 800333e:	22c0      	movs	r2, #192	; 0xc0
 8003340:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2202      	movs	r2, #2
 8003346:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800334e:	193b      	adds	r3, r7, r4
 8003350:	2203      	movs	r2, #3
 8003352:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003354:	193b      	adds	r3, r7, r4
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	193a      	adds	r2, r7, r4
 800335c:	2390      	movs	r3, #144	; 0x90
 800335e:	05db      	lsls	r3, r3, #23
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f000 fa64 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003368:	0021      	movs	r1, r4
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2208      	movs	r2, #8
 800336e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2202      	movs	r2, #2
 8003374:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2203      	movs	r2, #3
 8003380:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	187b      	adds	r3, r7, r1
 800338a:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <HAL_SPI_MspInit+0xe0>)
 800338c:	0019      	movs	r1, r3
 800338e:	0010      	movs	r0, r2
 8003390:	f000 fa4e 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b00b      	add	sp, #44	; 0x2c
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	40013000 	.word	0x40013000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	48000400 	.word	0x48000400

080033a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	2314      	movs	r3, #20
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	0018      	movs	r0, r3
 80033b6:	2314      	movs	r3, #20
 80033b8:	001a      	movs	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f002 ff3c 	bl	8006238 <memset>
  if(huart->Instance==USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <HAL_UART_MspInit+0x90>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d132      	bne.n	8003430 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_UART_MspInit+0x94>)
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_UART_MspInit+0x94>)
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	0289      	lsls	r1, r1, #10
 80033d4:	430a      	orrs	r2, r1
 80033d6:	61da      	str	r2, [r3, #28]
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <HAL_UART_MspInit+0x94>)
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_UART_MspInit+0x94>)
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_UART_MspInit+0x94>)
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	0289      	lsls	r1, r1, #10
 80033f0:	430a      	orrs	r2, r1
 80033f2:	615a      	str	r2, [r3, #20]
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_UART_MspInit+0x94>)
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003402:	2114      	movs	r1, #20
 8003404:	187b      	adds	r3, r7, r1
 8003406:	220c      	movs	r2, #12
 8003408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2202      	movs	r2, #2
 800340e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2200      	movs	r2, #0
 800341a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	2201      	movs	r2, #1
 8003420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	187a      	adds	r2, r7, r1
 8003424:	2390      	movs	r3, #144	; 0x90
 8003426:	05db      	lsls	r3, r3, #23
 8003428:	0011      	movs	r1, r2
 800342a:	0018      	movs	r0, r3
 800342c:	f000 fa00 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b00a      	add	sp, #40	; 0x28
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40004400 	.word	0x40004400
 800343c:	40021000 	.word	0x40021000

08003440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003444:	e7fe      	b.n	8003444 <NMI_Handler+0x4>

08003446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <HardFault_Handler+0x4>

0800344c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003464:	f000 f8f2 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f002 fea0 	bl	80061e4 <__errno>
 80034a4:	0003      	movs	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	425b      	negs	r3, r3
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	18d2      	adds	r2, r2, r3
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <_sbrk+0x64>)
 80034c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b006      	add	sp, #24
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20004000 	.word	0x20004000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	200002c4 	.word	0x200002c4
 80034d8:	20000458 	.word	0x20000458

080034dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <veml6075_init>:
	.size = 2
};


void veml6075_init(I2C_HandleTypeDef* hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	// set humidity settings, followed by other settings
	write_i2c_register(hi2c, &veml6075_uv_conf, VEML6075_ADDR);
 80034f0:	4904      	ldr	r1, [pc, #16]	; (8003504 <veml6075_init+0x1c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2210      	movs	r2, #16
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7ff fe24 	bl	8003144 <write_i2c_register>
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2000007c 	.word	0x2000007c

08003508 <veml6075_read>:

void veml6075_read(I2C_HandleTypeDef* hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	write_i2c_register(hi2c, &veml6075_uv_conf, VEML6075_ADDR);
 8003510:	4910      	ldr	r1, [pc, #64]	; (8003554 <veml6075_read+0x4c>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2210      	movs	r2, #16
 8003516:	0018      	movs	r0, r3
 8003518:	f7ff fe14 	bl	8003144 <write_i2c_register>
	read_i2c_register(hi2c, &veml6075_uva_data, VEML6075_ADDR);
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <veml6075_read+0x50>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2210      	movs	r2, #16
 8003522:	0018      	movs	r0, r3
 8003524:	f7ff fe35 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &veml6075_uvb_data, VEML6075_ADDR);
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <veml6075_read+0x54>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2210      	movs	r2, #16
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff fe2f 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &veml6075_uvcomp1, VEML6075_ADDR);
 8003534:	490a      	ldr	r1, [pc, #40]	; (8003560 <veml6075_read+0x58>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2210      	movs	r2, #16
 800353a:	0018      	movs	r0, r3
 800353c:	f7ff fe29 	bl	8003192 <read_i2c_register>
	read_i2c_register(hi2c, &veml6075_uvcomp2, VEML6075_ADDR);
 8003540:	4908      	ldr	r1, [pc, #32]	; (8003564 <veml6075_read+0x5c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2210      	movs	r2, #16
 8003546:	0018      	movs	r0, r3
 8003548:	f7ff fe23 	bl	8003192 <read_i2c_register>
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}
 8003554:	2000007c 	.word	0x2000007c
 8003558:	200000a0 	.word	0x200000a0
 800355c:	200000ac 	.word	0x200000ac
 8003560:	20000088 	.word	0x20000088
 8003564:	20000094 	.word	0x20000094

08003568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003568:	480d      	ldr	r0, [pc, #52]	; (80035a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800356a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800356c:	480d      	ldr	r0, [pc, #52]	; (80035a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800356e:	490e      	ldr	r1, [pc, #56]	; (80035a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003570:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <LoopForever+0xe>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003574:	e002      	b.n	800357c <LoopCopyDataInit>

08003576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357a:	3304      	adds	r3, #4

0800357c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800357c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800357e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003580:	d3f9      	bcc.n	8003576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003584:	4c0b      	ldr	r4, [pc, #44]	; (80035b4 <LoopForever+0x16>)
  movs r3, #0
 8003586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003588:	e001      	b.n	800358e <LoopFillZerobss>

0800358a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800358c:	3204      	adds	r2, #4

0800358e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800358e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003590:	d3fb      	bcc.n	800358a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003592:	f7ff ffa3 	bl	80034dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003596:	f002 fe2b 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800359a:	f7ff fbbb 	bl	8002d14 <main>

0800359e <LoopForever>:

LoopForever:
    b LoopForever
 800359e:	e7fe      	b.n	800359e <LoopForever>
  ldr   r0, =_estack
 80035a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80035a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a8:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80035ac:	080086a0 	.word	0x080086a0
  ldr r2, =_sbss
 80035b0:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80035b4:	20000454 	.word	0x20000454

080035b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035b8:	e7fe      	b.n	80035b8 <ADC1_COMP_IRQHandler>
	...

080035bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_Init+0x24>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_Init+0x24>)
 80035c6:	2110      	movs	r1, #16
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80035cc:	2000      	movs	r0, #0
 80035ce:	f000 f809 	bl	80035e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d2:	f7ff fe05 	bl	80031e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	40022000 	.word	0x40022000

080035e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_InitTick+0x5c>)
 80035ee:	681c      	ldr	r4, [r3, #0]
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_InitTick+0x60>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	0019      	movs	r1, r3
 80035f6:	23fa      	movs	r3, #250	; 0xfa
 80035f8:	0098      	lsls	r0, r3, #2
 80035fa:	f7fc fd97 	bl	800012c <__udivsi3>
 80035fe:	0003      	movs	r3, r0
 8003600:	0019      	movs	r1, r3
 8003602:	0020      	movs	r0, r4
 8003604:	f7fc fd92 	bl	800012c <__udivsi3>
 8003608:	0003      	movs	r3, r0
 800360a:	0018      	movs	r0, r3
 800360c:	f000 f903 	bl	8003816 <HAL_SYSTICK_Config>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d001      	beq.n	8003618 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e00f      	b.n	8003638 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d80b      	bhi.n	8003636 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	2301      	movs	r3, #1
 8003622:	425b      	negs	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f8e0 	bl	80037ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_InitTick+0x64>)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b003      	add	sp, #12
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	20000074 	.word	0x20000074
 8003644:	200000bc 	.word	0x200000bc
 8003648:	200000b8 	.word	0x200000b8

0800364c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_IncTick+0x1c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	001a      	movs	r2, r3
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_IncTick+0x20>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	18d2      	adds	r2, r2, r3
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_IncTick+0x20>)
 800365e:	601a      	str	r2, [r3, #0]
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200000bc 	.word	0x200000bc
 800366c:	2000044c 	.word	0x2000044c

08003670 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b02      	ldr	r3, [pc, #8]	; (8003680 <HAL_GetTick+0x10>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	2000044c 	.word	0x2000044c

08003684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff fff0 	bl	8003670 <HAL_GetTick>
 8003690:	0003      	movs	r3, r0
 8003692:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3301      	adds	r3, #1
 800369c:	d005      	beq.n	80036aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_Delay+0x40>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	001a      	movs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	189b      	adds	r3, r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	f7ff ffe0 	bl	8003670 <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d8f7      	bhi.n	80036ac <HAL_Delay+0x28>
  {
  }
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b004      	add	sp, #16
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	200000bc 	.word	0x200000bc

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	0002      	movs	r2, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b7f      	cmp	r3, #127	; 0x7f
 80036dc:	d828      	bhi.n	8003730 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036de:	4a2f      	ldr	r2, [pc, #188]	; (800379c <__NVIC_SetPriority+0xd4>)
 80036e0:	1dfb      	adds	r3, r7, #7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	33c0      	adds	r3, #192	; 0xc0
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	589b      	ldr	r3, [r3, r2]
 80036ee:	1dfa      	adds	r2, r7, #7
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	0011      	movs	r1, r2
 80036f4:	2203      	movs	r2, #3
 80036f6:	400a      	ands	r2, r1
 80036f8:	00d2      	lsls	r2, r2, #3
 80036fa:	21ff      	movs	r1, #255	; 0xff
 80036fc:	4091      	lsls	r1, r2
 80036fe:	000a      	movs	r2, r1
 8003700:	43d2      	mvns	r2, r2
 8003702:	401a      	ands	r2, r3
 8003704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	019b      	lsls	r3, r3, #6
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	401a      	ands	r2, r3
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	0018      	movs	r0, r3
 8003714:	2303      	movs	r3, #3
 8003716:	4003      	ands	r3, r0
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800371c:	481f      	ldr	r0, [pc, #124]	; (800379c <__NVIC_SetPriority+0xd4>)
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b25b      	sxtb	r3, r3
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	430a      	orrs	r2, r1
 8003728:	33c0      	adds	r3, #192	; 0xc0
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800372e:	e031      	b.n	8003794 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <__NVIC_SetPriority+0xd8>)
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	0019      	movs	r1, r3
 8003738:	230f      	movs	r3, #15
 800373a:	400b      	ands	r3, r1
 800373c:	3b08      	subs	r3, #8
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3306      	adds	r3, #6
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	18d3      	adds	r3, r2, r3
 8003746:	3304      	adds	r3, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1dfa      	adds	r2, r7, #7
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	0011      	movs	r1, r2
 8003750:	2203      	movs	r2, #3
 8003752:	400a      	ands	r2, r1
 8003754:	00d2      	lsls	r2, r2, #3
 8003756:	21ff      	movs	r1, #255	; 0xff
 8003758:	4091      	lsls	r1, r2
 800375a:	000a      	movs	r2, r1
 800375c:	43d2      	mvns	r2, r2
 800375e:	401a      	ands	r2, r3
 8003760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	22ff      	movs	r2, #255	; 0xff
 8003768:	401a      	ands	r2, r3
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	0018      	movs	r0, r3
 8003770:	2303      	movs	r3, #3
 8003772:	4003      	ands	r3, r0
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <__NVIC_SetPriority+0xd8>)
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	001c      	movs	r4, r3
 8003780:	230f      	movs	r3, #15
 8003782:	4023      	ands	r3, r4
 8003784:	3b08      	subs	r3, #8
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	430a      	orrs	r2, r1
 800378a:	3306      	adds	r3, #6
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	18c3      	adds	r3, r0, r3
 8003790:	3304      	adds	r3, #4
 8003792:	601a      	str	r2, [r3, #0]
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b003      	add	sp, #12
 800379a:	bd90      	pop	{r4, r7, pc}
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <SysTick_Config+0x40>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b6:	2301      	movs	r3, #1
 80037b8:	e010      	b.n	80037dc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <SysTick_Config+0x44>)
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	3a01      	subs	r2, #1
 80037c0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c2:	2301      	movs	r3, #1
 80037c4:	425b      	negs	r3, r3
 80037c6:	2103      	movs	r1, #3
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ff7d 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <SysTick_Config+0x44>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SysTick_Config+0x44>)
 80037d6:	2207      	movs	r2, #7
 80037d8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037da:	2300      	movs	r3, #0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00ffffff 	.word	0x00ffffff
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	210f      	movs	r1, #15
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	1c02      	adds	r2, r0, #0
 80037fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	187b      	adds	r3, r7, r1
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b25b      	sxtb	r3, r3
 8003806:	0011      	movs	r1, r2
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff ff5d 	bl	80036c8 <__NVIC_SetPriority>
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	0018      	movs	r0, r3
 8003822:	f7ff ffbf 	bl	80037a4 <SysTick_Config>
 8003826:	0003      	movs	r3, r0
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383e:	e155      	b.n	8003aec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4091      	lsls	r1, r2
 800384a:	000a      	movs	r2, r1
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d100      	bne.n	8003858 <HAL_GPIO_Init+0x28>
 8003856:	e146      	b.n	8003ae6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d00b      	beq.n	8003878 <HAL_GPIO_Init+0x48>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d007      	beq.n	8003878 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800386c:	2b11      	cmp	r3, #17
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b12      	cmp	r3, #18
 8003876:	d130      	bne.n	80038da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	409a      	lsls	r2, r3
 8003886:	0013      	movs	r3, r2
 8003888:	43da      	mvns	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	409a      	lsls	r2, r3
 800389a:	0013      	movs	r3, r2
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ae:	2201      	movs	r2, #1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	2201      	movs	r2, #1
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
 80038cc:	0013      	movs	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	409a      	lsls	r2, r3
 80038e8:	0013      	movs	r3, r2
 80038ea:	43da      	mvns	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0xea>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b12      	cmp	r3, #18
 8003918:	d123      	bne.n	8003962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	58d3      	ldr	r3, [r2, r3]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2207      	movs	r2, #7
 800392c:	4013      	ands	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	409a      	lsls	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2107      	movs	r1, #7
 8003946:	400b      	ands	r3, r1
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	409a      	lsls	r2, r3
 800394c:	0013      	movs	r3, r2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	6939      	ldr	r1, [r7, #16]
 8003960:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	409a      	lsls	r2, r3
 8003970:	0013      	movs	r3, r2
 8003972:	43da      	mvns	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2203      	movs	r2, #3
 8003980:	401a      	ands	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	055b      	lsls	r3, r3, #21
 800399e:	4013      	ands	r3, r2
 80039a0:	d100      	bne.n	80039a4 <HAL_GPIO_Init+0x174>
 80039a2:	e0a0      	b.n	8003ae6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a4:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <HAL_GPIO_Init+0x2d4>)
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <HAL_GPIO_Init+0x2d4>)
 80039aa:	2101      	movs	r1, #1
 80039ac:	430a      	orrs	r2, r1
 80039ae:	619a      	str	r2, [r3, #24]
 80039b0:	4b54      	ldr	r3, [pc, #336]	; (8003b04 <HAL_GPIO_Init+0x2d4>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2201      	movs	r2, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039bc:	4a52      	ldr	r2, [pc, #328]	; (8003b08 <HAL_GPIO_Init+0x2d8>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	3302      	adds	r3, #2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	589b      	ldr	r3, [r3, r2]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2203      	movs	r2, #3
 80039ce:	4013      	ands	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	409a      	lsls	r2, r3
 80039d6:	0013      	movs	r3, r2
 80039d8:	43da      	mvns	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	2390      	movs	r3, #144	; 0x90
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_Init+0x1ee>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a47      	ldr	r2, [pc, #284]	; (8003b0c <HAL_GPIO_Init+0x2dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_Init+0x1ea>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a46      	ldr	r2, [pc, #280]	; (8003b10 <HAL_GPIO_Init+0x2e0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_Init+0x1e6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <HAL_GPIO_Init+0x2e4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_Init+0x1e2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a44      	ldr	r2, [pc, #272]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_Init+0x1de>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	e008      	b.n	8003a20 <HAL_GPIO_Init+0x1f0>
 8003a0e:	2305      	movs	r3, #5
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x1f0>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x1f0>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x1f0>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x1f0>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	2103      	movs	r1, #3
 8003a24:	400a      	ands	r2, r1
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a30:	4935      	ldr	r1, [pc, #212]	; (8003b08 <HAL_GPIO_Init+0x2d8>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a3e:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43da      	mvns	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	025b      	lsls	r3, r3, #9
 8003a56:	4013      	ands	r3, r2
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003a68:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43da      	mvns	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	029b      	lsls	r3, r3, #10
 8003a80:	4013      	ands	r3, r2
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a92:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	035b      	lsls	r3, r3, #13
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	039b      	lsls	r3, r3, #14
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	40da      	lsrs	r2, r3
 8003af4:	1e13      	subs	r3, r2, #0
 8003af6:	d000      	beq.n	8003afa <HAL_GPIO_Init+0x2ca>
 8003af8:	e6a2      	b.n	8003840 <HAL_GPIO_Init+0x10>
  } 
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b006      	add	sp, #24
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	48000400 	.word	0x48000400
 8003b10:	48000800 	.word	0x48000800
 8003b14:	48000c00 	.word	0x48000c00
 8003b18:	48001000 	.word	0x48001000
 8003b1c:	40010400 	.word	0x40010400

08003b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	0008      	movs	r0, r1
 8003b2a:	0011      	movs	r1, r2
 8003b2c:	1cbb      	adds	r3, r7, #2
 8003b2e:	1c02      	adds	r2, r0, #0
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	1c7b      	adds	r3, r7, #1
 8003b34:	1c0a      	adds	r2, r1, #0
 8003b36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b38:	1c7b      	adds	r3, r7, #1
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b40:	1cbb      	adds	r3, r7, #2
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b48:	e003      	b.n	8003b52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b4a:	1cbb      	adds	r3, r7, #2
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b002      	add	sp, #8
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e082      	b.n	8003c74 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2241      	movs	r2, #65	; 0x41
 8003b72:	5c9b      	ldrb	r3, [r3, r2]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2240      	movs	r2, #64	; 0x40
 8003b7e:	2100      	movs	r1, #0
 8003b80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff fb4f 	bl	8003228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2241      	movs	r2, #65	; 0x41
 8003b8e:	2124      	movs	r1, #36	; 0x24
 8003b90:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	438a      	bics	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_I2C_Init+0x120>)
 8003bac:	400a      	ands	r2, r1
 8003bae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4931      	ldr	r1, [pc, #196]	; (8003c80 <HAL_I2C_Init+0x124>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d108      	bne.n	8003bda <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0209      	lsls	r1, r1, #8
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	e007      	b.n	8003bea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2184      	movs	r1, #132	; 0x84
 8003be4:	0209      	lsls	r1, r1, #8
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d104      	bne.n	8003bfc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	491f      	ldr	r1, [pc, #124]	; (8003c84 <HAL_I2C_Init+0x128>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	491a      	ldr	r1, [pc, #104]	; (8003c80 <HAL_I2C_Init+0x124>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	0011      	movs	r1, r2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	021a      	lsls	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69d9      	ldr	r1, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2241      	movs	r2, #65	; 0x41
 8003c60:	2120      	movs	r1, #32
 8003c62:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2242      	movs	r2, #66	; 0x42
 8003c6e:	2100      	movs	r1, #0
 8003c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	f0ffffff 	.word	0xf0ffffff
 8003c80:	ffff7fff 	.word	0xffff7fff
 8003c84:	02008000 	.word	0x02008000

08003c88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	000c      	movs	r4, r1
 8003c92:	0010      	movs	r0, r2
 8003c94:	0019      	movs	r1, r3
 8003c96:	230a      	movs	r3, #10
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	1c22      	adds	r2, r4, #0
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	1c02      	adds	r2, r0, #0
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	1dbb      	adds	r3, r7, #6
 8003ca8:	1c0a      	adds	r2, r1, #0
 8003caa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	5c9b      	ldrb	r3, [r3, r2]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d000      	beq.n	8003cba <HAL_I2C_Mem_Write+0x32>
 8003cb8:	e10c      	b.n	8003ed4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_I2C_Mem_Write+0x42>
 8003cc0:	232c      	movs	r3, #44	; 0x2c
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d105      	bne.n	8003cd6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0ff      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2240      	movs	r2, #64	; 0x40
 8003cda:	5c9b      	ldrb	r3, [r3, r2]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2C_Mem_Write+0x5c>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e0f8      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2240      	movs	r2, #64	; 0x40
 8003ce8:	2101      	movs	r1, #1
 8003cea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cec:	f7ff fcc0 	bl	8003670 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	0219      	lsls	r1, r3, #8
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2319      	movs	r3, #25
 8003d00:	2201      	movs	r2, #1
 8003d02:	f000 fb0b 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003d06:	1e03      	subs	r3, r0, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0e3      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2241      	movs	r2, #65	; 0x41
 8003d12:	2121      	movs	r1, #33	; 0x21
 8003d14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2242      	movs	r2, #66	; 0x42
 8003d1a:	2140      	movs	r1, #64	; 0x40
 8003d1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	222c      	movs	r2, #44	; 0x2c
 8003d2e:	18ba      	adds	r2, r7, r2
 8003d30:	8812      	ldrh	r2, [r2, #0]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	881c      	ldrh	r4, [r3, #0]
 8003d3e:	2308      	movs	r3, #8
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	230a      	movs	r3, #10
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	8819      	ldrh	r1, [r3, #0]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	0023      	movs	r3, r4
 8003d56:	f000 f9f9 	bl	800414c <I2C_RequestMemoryWrite>
 8003d5a:	1e03      	subs	r3, r0, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	2100      	movs	r1, #0
 8003d64:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0b5      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2bff      	cmp	r3, #255	; 0xff
 8003d72:	d911      	bls.n	8003d98 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	22ff      	movs	r2, #255	; 0xff
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	045c      	lsls	r4, r3, #17
 8003d84:	230a      	movs	r3, #10
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	8819      	ldrh	r1, [r3, #0]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	0023      	movs	r3, r4
 8003d92:	f000 fbe3 	bl	800455c <I2C_TransferConfig>
 8003d96:	e012      	b.n	8003dbe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	049c      	lsls	r4, r3, #18
 8003dac:	230a      	movs	r3, #10
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	8819      	ldrh	r1, [r3, #0]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	0023      	movs	r3, r4
 8003dba:	f000 fbcf 	bl	800455c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 fae8 	bl	800439a <I2C_WaitOnTXISFlagUntilTimeout>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e081      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d03a      	beq.n	8003e82 <HAL_I2C_Mem_Write+0x1fa>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d136      	bne.n	8003e82 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	f000 fa7b 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e053      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	d911      	bls.n	8003e5c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	045c      	lsls	r4, r3, #17
 8003e48:	230a      	movs	r3, #10
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	8819      	ldrh	r1, [r3, #0]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	0023      	movs	r3, r4
 8003e56:	f000 fb81 	bl	800455c <I2C_TransferConfig>
 8003e5a:	e012      	b.n	8003e82 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	049c      	lsls	r4, r3, #18
 8003e70:	230a      	movs	r3, #10
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	8819      	ldrh	r1, [r3, #0]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	0023      	movs	r3, r4
 8003e7e:	f000 fb6d 	bl	800455c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d198      	bne.n	8003dbe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 fac0 	bl	8004418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e01a      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	490b      	ldr	r1, [pc, #44]	; (8003ee0 <HAL_I2C_Mem_Write+0x258>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2241      	movs	r2, #65	; 0x41
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2242      	movs	r2, #66	; 0x42
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b007      	add	sp, #28
 8003edc:	bd90      	pop	{r4, r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	fe00e800 	.word	0xfe00e800

08003ee4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b089      	sub	sp, #36	; 0x24
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	000c      	movs	r4, r1
 8003eee:	0010      	movs	r0, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	1c22      	adds	r2, r4, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	2308      	movs	r3, #8
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	1c02      	adds	r2, r0, #0
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	1c0a      	adds	r2, r1, #0
 8003f06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2241      	movs	r2, #65	; 0x41
 8003f0c:	5c9b      	ldrb	r3, [r3, r2]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d000      	beq.n	8003f16 <HAL_I2C_Mem_Read+0x32>
 8003f14:	e110      	b.n	8004138 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_I2C_Mem_Read+0x42>
 8003f1c:	232c      	movs	r3, #44	; 0x2c
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e103      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2240      	movs	r2, #64	; 0x40
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2C_Mem_Read+0x5c>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e0fc      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	2101      	movs	r1, #1
 8003f46:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f48:	f7ff fb92 	bl	8003670 <HAL_GetTick>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	0219      	lsls	r1, r3, #8
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2319      	movs	r3, #25
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f000 f9dd 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e0e7      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2241      	movs	r2, #65	; 0x41
 8003f6e:	2122      	movs	r1, #34	; 0x22
 8003f70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2242      	movs	r2, #66	; 0x42
 8003f76:	2140      	movs	r1, #64	; 0x40
 8003f78:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	222c      	movs	r2, #44	; 0x2c
 8003f8a:	18ba      	adds	r2, r7, r2
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f96:	1dbb      	adds	r3, r7, #6
 8003f98:	881c      	ldrh	r4, [r3, #0]
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	230a      	movs	r3, #10
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	8819      	ldrh	r1, [r3, #0]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	0023      	movs	r3, r4
 8003fb2:	f000 f92f 	bl	8004214 <I2C_RequestMemoryRead>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e0b9      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2bff      	cmp	r3, #255	; 0xff
 8003fce:	d911      	bls.n	8003ff4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	22ff      	movs	r2, #255	; 0xff
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	045c      	lsls	r4, r3, #17
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	8819      	ldrh	r1, [r3, #0]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	4b56      	ldr	r3, [pc, #344]	; (8004144 <HAL_I2C_Mem_Read+0x260>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0023      	movs	r3, r4
 8003fee:	f000 fab5 	bl	800455c <I2C_TransferConfig>
 8003ff2:	e012      	b.n	800401a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	b2da      	uxtb	r2, r3
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	049c      	lsls	r4, r3, #18
 8004008:	230a      	movs	r3, #10
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	8819      	ldrh	r1, [r3, #0]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_I2C_Mem_Read+0x260>)
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	0023      	movs	r3, r4
 8004016:	f000 faa1 	bl	800455c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	0013      	movs	r3, r2
 8004024:	2200      	movs	r2, #0
 8004026:	2104      	movs	r1, #4
 8004028:	f000 f978 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e082      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03a      	beq.n	80040e6 <HAL_I2C_Mem_Read+0x202>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d136      	bne.n	80040e6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0013      	movs	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	f000 f949 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e053      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2bff      	cmp	r3, #255	; 0xff
 800409a:	d911      	bls.n	80040c0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	045c      	lsls	r4, r3, #17
 80040ac:	230a      	movs	r3, #10
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	8819      	ldrh	r1, [r3, #0]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	2300      	movs	r3, #0
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	0023      	movs	r3, r4
 80040ba:	f000 fa4f 	bl	800455c <I2C_TransferConfig>
 80040be:	e012      	b.n	80040e6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	049c      	lsls	r4, r3, #18
 80040d4:	230a      	movs	r3, #10
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	8819      	ldrh	r1, [r3, #0]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	2300      	movs	r3, #0
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	0023      	movs	r3, r4
 80040e2:	f000 fa3b 	bl	800455c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d194      	bne.n	800401a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f98e 	bl	8004418 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e01a      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2220      	movs	r2, #32
 800410a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	490c      	ldr	r1, [pc, #48]	; (8004148 <HAL_I2C_Mem_Read+0x264>)
 8004118:	400a      	ands	r2, r1
 800411a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2241      	movs	r2, #65	; 0x41
 8004120:	2120      	movs	r1, #32
 8004122:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2242      	movs	r2, #66	; 0x42
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	2100      	movs	r1, #0
 8004132:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b007      	add	sp, #28
 8004140:	bd90      	pop	{r4, r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	80002400 	.word	0x80002400
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	000c      	movs	r4, r1
 8004156:	0010      	movs	r0, r2
 8004158:	0019      	movs	r1, r3
 800415a:	250a      	movs	r5, #10
 800415c:	197b      	adds	r3, r7, r5
 800415e:	1c22      	adds	r2, r4, #0
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	2308      	movs	r3, #8
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	1c02      	adds	r2, r0, #0
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	1c0a      	adds	r2, r1, #0
 800416e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	045c      	lsls	r4, r3, #17
 800417a:	197b      	adds	r3, r7, r5
 800417c:	8819      	ldrh	r1, [r3, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <I2C_RequestMemoryWrite+0xc4>)
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	0023      	movs	r3, r4
 8004186:	f000 f9e9 	bl	800455c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	6a39      	ldr	r1, [r7, #32]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	0018      	movs	r0, r3
 8004192:	f000 f902 	bl	800439a <I2C_WaitOnTXISFlagUntilTimeout>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d001      	beq.n	800419e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e033      	b.n	8004206 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800419e:	1dbb      	adds	r3, r7, #6
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041a6:	2308      	movs	r3, #8
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
 80041b4:	e019      	b.n	80041ea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041b6:	2308      	movs	r3, #8
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ca:	6a39      	ldr	r1, [r7, #32]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 f8e3 	bl	800439a <I2C_WaitOnTXISFlagUntilTimeout>
 80041d4:	1e03      	subs	r3, r0, #0
 80041d6:	d001      	beq.n	80041dc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e014      	b.n	8004206 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041dc:	2308      	movs	r3, #8
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a3a      	ldr	r2, [r7, #32]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	0013      	movs	r3, r2
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	f000 f890 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d001      	beq.n	8004204 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bdb0      	pop	{r4, r5, r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	80002000 	.word	0x80002000

08004214 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b5b0      	push	{r4, r5, r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	000c      	movs	r4, r1
 800421e:	0010      	movs	r0, r2
 8004220:	0019      	movs	r1, r3
 8004222:	250a      	movs	r5, #10
 8004224:	197b      	adds	r3, r7, r5
 8004226:	1c22      	adds	r2, r4, #0
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	2308      	movs	r3, #8
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	1c02      	adds	r2, r0, #0
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	1dbb      	adds	r3, r7, #6
 8004234:	1c0a      	adds	r2, r1, #0
 8004236:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004238:	1dbb      	adds	r3, r7, #6
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	197b      	adds	r3, r7, r5
 8004240:	8819      	ldrh	r1, [r3, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <I2C_RequestMemoryRead+0xc0>)
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2300      	movs	r3, #0
 800424a:	f000 f987 	bl	800455c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	6a39      	ldr	r1, [r7, #32]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 f8a0 	bl	800439a <I2C_WaitOnTXISFlagUntilTimeout>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d001      	beq.n	8004262 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e033      	b.n	80042ca <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004262:	1dbb      	adds	r3, r7, #6
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426a:	2308      	movs	r3, #8
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	e019      	b.n	80042ae <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800427a:	2308      	movs	r3, #8
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	b29b      	uxth	r3, r3
 8004284:	b2da      	uxtb	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	6a39      	ldr	r1, [r7, #32]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	0018      	movs	r0, r3
 8004294:	f000 f881 	bl	800439a <I2C_WaitOnTXISFlagUntilTimeout>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e014      	b.n	80042ca <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042a0:	2308      	movs	r3, #8
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042ae:	6a3a      	ldr	r2, [r7, #32]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	0013      	movs	r3, r2
 80042b8:	2200      	movs	r2, #0
 80042ba:	2140      	movs	r1, #64	; 0x40
 80042bc:	f000 f82e 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b004      	add	sp, #16
 80042d0:	bdb0      	pop	{r4, r5, r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	80002000 	.word	0x80002000

080042d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2202      	movs	r2, #2
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d103      	bne.n	80042f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2201      	movs	r2, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	2b01      	cmp	r3, #1
 8004302:	d007      	beq.n	8004314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2101      	movs	r1, #1
 8004310:	430a      	orrs	r2, r1
 8004312:	619a      	str	r2, [r3, #24]
  }
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	1dfb      	adds	r3, r7, #7
 800432a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432c:	e021      	b.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	d01e      	beq.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7ff f99c 	bl	8003670 <HAL_GetTick>
 8004338:	0002      	movs	r2, r0
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	2220      	movs	r2, #32
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2241      	movs	r2, #65	; 0x41
 800435a:	2120      	movs	r1, #32
 800435c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2242      	movs	r2, #66	; 0x42
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2240      	movs	r2, #64	; 0x40
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e00f      	b.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	425a      	negs	r2, r3
 8004382:	4153      	adcs	r3, r2
 8004384:	b2db      	uxtb	r3, r3
 8004386:	001a      	movs	r2, r3
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d0ce      	beq.n	800432e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bd80      	pop	{r7, pc}

0800439a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043a6:	e02b      	b.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f86e 	bl	8004490 <I2C_IsAcknowledgeFailed>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d001      	beq.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e029      	b.n	8004410 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	3301      	adds	r3, #1
 80043c0:	d01e      	beq.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7ff f955 	bl	8003670 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d113      	bne.n	8004400 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	2220      	movs	r2, #32
 80043de:	431a      	orrs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2241      	movs	r2, #65	; 0x41
 80043e8:	2120      	movs	r1, #32
 80043ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2242      	movs	r2, #66	; 0x42
 80043f0:	2100      	movs	r1, #0
 80043f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	2100      	movs	r1, #0
 80043fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e007      	b.n	8004410 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d1cc      	bne.n	80043a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004424:	e028      	b.n	8004478 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 f82f 	bl	8004490 <I2C_IsAcknowledgeFailed>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d001      	beq.n	800443a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e026      	b.n	8004488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7ff f919 	bl	8003670 <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d113      	bne.n	8004478 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	2220      	movs	r2, #32
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2241      	movs	r2, #65	; 0x41
 8004460:	2120      	movs	r1, #32
 8004462:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2242      	movs	r2, #66	; 0x42
 8004468:	2100      	movs	r1, #0
 800446a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e007      	b.n	8004488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2220      	movs	r2, #32
 8004480:	4013      	ands	r3, r2
 8004482:	2b20      	cmp	r3, #32
 8004484:	d1cf      	bne.n	8004426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2210      	movs	r2, #16
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d151      	bne.n	800454e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044aa:	e021      	b.n	80044f0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3301      	adds	r3, #1
 80044b0:	d01e      	beq.n	80044f0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7ff f8dd 	bl	8003670 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_IsAcknowledgeFailed+0x38>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d113      	bne.n	80044f0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	2220      	movs	r2, #32
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2241      	movs	r2, #65	; 0x41
 80044d8:	2120      	movs	r1, #32
 80044da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2242      	movs	r2, #66	; 0x42
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2240      	movs	r2, #64	; 0x40
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e02f      	b.n	8004550 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2220      	movs	r2, #32
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d1d6      	bne.n	80044ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2210      	movs	r2, #16
 8004504:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2220      	movs	r2, #32
 800450c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff fee1 	bl	80042d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	490d      	ldr	r1, [pc, #52]	; (8004558 <I2C_IsAcknowledgeFailed+0xc8>)
 8004522:	400a      	ands	r2, r1
 8004524:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	2204      	movs	r2, #4
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2241      	movs	r2, #65	; 0x41
 8004536:	2120      	movs	r1, #32
 8004538:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2242      	movs	r2, #66	; 0x42
 800453e:	2100      	movs	r1, #0
 8004540:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	0008      	movs	r0, r1
 8004566:	0011      	movs	r1, r2
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	240a      	movs	r4, #10
 800456c:	193b      	adds	r3, r7, r4
 800456e:	1c02      	adds	r2, r0, #0
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	2009      	movs	r0, #9
 8004574:	183b      	adds	r3, r7, r0
 8004576:	1c0a      	adds	r2, r1, #0
 8004578:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	6a3a      	ldr	r2, [r7, #32]
 8004582:	0d51      	lsrs	r1, r2, #21
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	00d2      	lsls	r2, r2, #3
 8004588:	400a      	ands	r2, r1
 800458a:	490e      	ldr	r1, [pc, #56]	; (80045c4 <I2C_TransferConfig+0x68>)
 800458c:	430a      	orrs	r2, r1
 800458e:	43d2      	mvns	r2, r2
 8004590:	401a      	ands	r2, r3
 8004592:	0011      	movs	r1, r2
 8004594:	193b      	adds	r3, r7, r4
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	059b      	lsls	r3, r3, #22
 800459a:	0d9a      	lsrs	r2, r3, #22
 800459c:	183b      	adds	r3, r7, r0
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	0418      	lsls	r0, r3, #16
 80045a2:	23ff      	movs	r3, #255	; 0xff
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	4003      	ands	r3, r0
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b005      	add	sp, #20
 80045c0:	bd90      	pop	{r4, r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	03ff63ff 	.word	0x03ff63ff

080045c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2241      	movs	r2, #65	; 0x41
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d138      	bne.n	8004650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2240      	movs	r2, #64	; 0x40
 80045e2:	5c9b      	ldrb	r3, [r3, r2]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e032      	b.n	8004652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2240      	movs	r2, #64	; 0x40
 80045f0:	2101      	movs	r1, #1
 80045f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2241      	movs	r2, #65	; 0x41
 80045f8:	2124      	movs	r1, #36	; 0x24
 80045fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	438a      	bics	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4911      	ldr	r1, [pc, #68]	; (800465c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004618:	400a      	ands	r2, r1
 800461a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2101      	movs	r1, #1
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2241      	movs	r2, #65	; 0x41
 8004640:	2120      	movs	r1, #32
 8004642:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b002      	add	sp, #8
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	ffffefff 	.word	0xffffefff

08004660 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2241      	movs	r2, #65	; 0x41
 800466e:	5c9b      	ldrb	r3, [r3, r2]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	d139      	bne.n	80046ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2240      	movs	r2, #64	; 0x40
 800467a:	5c9b      	ldrb	r3, [r3, r2]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004680:	2302      	movs	r3, #2
 8004682:	e033      	b.n	80046ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	2101      	movs	r1, #1
 800468a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2241      	movs	r2, #65	; 0x41
 8004690:	2124      	movs	r1, #36	; 0x24
 8004692:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2101      	movs	r1, #1
 80046a0:	438a      	bics	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a11      	ldr	r2, [pc, #68]	; (80046f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	430a      	orrs	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2241      	movs	r2, #65	; 0x41
 80046da:	2120      	movs	r1, #32
 80046dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b004      	add	sp, #16
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	fffff0ff 	.word	0xfffff0ff

080046f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f000 fb76 	bl	8004df8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2201      	movs	r2, #1
 8004712:	4013      	ands	r3, r2
 8004714:	d100      	bne.n	8004718 <HAL_RCC_OscConfig+0x20>
 8004716:	e08e      	b.n	8004836 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004718:	4bc5      	ldr	r3, [pc, #788]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	220c      	movs	r2, #12
 800471e:	4013      	ands	r3, r2
 8004720:	2b04      	cmp	r3, #4
 8004722:	d00e      	beq.n	8004742 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004724:	4bc2      	ldr	r3, [pc, #776]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	220c      	movs	r2, #12
 800472a:	4013      	ands	r3, r2
 800472c:	2b08      	cmp	r3, #8
 800472e:	d117      	bne.n	8004760 <HAL_RCC_OscConfig+0x68>
 8004730:	4bbf      	ldr	r3, [pc, #764]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	23c0      	movs	r3, #192	; 0xc0
 8004736:	025b      	lsls	r3, r3, #9
 8004738:	401a      	ands	r2, r3
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	429a      	cmp	r2, r3
 8004740:	d10e      	bne.n	8004760 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004742:	4bbb      	ldr	r3, [pc, #748]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	4013      	ands	r3, r2
 800474c:	d100      	bne.n	8004750 <HAL_RCC_OscConfig+0x58>
 800474e:	e071      	b.n	8004834 <HAL_RCC_OscConfig+0x13c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d000      	beq.n	800475a <HAL_RCC_OscConfig+0x62>
 8004758:	e06c      	b.n	8004834 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f000 fb4c 	bl	8004df8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0x80>
 8004768:	4bb1      	ldr	r3, [pc, #708]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4bb0      	ldr	r3, [pc, #704]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800476e:	2180      	movs	r1, #128	; 0x80
 8004770:	0249      	lsls	r1, r1, #9
 8004772:	430a      	orrs	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e02f      	b.n	80047d8 <HAL_RCC_OscConfig+0xe0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <HAL_RCC_OscConfig+0xa2>
 8004780:	4bab      	ldr	r3, [pc, #684]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4baa      	ldr	r3, [pc, #680]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004786:	49ab      	ldr	r1, [pc, #684]	; (8004a34 <HAL_RCC_OscConfig+0x33c>)
 8004788:	400a      	ands	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	4ba8      	ldr	r3, [pc, #672]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4ba7      	ldr	r3, [pc, #668]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004792:	49a9      	ldr	r1, [pc, #676]	; (8004a38 <HAL_RCC_OscConfig+0x340>)
 8004794:	400a      	ands	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e01e      	b.n	80047d8 <HAL_RCC_OscConfig+0xe0>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d10e      	bne.n	80047c0 <HAL_RCC_OscConfig+0xc8>
 80047a2:	4ba3      	ldr	r3, [pc, #652]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4ba2      	ldr	r3, [pc, #648]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	02c9      	lsls	r1, r1, #11
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	4b9f      	ldr	r3, [pc, #636]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b9e      	ldr	r3, [pc, #632]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	0249      	lsls	r1, r1, #9
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xe0>
 80047c0:	4b9b      	ldr	r3, [pc, #620]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b9a      	ldr	r3, [pc, #616]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047c6:	499b      	ldr	r1, [pc, #620]	; (8004a34 <HAL_RCC_OscConfig+0x33c>)
 80047c8:	400a      	ands	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	4b98      	ldr	r3, [pc, #608]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b97      	ldr	r3, [pc, #604]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047d2:	4999      	ldr	r1, [pc, #612]	; (8004a38 <HAL_RCC_OscConfig+0x340>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d014      	beq.n	800480a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fe ff46 	bl	8003670 <HAL_GetTick>
 80047e4:	0003      	movs	r3, r0
 80047e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ea:	f7fe ff41 	bl	8003670 <HAL_GetTick>
 80047ee:	0002      	movs	r2, r0
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b64      	cmp	r3, #100	; 0x64
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e2fd      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fc:	4b8c      	ldr	r3, [pc, #560]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	029b      	lsls	r3, r3, #10
 8004804:	4013      	ands	r3, r2
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0xf2>
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fe ff31 	bl	8003670 <HAL_GetTick>
 800480e:	0003      	movs	r3, r0
 8004810:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004814:	f7fe ff2c 	bl	8003670 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e2e8      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	4b82      	ldr	r3, [pc, #520]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	029b      	lsls	r3, r3, #10
 800482e:	4013      	ands	r3, r2
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x11c>
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	d100      	bne.n	8004842 <HAL_RCC_OscConfig+0x14a>
 8004840:	e06c      	b.n	800491c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004842:	4b7b      	ldr	r3, [pc, #492]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	220c      	movs	r2, #12
 8004848:	4013      	ands	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800484c:	4b78      	ldr	r3, [pc, #480]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	220c      	movs	r2, #12
 8004852:	4013      	ands	r3, r2
 8004854:	2b08      	cmp	r3, #8
 8004856:	d11f      	bne.n	8004898 <HAL_RCC_OscConfig+0x1a0>
 8004858:	4b75      	ldr	r3, [pc, #468]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	23c0      	movs	r3, #192	; 0xc0
 800485e:	025b      	lsls	r3, r3, #9
 8004860:	401a      	ands	r2, r3
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	429a      	cmp	r2, r3
 8004868:	d116      	bne.n	8004898 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486a:	4b71      	ldr	r3, [pc, #452]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2202      	movs	r2, #2
 8004870:	4013      	ands	r3, r2
 8004872:	d005      	beq.n	8004880 <HAL_RCC_OscConfig+0x188>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e2bb      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004880:	4b6b      	ldr	r3, [pc, #428]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	22f8      	movs	r2, #248	; 0xf8
 8004886:	4393      	bics	r3, r2
 8004888:	0019      	movs	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00da      	lsls	r2, r3, #3
 8004890:	4b67      	ldr	r3, [pc, #412]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004896:	e041      	b.n	800491c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d024      	beq.n	80048ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a0:	4b63      	ldr	r3, [pc, #396]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fe fee0 	bl	8003670 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b6:	f7fe fedb 	bl	8003670 <HAL_GetTick>
 80048ba:	0002      	movs	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e297      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2202      	movs	r2, #2
 80048ce:	4013      	ands	r3, r2
 80048d0:	d0f1      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	22f8      	movs	r2, #248	; 0xf8
 80048d8:	4393      	bics	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	00da      	lsls	r2, r3, #3
 80048e2:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e018      	b.n	800491c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ea:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80048f0:	2101      	movs	r1, #1
 80048f2:	438a      	bics	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fe febb 	bl	8003670 <HAL_GetTick>
 80048fa:	0003      	movs	r3, r0
 80048fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004900:	f7fe feb6 	bl	8003670 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e272      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d1f1      	bne.n	8004900 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2208      	movs	r2, #8
 8004922:	4013      	ands	r3, r2
 8004924:	d036      	beq.n	8004994 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d019      	beq.n	8004962 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004934:	2101      	movs	r1, #1
 8004936:	430a      	orrs	r2, r1
 8004938:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493a:	f7fe fe99 	bl	8003670 <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004944:	f7fe fe94 	bl	8003670 <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e250      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2202      	movs	r2, #2
 800495c:	4013      	ands	r3, r2
 800495e:	d0f1      	beq.n	8004944 <HAL_RCC_OscConfig+0x24c>
 8004960:	e018      	b.n	8004994 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004962:	4b33      	ldr	r3, [pc, #204]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004966:	4b32      	ldr	r3, [pc, #200]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004968:	2101      	movs	r1, #1
 800496a:	438a      	bics	r2, r1
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496e:	f7fe fe7f 	bl	8003670 <HAL_GetTick>
 8004972:	0003      	movs	r3, r0
 8004974:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fe fe7a 	bl	8003670 <HAL_GetTick>
 800497c:	0002      	movs	r2, r0
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e236      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2202      	movs	r2, #2
 8004990:	4013      	ands	r3, r2
 8004992:	d1f1      	bne.n	8004978 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2204      	movs	r2, #4
 800499a:	4013      	ands	r3, r2
 800499c:	d100      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2a8>
 800499e:	e0b5      	b.n	8004b0c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a0:	231f      	movs	r3, #31
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	055b      	lsls	r3, r3, #21
 80049b0:	4013      	ands	r3, r2
 80049b2:	d111      	bne.n	80049d8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	0549      	lsls	r1, r1, #21
 80049be:	430a      	orrs	r2, r1
 80049c0:	61da      	str	r2, [r3, #28]
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	055b      	lsls	r3, r3, #21
 80049ca:	4013      	ands	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049d0:	231f      	movs	r3, #31
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <HAL_RCC_OscConfig+0x344>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	d11a      	bne.n	8004a1a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCC_OscConfig+0x344>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_RCC_OscConfig+0x344>)
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	0049      	lsls	r1, r1, #1
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f2:	f7fe fe3d 	bl	8003670 <HAL_GetTick>
 80049f6:	0003      	movs	r3, r0
 80049f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fc:	f7fe fe38 	bl	8003670 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1f4      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCC_OscConfig+0x344>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4013      	ands	r3, r2
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10e      	bne.n	8004a40 <HAL_RCC_OscConfig+0x348>
 8004a22:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004a24:	6a1a      	ldr	r2, [r3, #32]
 8004a26:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <HAL_RCC_OscConfig+0x338>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	621a      	str	r2, [r3, #32]
 8004a2e:	e035      	b.n	8004a9c <HAL_RCC_OscConfig+0x3a4>
 8004a30:	40021000 	.word	0x40021000
 8004a34:	fffeffff 	.word	0xfffeffff
 8004a38:	fffbffff 	.word	0xfffbffff
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCC_OscConfig+0x36a>
 8004a48:	4bca      	ldr	r3, [pc, #808]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a4a:	6a1a      	ldr	r2, [r3, #32]
 8004a4c:	4bc9      	ldr	r3, [pc, #804]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a4e:	2101      	movs	r1, #1
 8004a50:	438a      	bics	r2, r1
 8004a52:	621a      	str	r2, [r3, #32]
 8004a54:	4bc7      	ldr	r3, [pc, #796]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	4bc6      	ldr	r3, [pc, #792]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	438a      	bics	r2, r1
 8004a5e:	621a      	str	r2, [r3, #32]
 8004a60:	e01c      	b.n	8004a9c <HAL_RCC_OscConfig+0x3a4>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x38c>
 8004a6a:	4bc2      	ldr	r3, [pc, #776]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	4bc1      	ldr	r3, [pc, #772]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a70:	2104      	movs	r1, #4
 8004a72:	430a      	orrs	r2, r1
 8004a74:	621a      	str	r2, [r3, #32]
 8004a76:	4bbf      	ldr	r3, [pc, #764]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	4bbe      	ldr	r3, [pc, #760]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	621a      	str	r2, [r3, #32]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0x3a4>
 8004a84:	4bbb      	ldr	r3, [pc, #748]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	4bba      	ldr	r3, [pc, #744]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	621a      	str	r2, [r3, #32]
 8004a90:	4bb8      	ldr	r3, [pc, #736]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	4bb7      	ldr	r3, [pc, #732]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004a96:	2104      	movs	r1, #4
 8004a98:	438a      	bics	r2, r1
 8004a9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d014      	beq.n	8004ace <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fde4 	bl	8003670 <HAL_GetTick>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	e009      	b.n	8004ac2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aae:	f7fe fddf 	bl	8003670 <HAL_GetTick>
 8004ab2:	0002      	movs	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	4aaf      	ldr	r2, [pc, #700]	; (8004d78 <HAL_RCC_OscConfig+0x680>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e19a      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	4bac      	ldr	r3, [pc, #688]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x3b6>
 8004acc:	e013      	b.n	8004af6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ace:	f7fe fdcf 	bl	8003670 <HAL_GetTick>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad6:	e009      	b.n	8004aec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fe fdca 	bl	8003670 <HAL_GetTick>
 8004adc:	0002      	movs	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4aa5      	ldr	r2, [pc, #660]	; (8004d78 <HAL_RCC_OscConfig+0x680>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e185      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	4ba1      	ldr	r3, [pc, #644]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2202      	movs	r2, #2
 8004af2:	4013      	ands	r3, r2
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004af6:	231f      	movs	r3, #31
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b00:	4b9c      	ldr	r3, [pc, #624]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	4b9b      	ldr	r3, [pc, #620]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b06:	499d      	ldr	r1, [pc, #628]	; (8004d7c <HAL_RCC_OscConfig+0x684>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2210      	movs	r2, #16
 8004b12:	4013      	ands	r3, r2
 8004b14:	d063      	beq.n	8004bde <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d12a      	bne.n	8004b74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b1e:	4b95      	ldr	r3, [pc, #596]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b22:	4b94      	ldr	r3, [pc, #592]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b24:	2104      	movs	r1, #4
 8004b26:	430a      	orrs	r2, r1
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004b2a:	4b92      	ldr	r3, [pc, #584]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2e:	4b91      	ldr	r3, [pc, #580]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b30:	2101      	movs	r1, #1
 8004b32:	430a      	orrs	r2, r1
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b36:	f7fe fd9b 	bl	8003670 <HAL_GetTick>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004b40:	f7fe fd96 	bl	8003670 <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e152      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004b52:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	2202      	movs	r2, #2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d0f1      	beq.n	8004b40 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b5c:	4b85      	ldr	r3, [pc, #532]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b60:	22f8      	movs	r2, #248	; 0xf8
 8004b62:	4393      	bics	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	00da      	lsls	r2, r3, #3
 8004b6c:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	635a      	str	r2, [r3, #52]	; 0x34
 8004b72:	e034      	b.n	8004bde <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	3305      	adds	r3, #5
 8004b7a:	d111      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004b7c:	4b7d      	ldr	r3, [pc, #500]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b80:	4b7c      	ldr	r3, [pc, #496]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b82:	2104      	movs	r1, #4
 8004b84:	438a      	bics	r2, r1
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004b88:	4b7a      	ldr	r3, [pc, #488]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	22f8      	movs	r2, #248	; 0xf8
 8004b8e:	4393      	bics	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	00da      	lsls	r2, r3, #3
 8004b98:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b9e:	e01e      	b.n	8004bde <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba4:	4b73      	ldr	r3, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004bac:	4b71      	ldr	r3, [pc, #452]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb0:	4b70      	ldr	r3, [pc, #448]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb8:	f7fe fd5a 	bl	8003670 <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bc2:	f7fe fd55 	bl	8003670 <HAL_GetTick>
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e111      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004bd4:	4b67      	ldr	r3, [pc, #412]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	2202      	movs	r2, #2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d1f1      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2220      	movs	r2, #32
 8004be4:	4013      	ands	r3, r2
 8004be6:	d05c      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	220c      	movs	r2, #12
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d00e      	beq.n	8004c12 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004bf4:	4b5f      	ldr	r3, [pc, #380]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	220c      	movs	r2, #12
 8004bfa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d114      	bne.n	8004c2a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004c00:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	23c0      	movs	r3, #192	; 0xc0
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	401a      	ands	r2, r3
 8004c0a:	23c0      	movs	r3, #192	; 0xc0
 8004c0c:	025b      	lsls	r3, r3, #9
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d10b      	bne.n	8004c2a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004c12:	4b58      	ldr	r3, [pc, #352]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d040      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x5a8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d03c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0e6      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004c32:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c36:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	0249      	lsls	r1, r1, #9
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe fd16 	bl	8003670 <HAL_GetTick>
 8004c44:	0003      	movs	r3, r0
 8004c46:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4a:	f7fe fd11 	bl	8003670 <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0cd      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c5c:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	025b      	lsls	r3, r3, #9
 8004c64:	4013      	ands	r3, r2
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x552>
 8004c68:	e01b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004c6a:	4b42      	ldr	r3, [pc, #264]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6e:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c70:	4943      	ldr	r1, [pc, #268]	; (8004d80 <HAL_RCC_OscConfig+0x688>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7fe fcfb 	bl	8003670 <HAL_GetTick>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c80:	f7fe fcf6 	bl	8003670 <HAL_GetTick>
 8004c84:	0002      	movs	r2, r0
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0b2      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c96:	2380      	movs	r3, #128	; 0x80
 8004c98:	025b      	lsls	r3, r3, #9
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x588>
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004ca0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d100      	bne.n	8004cac <HAL_RCC_OscConfig+0x5b4>
 8004caa:	e0a4      	b.n	8004df6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cac:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	220c      	movs	r2, #12
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d100      	bne.n	8004cba <HAL_RCC_OscConfig+0x5c2>
 8004cb8:	e078      	b.n	8004dac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d14c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004cc8:	492e      	ldr	r1, [pc, #184]	; (8004d84 <HAL_RCC_OscConfig+0x68c>)
 8004cca:	400a      	ands	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fe fccf 	bl	8003670 <HAL_GetTick>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fe fcca 	bl	8003670 <HAL_GetTick>
 8004cdc:	0002      	movs	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e086      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	049b      	lsls	r3, r3, #18
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	220f      	movs	r2, #15
 8004cfc:	4393      	bics	r3, r2
 8004cfe:	0019      	movs	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d06:	430a      	orrs	r2, r1
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	; (8004d88 <HAL_RCC_OscConfig+0x690>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	0449      	lsls	r1, r1, #17
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fe fc9d 	bl	8003670 <HAL_GetTick>
 8004d36:	0003      	movs	r3, r0
 8004d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fe fc98 	bl	8003670 <HAL_GetTick>
 8004d40:	0002      	movs	r2, r0
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e054      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	049b      	lsls	r3, r3, #18
 8004d56:	4013      	ands	r3, r2
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x644>
 8004d5a:	e04c      	b.n	8004df6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <HAL_RCC_OscConfig+0x67c>)
 8004d62:	4908      	ldr	r1, [pc, #32]	; (8004d84 <HAL_RCC_OscConfig+0x68c>)
 8004d64:	400a      	ands	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fe fc82 	bl	8003670 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x6a6>
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00001388 	.word	0x00001388
 8004d7c:	efffffff 	.word	0xefffffff
 8004d80:	fffeffff 	.word	0xfffeffff
 8004d84:	feffffff 	.word	0xfeffffff
 8004d88:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fe fc70 	bl	8003670 <HAL_GetTick>
 8004d90:	0002      	movs	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e02c      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_RCC_OscConfig+0x708>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	049b      	lsls	r3, r3, #18
 8004da6:	4013      	ands	r3, r2
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x694>
 8004daa:	e024      	b.n	8004df6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e01f      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <HAL_RCC_OscConfig+0x708>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_RCC_OscConfig+0x708>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	23c0      	movs	r3, #192	; 0xc0
 8004dc8:	025b      	lsls	r3, r3, #9
 8004dca:	401a      	ands	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d10e      	bne.n	8004df2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	220f      	movs	r2, #15
 8004dd8:	401a      	ands	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d107      	bne.n	8004df2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	23f0      	movs	r3, #240	; 0xf0
 8004de6:	039b      	lsls	r3, r3, #14
 8004de8:	401a      	ands	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b008      	add	sp, #32
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000

08004e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0bf      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	4013      	ands	r3, r2
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d911      	bls.n	8004e4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b5e      	ldr	r3, [pc, #376]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	0019      	movs	r1, r3
 8004e30:	4b5b      	ldr	r3, [pc, #364]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e38:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4013      	ands	r3, r2
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0a6      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d015      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d006      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e5e:	4b51      	ldr	r3, [pc, #324]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004e64:	21e0      	movs	r1, #224	; 0xe0
 8004e66:	00c9      	lsls	r1, r1, #3
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	22f0      	movs	r2, #240	; 0xf0
 8004e72:	4393      	bics	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	4013      	ands	r3, r2
 8004e88:	d04c      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	029b      	lsls	r3, r3, #10
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d120      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07a      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	049b      	lsls	r3, r3, #18
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d114      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06e      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ec2:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e062      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e05b      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	4393      	bics	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7fe fbbc 	bl	8003670 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efc:	e009      	b.n	8004f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efe:	f7fe fbb7 	bl	8003670 <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <HAL_RCC_ClockConfig+0x1a4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e042      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	220c      	movs	r2, #12
 8004f18:	401a      	ands	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d1ec      	bne.n	8004efe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d211      	bcs.n	8004f56 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4393      	bics	r3, r2
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f44:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <HAL_RCC_ClockConfig+0x19c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e020      	b.n	8004f98 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f60:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a11      	ldr	r2, [pc, #68]	; (8004fac <HAL_RCC_ClockConfig+0x1a8>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f74:	f000 f820 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f78:	0001      	movs	r1, r0
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <HAL_RCC_ClockConfig+0x1a0>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	220f      	movs	r2, #15
 8004f82:	4013      	ands	r3, r2
 8004f84:	4a0a      	ldr	r2, [pc, #40]	; (8004fb0 <HAL_RCC_ClockConfig+0x1ac>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	000a      	movs	r2, r1
 8004f8a:	40da      	lsrs	r2, r3
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f90:	2000      	movs	r0, #0
 8004f92:	f7fe fb27 	bl	80035e4 <HAL_InitTick>
  
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b004      	add	sp, #16
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40022000 	.word	0x40022000
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	00001388 	.word	0x00001388
 8004fac:	fffff8ff 	.word	0xfffff8ff
 8004fb0:	0800841c 	.word	0x0800841c
 8004fb4:	20000074 	.word	0x20000074

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b08f      	sub	sp, #60	; 0x3c
 8004fbc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004fbe:	2314      	movs	r3, #20
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004fc4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004fc6:	c313      	stmia	r3!, {r0, r1, r4}
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004fcc:	1d3b      	adds	r3, r7, #4
 8004fce:	4a35      	ldr	r2, [pc, #212]	; (80050a4 <HAL_RCC_GetSysClockFreq+0xec>)
 8004fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004fd2:	c313      	stmia	r3!, {r0, r1, r4}
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	220c      	movs	r2, #12
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d006      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x52>
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d043      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0xd0>
 8005000:	2b04      	cmp	r3, #4
 8005002:	d144      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005004:	4b29      	ldr	r3, [pc, #164]	; (80050ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8005006:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005008:	e044      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	0c9b      	lsrs	r3, r3, #18
 800500e:	220f      	movs	r2, #15
 8005010:	4013      	ands	r3, r2
 8005012:	2214      	movs	r2, #20
 8005014:	18ba      	adds	r2, r7, r2
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	220f      	movs	r2, #15
 8005020:	4013      	ands	r3, r2
 8005022:	1d3a      	adds	r2, r7, #4
 8005024:	5cd3      	ldrb	r3, [r2, r3]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800502a:	23c0      	movs	r3, #192	; 0xc0
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	401a      	ands	r2, r3
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	025b      	lsls	r3, r3, #9
 8005034:	429a      	cmp	r2, r3
 8005036:	d109      	bne.n	800504c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800503a:	481c      	ldr	r0, [pc, #112]	; (80050ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800503c:	f7fb f876 	bl	800012c <__udivsi3>
 8005040:	0003      	movs	r3, r0
 8005042:	001a      	movs	r2, r3
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	4353      	muls	r3, r2
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	e01a      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800504c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800504e:	23c0      	movs	r3, #192	; 0xc0
 8005050:	025b      	lsls	r3, r3, #9
 8005052:	401a      	ands	r2, r3
 8005054:	23c0      	movs	r3, #192	; 0xc0
 8005056:	025b      	lsls	r3, r3, #9
 8005058:	429a      	cmp	r2, r3
 800505a:	d109      	bne.n	8005070 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800505c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800505e:	4814      	ldr	r0, [pc, #80]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005060:	f7fb f864 	bl	800012c <__udivsi3>
 8005064:	0003      	movs	r3, r0
 8005066:	001a      	movs	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	4353      	muls	r3, r2
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
 800506e:	e008      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005072:	480e      	ldr	r0, [pc, #56]	; (80050ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8005074:	f7fb f85a 	bl	800012c <__udivsi3>
 8005078:	0003      	movs	r3, r0
 800507a:	001a      	movs	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	4353      	muls	r3, r2
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005086:	e005      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800508a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800508c:	e002      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005092:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b00f      	add	sp, #60	; 0x3c
 800509c:	bd90      	pop	{r4, r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	0800837c 	.word	0x0800837c
 80050a4:	0800838c 	.word	0x0800838c
 80050a8:	40021000 	.word	0x40021000
 80050ac:	007a1200 	.word	0x007a1200
 80050b0:	02dc6c00 	.word	0x02dc6c00

080050b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b8:	4b02      	ldr	r3, [pc, #8]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	20000074 	.word	0x20000074

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80050cc:	f7ff fff2 	bl	80050b4 <HAL_RCC_GetHCLKFreq>
 80050d0:	0001      	movs	r1, r0
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	2207      	movs	r2, #7
 80050da:	4013      	ands	r3, r2
 80050dc:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050de:	5cd3      	ldrb	r3, [r2, r3]
 80050e0:	40d9      	lsrs	r1, r3
 80050e2:	000b      	movs	r3, r1
}    
 80050e4:	0018      	movs	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	40021000 	.word	0x40021000
 80050f0:	0800842c 	.word	0x0800842c

080050f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	025b      	lsls	r3, r3, #9
 800510c:	4013      	ands	r3, r2
 800510e:	d100      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005110:	e08f      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005112:	2317      	movs	r3, #23
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800511a:	4b6f      	ldr	r3, [pc, #444]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	055b      	lsls	r3, r3, #21
 8005122:	4013      	ands	r3, r2
 8005124:	d111      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005126:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	4b6b      	ldr	r3, [pc, #428]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800512c:	2180      	movs	r1, #128	; 0x80
 800512e:	0549      	lsls	r1, r1, #21
 8005130:	430a      	orrs	r2, r1
 8005132:	61da      	str	r2, [r3, #28]
 8005134:	4b68      	ldr	r3, [pc, #416]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	055b      	lsls	r3, r3, #21
 800513c:	4013      	ands	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005142:	2317      	movs	r3, #23
 8005144:	18fb      	adds	r3, r7, r3
 8005146:	2201      	movs	r2, #1
 8005148:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514a:	4b64      	ldr	r3, [pc, #400]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4013      	ands	r3, r2
 8005154:	d11a      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005156:	4b61      	ldr	r3, [pc, #388]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b60      	ldr	r3, [pc, #384]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800515c:	2180      	movs	r1, #128	; 0x80
 800515e:	0049      	lsls	r1, r1, #1
 8005160:	430a      	orrs	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005164:	f7fe fa84 	bl	8003670 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	e008      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fe fa7f 	bl	8003670 <HAL_GetTick>
 8005172:	0002      	movs	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b64      	cmp	r3, #100	; 0x64
 800517a:	d901      	bls.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0a6      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005180:	4b56      	ldr	r3, [pc, #344]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4013      	ands	r3, r2
 800518a:	d0f0      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800518c:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	23c0      	movs	r3, #192	; 0xc0
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d034      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	23c0      	movs	r3, #192	; 0xc0
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4013      	ands	r3, r2
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d02c      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051ae:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4a4b      	ldr	r2, [pc, #300]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051b8:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	4b46      	ldr	r3, [pc, #280]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051be:	2180      	movs	r1, #128	; 0x80
 80051c0:	0249      	lsls	r1, r1, #9
 80051c2:	430a      	orrs	r2, r1
 80051c4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051c6:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051cc:	4945      	ldr	r1, [pc, #276]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80051ce:	400a      	ands	r2, r1
 80051d0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051d2:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7fe fa46 	bl	8003670 <HAL_GetTick>
 80051e4:	0003      	movs	r3, r0
 80051e6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e8:	e009      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fe fa41 	bl	8003670 <HAL_GetTick>
 80051ee:	0002      	movs	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	4a3c      	ldr	r2, [pc, #240]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e067      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	2202      	movs	r2, #2
 8005204:	4013      	ands	r3, r2
 8005206:	d0f0      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005208:	4b33      	ldr	r3, [pc, #204]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	4a34      	ldr	r2, [pc, #208]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800520e:	4013      	ands	r3, r2
 8005210:	0019      	movs	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005218:	430a      	orrs	r2, r1
 800521a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800521c:	2317      	movs	r3, #23
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d105      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800522c:	492f      	ldr	r1, [pc, #188]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800522e:	400a      	ands	r2, r1
 8005230:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	4013      	ands	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2203      	movs	r2, #3
 8005242:	4393      	bics	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800524c:	430a      	orrs	r2, r1
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2202      	movs	r2, #2
 8005256:	4013      	ands	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005260:	4013      	ands	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800526a:	430a      	orrs	r2, r1
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2220      	movs	r2, #32
 8005274:	4013      	ands	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	2210      	movs	r2, #16
 800527e:	4393      	bics	r3, r2
 8005280:	0019      	movs	r1, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005288:	430a      	orrs	r2, r1
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	4013      	ands	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	2280      	movs	r2, #128	; 0x80
 800529e:	4393      	bics	r3, r2
 80052a0:	0019      	movs	r1, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052a8:	430a      	orrs	r2, r1
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4013      	ands	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	4393      	bics	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052c8:	430a      	orrs	r2, r1
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b006      	add	sp, #24
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40007000 	.word	0x40007000
 80052e0:	fffffcff 	.word	0xfffffcff
 80052e4:	fffeffff 	.word	0xfffeffff
 80052e8:	00001388 	.word	0x00001388
 80052ec:	efffffff 	.word	0xefffffff
 80052f0:	fffcffff 	.word	0xfffcffff

080052f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0a8      	b.n	8005458 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	2382      	movs	r3, #130	; 0x82
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	429a      	cmp	r2, r3
 8005318:	d009      	beq.n	800532e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	61da      	str	r2, [r3, #28]
 8005320:	e005      	b.n	800532e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	225d      	movs	r2, #93	; 0x5d
 8005338:	5c9b      	ldrb	r3, [r3, r2]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	225c      	movs	r2, #92	; 0x5c
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0018      	movs	r0, r3
 800534c:	f7fd ffba 	bl	80032c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	225d      	movs	r2, #93	; 0x5d
 8005354:	2102      	movs	r1, #2
 8005356:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2140      	movs	r1, #64	; 0x40
 8005364:	438a      	bics	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	23e0      	movs	r3, #224	; 0xe0
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	429a      	cmp	r2, r3
 8005372:	d902      	bls.n	800537a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e002      	b.n	8005380 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	015b      	lsls	r3, r3, #5
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	23f0      	movs	r3, #240	; 0xf0
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	429a      	cmp	r2, r3
 800538a:	d008      	beq.n	800539e <HAL_SPI_Init+0xaa>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	23e0      	movs	r3, #224	; 0xe0
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	429a      	cmp	r2, r3
 8005396:	d002      	beq.n	800539e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	2382      	movs	r3, #130	; 0x82
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	401a      	ands	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	2384      	movs	r3, #132	; 0x84
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	400b      	ands	r3, r1
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2102      	movs	r1, #2
 80053ba:	400b      	ands	r3, r1
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	2101      	movs	r1, #1
 80053c4:	400b      	ands	r3, r1
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6999      	ldr	r1, [r3, #24]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	400b      	ands	r3, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	2138      	movs	r1, #56	; 0x38
 80053da:	400b      	ands	r3, r1
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	2180      	movs	r1, #128	; 0x80
 80053e4:	400b      	ands	r3, r1
 80053e6:	431a      	orrs	r2, r3
 80053e8:	0011      	movs	r1, r2
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	019b      	lsls	r3, r3, #6
 80053f2:	401a      	ands	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	2204      	movs	r2, #4
 8005404:	401a      	ands	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2110      	movs	r1, #16
 800540c:	400b      	ands	r3, r1
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	2108      	movs	r1, #8
 8005416:	400b      	ands	r3, r1
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68d9      	ldr	r1, [r3, #12]
 800541e:	23f0      	movs	r3, #240	; 0xf0
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	400b      	ands	r3, r1
 8005424:	431a      	orrs	r2, r3
 8005426:	0011      	movs	r1, r2
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	015b      	lsls	r3, r3, #5
 800542e:	401a      	ands	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4907      	ldr	r1, [pc, #28]	; (8005460 <HAL_SPI_Init+0x16c>)
 8005444:	400a      	ands	r2, r1
 8005446:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	225d      	movs	r2, #93	; 0x5d
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b004      	add	sp, #16
 800545e:	bd80      	pop	{r7, pc}
 8005460:	fffff7ff 	.word	0xfffff7ff

08005464 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	1dbb      	adds	r3, r7, #6
 8005472:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005474:	231f      	movs	r3, #31
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	225c      	movs	r2, #92	; 0x5c
 8005480:	5c9b      	ldrb	r3, [r3, r2]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_SPI_Transmit+0x26>
 8005486:	2302      	movs	r3, #2
 8005488:	e140      	b.n	800570c <HAL_SPI_Transmit+0x2a8>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	225c      	movs	r2, #92	; 0x5c
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005492:	f7fe f8ed 	bl	8003670 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800549a:	2316      	movs	r3, #22
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	1dba      	adds	r2, r7, #6
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	225d      	movs	r2, #93	; 0x5d
 80054a8:	5c9b      	ldrb	r3, [r3, r2]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d004      	beq.n	80054ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80054b0:	231f      	movs	r3, #31
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80054b8:	e11d      	b.n	80056f6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_SPI_Transmit+0x64>
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80054c8:	231f      	movs	r3, #31
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80054d0:	e111      	b.n	80056f6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	225d      	movs	r2, #93	; 0x5d
 80054d6:	2103      	movs	r1, #3
 80054d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1dba      	adds	r2, r7, #6
 80054ea:	8812      	ldrh	r2, [r2, #0]
 80054ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1dba      	adds	r2, r7, #6
 80054f2:	8812      	ldrh	r2, [r2, #0]
 80054f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2244      	movs	r2, #68	; 0x44
 8005500:	2100      	movs	r1, #0
 8005502:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2246      	movs	r2, #70	; 0x46
 8005508:	2100      	movs	r1, #0
 800550a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	429a      	cmp	r2, r3
 8005522:	d110      	bne.n	8005546 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2140      	movs	r1, #64	; 0x40
 8005530:	438a      	bics	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	01c9      	lsls	r1, r1, #7
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	4013      	ands	r3, r2
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d007      	beq.n	8005564 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2140      	movs	r1, #64	; 0x40
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	23e0      	movs	r3, #224	; 0xe0
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	429a      	cmp	r2, r3
 800556e:	d94e      	bls.n	800560e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_SPI_Transmit+0x11e>
 8005578:	2316      	movs	r3, #22
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d13f      	bne.n	8005602 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	881a      	ldrh	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	1c9a      	adds	r2, r3, #2
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055a6:	e02c      	b.n	8005602 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2202      	movs	r2, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d112      	bne.n	80055dc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055da:	e012      	b.n	8005602 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055dc:	f7fe f848 	bl	8003670 <HAL_GetTick>
 80055e0:	0002      	movs	r2, r0
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d802      	bhi.n	80055f2 <HAL_SPI_Transmit+0x18e>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	3301      	adds	r3, #1
 80055f0:	d102      	bne.n	80055f8 <HAL_SPI_Transmit+0x194>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80055f8:	231f      	movs	r3, #31
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2203      	movs	r2, #3
 80055fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8005600:	e079      	b.n	80056f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1cd      	bne.n	80055a8 <HAL_SPI_Transmit+0x144>
 800560c:	e04f      	b.n	80056ae <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <HAL_SPI_Transmit+0x1bc>
 8005616:	2316      	movs	r3, #22
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d141      	bne.n	80056a4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005646:	e02d      	b.n	80056a4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2202      	movs	r2, #2
 8005650:	4013      	ands	r3, r2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d113      	bne.n	800567e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567c:	e012      	b.n	80056a4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567e:	f7fd fff7 	bl	8003670 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d802      	bhi.n	8005694 <HAL_SPI_Transmit+0x230>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_SPI_Transmit+0x236>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800569a:	231f      	movs	r3, #31
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	2203      	movs	r2, #3
 80056a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80056a2:	e028      	b.n	80056f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1cc      	bne.n	8005648 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 f951 	bl	800595c <SPI_EndRxTxTransaction>
 80056ba:	1e03      	subs	r3, r0, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80056ea:	231f      	movs	r3, #31
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	2201      	movs	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e000      	b.n	80056f6 <HAL_SPI_Transmit+0x292>
  }

error:
 80056f4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	225d      	movs	r2, #93	; 0x5d
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	225c      	movs	r2, #92	; 0x5c
 8005702:	2100      	movs	r1, #0
 8005704:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005706:	231f      	movs	r3, #31
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	781b      	ldrb	r3, [r3, #0]
}
 800570c:	0018      	movs	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	b008      	add	sp, #32
 8005712:	bd80      	pop	{r7, pc}

08005714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	1dfb      	adds	r3, r7, #7
 8005722:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005724:	f7fd ffa4 	bl	8003670 <HAL_GetTick>
 8005728:	0002      	movs	r2, r0
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	18d3      	adds	r3, r2, r3
 8005732:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005734:	f7fd ff9c 	bl	8003670 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	015b      	lsls	r3, r3, #5
 8005742:	0d1b      	lsrs	r3, r3, #20
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	4353      	muls	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574a:	e058      	b.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	d055      	beq.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005752:	f7fd ff8d 	bl	8003670 <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	429a      	cmp	r2, r3
 8005760:	d902      	bls.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d142      	bne.n	80057ee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	21e0      	movs	r1, #224	; 0xe0
 8005774:	438a      	bics	r2, r1
 8005776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	2382      	movs	r3, #130	; 0x82
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	429a      	cmp	r2, r3
 8005782:	d113      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x98>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	429a      	cmp	r2, r3
 800578e:	d005      	beq.n	800579c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2140      	movs	r1, #64	; 0x40
 80057a8:	438a      	bics	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	019b      	lsls	r3, r3, #6
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d110      	bne.n	80057da <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	491a      	ldr	r1, [pc, #104]	; (800582c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	0189      	lsls	r1, r1, #6
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	225d      	movs	r2, #93	; 0x5d
 80057de:	2101      	movs	r1, #1
 80057e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	225c      	movs	r2, #92	; 0x5c
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e017      	b.n	800581e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	425a      	negs	r2, r3
 800580e:	4153      	adcs	r3, r2
 8005810:	b2db      	uxtb	r3, r3
 8005812:	001a      	movs	r2, r3
 8005814:	1dfb      	adds	r3, r7, #7
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d197      	bne.n	800574c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	0018      	movs	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	b008      	add	sp, #32
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	20000074 	.word	0x20000074
 800582c:	ffffdfff 	.word	0xffffdfff

08005830 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800583e:	f7fd ff17 	bl	8003670 <HAL_GetTick>
 8005842:	0002      	movs	r2, r0
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	18d3      	adds	r3, r2, r3
 800584c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800584e:	f7fd ff0f 	bl	8003670 <HAL_GetTick>
 8005852:	0003      	movs	r3, r0
 8005854:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005856:	4b3f      	ldr	r3, [pc, #252]	; (8005954 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	0013      	movs	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	189b      	adds	r3, r3, r2
 8005860:	00da      	lsls	r2, r3, #3
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	0d1b      	lsrs	r3, r3, #20
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	4353      	muls	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800586c:	e064      	b.n	8005938 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	23c0      	movs	r3, #192	; 0xc0
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	429a      	cmp	r2, r3
 8005876:	d106      	bne.n	8005886 <SPI_WaitFifoStateUntilTimeout+0x56>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	d055      	beq.n	8005938 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800588c:	f7fd fef0 	bl	8003670 <HAL_GetTick>
 8005890:	0002      	movs	r2, r0
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	429a      	cmp	r2, r3
 800589a:	d902      	bls.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0x72>
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d142      	bne.n	8005928 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	21e0      	movs	r1, #224	; 0xe0
 80058ae:	438a      	bics	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	2382      	movs	r3, #130	; 0x82
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d113      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d005      	beq.n	80058d6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d107      	bne.n	80058e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2140      	movs	r1, #64	; 0x40
 80058e2:	438a      	bics	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d110      	bne.n	8005914 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4916      	ldr	r1, [pc, #88]	; (8005958 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058fe:	400a      	ands	r2, r1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2180      	movs	r1, #128	; 0x80
 800590e:	0189      	lsls	r1, r1, #6
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	225d      	movs	r2, #93	; 0x5d
 8005918:	2101      	movs	r1, #1
 800591a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	225c      	movs	r2, #92	; 0x5c
 8005920:	2100      	movs	r1, #0
 8005922:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e010      	b.n	800594a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3b01      	subs	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d192      	bne.n	800586e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	b008      	add	sp, #32
 8005950:	bd80      	pop	{r7, pc}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	20000074 	.word	0x20000074
 8005958:	ffffdfff 	.word	0xffffdfff

0800595c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	23c0      	movs	r3, #192	; 0xc0
 800596c:	0159      	lsls	r1, r3, #5
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	0013      	movs	r3, r2
 8005976:	2200      	movs	r2, #0
 8005978:	f7ff ff5a 	bl	8005830 <SPI_WaitFifoStateUntilTimeout>
 800597c:	1e03      	subs	r3, r0, #0
 800597e:	d007      	beq.n	8005990 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	2220      	movs	r2, #32
 8005986:	431a      	orrs	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e027      	b.n	80059e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	0013      	movs	r3, r2
 800599a:	2200      	movs	r2, #0
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	f7ff feb9 	bl	8005714 <SPI_WaitFlagStateUntilTimeout>
 80059a2:	1e03      	subs	r3, r0, #0
 80059a4:	d007      	beq.n	80059b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	2220      	movs	r2, #32
 80059ac:	431a      	orrs	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e014      	b.n	80059e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	23c0      	movs	r3, #192	; 0xc0
 80059ba:	00d9      	lsls	r1, r3, #3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	0013      	movs	r3, r2
 80059c4:	2200      	movs	r2, #0
 80059c6:	f7ff ff33 	bl	8005830 <SPI_WaitFifoStateUntilTimeout>
 80059ca:	1e03      	subs	r3, r0, #0
 80059cc:	d007      	beq.n	80059de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d2:	2220      	movs	r2, #32
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e000      	b.n	80059e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b004      	add	sp, #16
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e044      	b.n	8005a84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2274      	movs	r2, #116	; 0x74
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7fd fccb 	bl	80033a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2224      	movs	r2, #36	; 0x24
 8005a16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2101      	movs	r1, #1
 8005a24:	438a      	bics	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 f8da 	bl	8005be4 <UART_SetConfig>
 8005a30:	0003      	movs	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e024      	b.n	8005a84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 fa51 	bl	8005eec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	490d      	ldr	r1, [pc, #52]	; (8005a8c <HAL_UART_Init+0xa4>)
 8005a56:	400a      	ands	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	212a      	movs	r1, #42	; 0x2a
 8005a66:	438a      	bics	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2101      	movs	r1, #1
 8005a76:	430a      	orrs	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f000 fae9 	bl	8006054 <UART_CheckIdleState>
 8005a82:	0003      	movs	r3, r0
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	ffffb7ff 	.word	0xffffb7ff

08005a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d000      	beq.n	8005aaa <HAL_UART_Transmit+0x1a>
 8005aa8:	e096      	b.n	8005bd8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_UART_Transmit+0x28>
 8005ab0:	1dbb      	adds	r3, r7, #6
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e08e      	b.n	8005bda <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	2380      	movs	r3, #128	; 0x80
 8005ac2:	015b      	lsls	r3, r3, #5
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d109      	bne.n	8005adc <HAL_UART_Transmit+0x4c>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e07e      	b.n	8005bda <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2274      	movs	r2, #116	; 0x74
 8005ae0:	5c9b      	ldrb	r3, [r3, r2]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Transmit+0x5a>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e077      	b.n	8005bda <HAL_UART_Transmit+0x14a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2274      	movs	r2, #116	; 0x74
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	2100      	movs	r1, #0
 8005af8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b00:	f7fd fdb6 	bl	8003670 <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1dba      	adds	r2, r7, #6
 8005b0c:	2150      	movs	r1, #80	; 0x50
 8005b0e:	8812      	ldrh	r2, [r2, #0]
 8005b10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1dba      	adds	r2, r7, #6
 8005b16:	2152      	movs	r1, #82	; 0x52
 8005b18:	8812      	ldrh	r2, [r2, #0]
 8005b1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	015b      	lsls	r3, r3, #5
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d108      	bne.n	8005b3a <HAL_UART_Transmit+0xaa>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e003      	b.n	8005b42 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2274      	movs	r2, #116	; 0x74
 8005b46:	2100      	movs	r1, #0
 8005b48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005b4a:	e02d      	b.n	8005ba8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	0013      	movs	r3, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	f000 fac5 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 8005b5e:	1e03      	subs	r3, r0, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e039      	b.n	8005bda <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	05d2      	lsls	r2, r2, #23
 8005b76:	0dd2      	lsrs	r2, r2, #23
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	3302      	adds	r3, #2
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e008      	b.n	8005b96 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b292      	uxth	r2, r2
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2252      	movs	r2, #82	; 0x52
 8005b9a:	5a9b      	ldrh	r3, [r3, r2]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b299      	uxth	r1, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2252      	movs	r2, #82	; 0x52
 8005ba6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2252      	movs	r2, #82	; 0x52
 8005bac:	5a9b      	ldrh	r3, [r3, r2]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1cb      	bne.n	8005b4c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	0013      	movs	r3, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2140      	movs	r1, #64	; 0x40
 8005bc2:	f000 fa91 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 8005bc6:	1e03      	subs	r3, r0, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e005      	b.n	8005bda <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b008      	add	sp, #32
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bec:	231e      	movs	r3, #30
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4aac      	ldr	r2, [pc, #688]	; (8005ec4 <UART_SetConfig+0x2e0>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4aa7      	ldr	r2, [pc, #668]	; (8005ec8 <UART_SetConfig+0x2e4>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	4a9e      	ldr	r2, [pc, #632]	; (8005ecc <UART_SetConfig+0x2e8>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	0019      	movs	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a9a      	ldr	r2, [pc, #616]	; (8005ed0 <UART_SetConfig+0x2ec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d125      	bne.n	8005cb6 <UART_SetConfig+0xd2>
 8005c6a:	4b9a      	ldr	r3, [pc, #616]	; (8005ed4 <UART_SetConfig+0x2f0>)
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	2203      	movs	r2, #3
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00f      	beq.n	8005c96 <UART_SetConfig+0xb2>
 8005c76:	d304      	bcc.n	8005c82 <UART_SetConfig+0x9e>
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d011      	beq.n	8005ca0 <UART_SetConfig+0xbc>
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d005      	beq.n	8005c8c <UART_SetConfig+0xa8>
 8005c80:	e013      	b.n	8005caa <UART_SetConfig+0xc6>
 8005c82:	231f      	movs	r3, #31
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e064      	b.n	8005d56 <UART_SetConfig+0x172>
 8005c8c:	231f      	movs	r3, #31
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2202      	movs	r2, #2
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e05f      	b.n	8005d56 <UART_SetConfig+0x172>
 8005c96:	231f      	movs	r3, #31
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e05a      	b.n	8005d56 <UART_SetConfig+0x172>
 8005ca0:	231f      	movs	r3, #31
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e055      	b.n	8005d56 <UART_SetConfig+0x172>
 8005caa:	231f      	movs	r3, #31
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	2210      	movs	r2, #16
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	e04f      	b.n	8005d56 <UART_SetConfig+0x172>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a87      	ldr	r2, [pc, #540]	; (8005ed8 <UART_SetConfig+0x2f4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d132      	bne.n	8005d26 <UART_SetConfig+0x142>
 8005cc0:	4b84      	ldr	r3, [pc, #528]	; (8005ed4 <UART_SetConfig+0x2f0>)
 8005cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc4:	23c0      	movs	r3, #192	; 0xc0
 8005cc6:	029b      	lsls	r3, r3, #10
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	0252      	lsls	r2, r2, #9
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d019      	beq.n	8005d06 <UART_SetConfig+0x122>
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	0252      	lsls	r2, r2, #9
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d802      	bhi.n	8005ce0 <UART_SetConfig+0xfc>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <UART_SetConfig+0x10e>
 8005cde:	e01c      	b.n	8005d1a <UART_SetConfig+0x136>
 8005ce0:	2280      	movs	r2, #128	; 0x80
 8005ce2:	0292      	lsls	r2, r2, #10
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <UART_SetConfig+0x12c>
 8005ce8:	22c0      	movs	r2, #192	; 0xc0
 8005cea:	0292      	lsls	r2, r2, #10
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d005      	beq.n	8005cfc <UART_SetConfig+0x118>
 8005cf0:	e013      	b.n	8005d1a <UART_SetConfig+0x136>
 8005cf2:	231f      	movs	r3, #31
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	e02c      	b.n	8005d56 <UART_SetConfig+0x172>
 8005cfc:	231f      	movs	r3, #31
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	2202      	movs	r2, #2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e027      	b.n	8005d56 <UART_SetConfig+0x172>
 8005d06:	231f      	movs	r3, #31
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e022      	b.n	8005d56 <UART_SetConfig+0x172>
 8005d10:	231f      	movs	r3, #31
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2208      	movs	r2, #8
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e01d      	b.n	8005d56 <UART_SetConfig+0x172>
 8005d1a:	231f      	movs	r3, #31
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2210      	movs	r2, #16
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	e017      	b.n	8005d56 <UART_SetConfig+0x172>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a6c      	ldr	r2, [pc, #432]	; (8005edc <UART_SetConfig+0x2f8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d104      	bne.n	8005d3a <UART_SetConfig+0x156>
 8005d30:	231f      	movs	r3, #31
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e00d      	b.n	8005d56 <UART_SetConfig+0x172>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a68      	ldr	r2, [pc, #416]	; (8005ee0 <UART_SetConfig+0x2fc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d104      	bne.n	8005d4e <UART_SetConfig+0x16a>
 8005d44:	231f      	movs	r3, #31
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e003      	b.n	8005d56 <UART_SetConfig+0x172>
 8005d4e:	231f      	movs	r3, #31
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	2210      	movs	r2, #16
 8005d54:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d15c      	bne.n	8005e1c <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8005d62:	231f      	movs	r3, #31
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d00d      	beq.n	8005d88 <UART_SetConfig+0x1a4>
 8005d6c:	dc02      	bgt.n	8005d74 <UART_SetConfig+0x190>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <UART_SetConfig+0x19a>
 8005d72:	e015      	b.n	8005da0 <UART_SetConfig+0x1bc>
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d00a      	beq.n	8005d8e <UART_SetConfig+0x1aa>
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d00d      	beq.n	8005d98 <UART_SetConfig+0x1b4>
 8005d7c:	e010      	b.n	8005da0 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7e:	f7ff f9a3 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8005d82:	0003      	movs	r3, r0
 8005d84:	61bb      	str	r3, [r7, #24]
        break;
 8005d86:	e012      	b.n	8005dae <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b56      	ldr	r3, [pc, #344]	; (8005ee4 <UART_SetConfig+0x300>)
 8005d8a:	61bb      	str	r3, [r7, #24]
        break;
 8005d8c:	e00f      	b.n	8005dae <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7ff f913 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8005d92:	0003      	movs	r3, r0
 8005d94:	61bb      	str	r3, [r7, #24]
        break;
 8005d96:	e00a      	b.n	8005dae <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	61bb      	str	r3, [r7, #24]
        break;
 8005d9e:	e006      	b.n	8005dae <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005da4:	231e      	movs	r3, #30
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
        break;
 8005dac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d100      	bne.n	8005db6 <UART_SetConfig+0x1d2>
 8005db4:	e079      	b.n	8005eaa <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	005a      	lsls	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	18d2      	adds	r2, r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	0019      	movs	r1, r3
 8005dc8:	0010      	movs	r0, r2
 8005dca:	f7fa f9af 	bl	800012c <__udivsi3>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d91b      	bls.n	8005e12 <UART_SetConfig+0x22e>
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4a42      	ldr	r2, [pc, #264]	; (8005ee8 <UART_SetConfig+0x304>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d817      	bhi.n	8005e12 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	200e      	movs	r0, #14
 8005de8:	183b      	adds	r3, r7, r0
 8005dea:	210f      	movs	r1, #15
 8005dec:	438a      	bics	r2, r1
 8005dee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2207      	movs	r2, #7
 8005df8:	4013      	ands	r3, r2
 8005dfa:	b299      	uxth	r1, r3
 8005dfc:	183b      	adds	r3, r7, r0
 8005dfe:	183a      	adds	r2, r7, r0
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	183a      	adds	r2, r7, r0
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e04b      	b.n	8005eaa <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8005e12:	231e      	movs	r3, #30
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	2201      	movs	r2, #1
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e046      	b.n	8005eaa <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e1c:	231f      	movs	r3, #31
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d00d      	beq.n	8005e42 <UART_SetConfig+0x25e>
 8005e26:	dc02      	bgt.n	8005e2e <UART_SetConfig+0x24a>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <UART_SetConfig+0x254>
 8005e2c:	e015      	b.n	8005e5a <UART_SetConfig+0x276>
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d00a      	beq.n	8005e48 <UART_SetConfig+0x264>
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d00d      	beq.n	8005e52 <UART_SetConfig+0x26e>
 8005e36:	e010      	b.n	8005e5a <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e38:	f7ff f946 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	61bb      	str	r3, [r7, #24]
        break;
 8005e40:	e012      	b.n	8005e68 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e42:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <UART_SetConfig+0x300>)
 8005e44:	61bb      	str	r3, [r7, #24]
        break;
 8005e46:	e00f      	b.n	8005e68 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e48:	f7ff f8b6 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	61bb      	str	r3, [r7, #24]
        break;
 8005e50:	e00a      	b.n	8005e68 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	2380      	movs	r3, #128	; 0x80
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	61bb      	str	r3, [r7, #24]
        break;
 8005e58:	e006      	b.n	8005e68 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e5e:	231e      	movs	r3, #30
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
        break;
 8005e66:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01d      	beq.n	8005eaa <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	085a      	lsrs	r2, r3, #1
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	18d2      	adds	r2, r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	0010      	movs	r0, r2
 8005e80:	f7fa f954 	bl	800012c <__udivsi3>
 8005e84:	0003      	movs	r3, r0
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d908      	bls.n	8005ea2 <UART_SetConfig+0x2be>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <UART_SetConfig+0x304>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d804      	bhi.n	8005ea2 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	60da      	str	r2, [r3, #12]
 8005ea0:	e003      	b.n	8005eaa <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea2:	231e      	movs	r3, #30
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005eb6:	231e      	movs	r3, #30
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
}
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b008      	add	sp, #32
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	efff69f3 	.word	0xefff69f3
 8005ec8:	ffffcfff 	.word	0xffffcfff
 8005ecc:	fffff4ff 	.word	0xfffff4ff
 8005ed0:	40013800 	.word	0x40013800
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40004400 	.word	0x40004400
 8005edc:	40004800 	.word	0x40004800
 8005ee0:	40004c00 	.word	0x40004c00
 8005ee4:	007a1200 	.word	0x007a1200
 8005ee8:	0000ffff 	.word	0x0000ffff

08005eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	d00b      	beq.n	8005f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4a4a      	ldr	r2, [pc, #296]	; (8006030 <UART_AdvFeatureConfig+0x144>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	0019      	movs	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4a43      	ldr	r2, [pc, #268]	; (8006034 <UART_AdvFeatureConfig+0x148>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	0019      	movs	r1, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d00b      	beq.n	8005f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4a3b      	ldr	r2, [pc, #236]	; (8006038 <UART_AdvFeatureConfig+0x14c>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2208      	movs	r2, #8
 8005f60:	4013      	ands	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4a34      	ldr	r2, [pc, #208]	; (800603c <UART_AdvFeatureConfig+0x150>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	0019      	movs	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2210      	movs	r2, #16
 8005f82:	4013      	ands	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a2c      	ldr	r2, [pc, #176]	; (8006040 <UART_AdvFeatureConfig+0x154>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	0019      	movs	r1, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d00b      	beq.n	8005fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	4a25      	ldr	r2, [pc, #148]	; (8006044 <UART_AdvFeatureConfig+0x158>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	0019      	movs	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2240      	movs	r2, #64	; 0x40
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d01d      	beq.n	8006006 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <UART_AdvFeatureConfig+0x15c>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	035b      	lsls	r3, r3, #13
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d10b      	bne.n	8006006 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <UART_AdvFeatureConfig+0x160>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2280      	movs	r2, #128	; 0x80
 800600c:	4013      	ands	r3, r2
 800600e:	d00b      	beq.n	8006028 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <UART_AdvFeatureConfig+0x164>)
 8006018:	4013      	ands	r3, r2
 800601a:	0019      	movs	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	b002      	add	sp, #8
 800602e:	bd80      	pop	{r7, pc}
 8006030:	fffdffff 	.word	0xfffdffff
 8006034:	fffeffff 	.word	0xfffeffff
 8006038:	fffbffff 	.word	0xfffbffff
 800603c:	ffff7fff 	.word	0xffff7fff
 8006040:	ffffefff 	.word	0xffffefff
 8006044:	ffffdfff 	.word	0xffffdfff
 8006048:	ffefffff 	.word	0xffefffff
 800604c:	ff9fffff 	.word	0xff9fffff
 8006050:	fff7ffff 	.word	0xfff7ffff

08006054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2280      	movs	r2, #128	; 0x80
 8006060:	2100      	movs	r1, #0
 8006062:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006064:	f7fd fb04 	bl	8003670 <HAL_GetTick>
 8006068:	0003      	movs	r3, r0
 800606a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2208      	movs	r2, #8
 8006074:	4013      	ands	r3, r2
 8006076:	2b08      	cmp	r3, #8
 8006078:	d10d      	bne.n	8006096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	0399      	lsls	r1, r3, #14
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <UART_CheckIdleState+0x90>)
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	0013      	movs	r3, r2
 8006088:	2200      	movs	r2, #0
 800608a:	f000 f82d 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d001      	beq.n	8006096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e022      	b.n	80060dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2204      	movs	r2, #4
 800609e:	4013      	ands	r3, r2
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d10d      	bne.n	80060c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	03d9      	lsls	r1, r3, #15
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <UART_CheckIdleState+0x90>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	0013      	movs	r3, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	f000 f818 	bl	80060e8 <UART_WaitOnFlagUntilTimeout>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d001      	beq.n	80060c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e00d      	b.n	80060dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2274      	movs	r2, #116	; 0x74
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	b004      	add	sp, #16
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	01ffffff 	.word	0x01ffffff

080060e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	1dfb      	adds	r3, r7, #7
 80060f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f8:	e05e      	b.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	3301      	adds	r3, #1
 80060fe:	d05b      	beq.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006100:	f7fd fab6 	bl	8003670 <HAL_GetTick>
 8006104:	0002      	movs	r2, r0
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11b      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	492f      	ldr	r1, [pc, #188]	; (80061e0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006122:	400a      	ands	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2101      	movs	r1, #1
 8006132:	438a      	bics	r2, r1
 8006134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2274      	movs	r2, #116	; 0x74
 8006146:	2100      	movs	r1, #0
 8006148:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e044      	b.n	80061d8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2204      	movs	r2, #4
 8006156:	4013      	ands	r3, r2
 8006158:	d02e      	beq.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	401a      	ands	r2, r3
 8006166:	2380      	movs	r3, #128	; 0x80
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	429a      	cmp	r2, r3
 800616c:	d124      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2280      	movs	r2, #128	; 0x80
 8006174:	0112      	lsls	r2, r2, #4
 8006176:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4917      	ldr	r1, [pc, #92]	; (80061e0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006184:	400a      	ands	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2101      	movs	r1, #1
 8006194:	438a      	bics	r2, r1
 8006196:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	2120      	movs	r1, #32
 80061aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2274      	movs	r2, #116	; 0x74
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e00f      	b.n	80061d8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	425a      	negs	r2, r3
 80061c8:	4153      	adcs	r3, r2
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	001a      	movs	r2, r3
 80061ce:	1dfb      	adds	r3, r7, #7
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d091      	beq.n	80060fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b004      	add	sp, #16
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	fffffe5f 	.word	0xfffffe5f

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	200000c0 	.word	0x200000c0

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4d0c      	ldr	r5, [pc, #48]	; (8006228 <__libc_init_array+0x38>)
 80061f6:	4c0d      	ldr	r4, [pc, #52]	; (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	2600      	movs	r6, #0
 8006202:	f002 f89f 	bl	8008344 <_init>
 8006206:	4d0a      	ldr	r5, [pc, #40]	; (8006230 <__libc_init_array+0x40>)
 8006208:	4c0a      	ldr	r4, [pc, #40]	; (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	00b3      	lsls	r3, r6, #2
 8006216:	58eb      	ldr	r3, [r5, r3]
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	00b3      	lsls	r3, r6, #2
 8006220:	58eb      	ldr	r3, [r5, r3]
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	08008698 	.word	0x08008698
 800622c:	08008698 	.word	0x08008698
 8006230:	08008698 	.word	0x08008698
 8006234:	0800869c 	.word	0x0800869c

08006238 <memset>:
 8006238:	0003      	movs	r3, r0
 800623a:	1812      	adds	r2, r2, r0
 800623c:	4293      	cmp	r3, r2
 800623e:	d100      	bne.n	8006242 <memset+0xa>
 8006240:	4770      	bx	lr
 8006242:	7019      	strb	r1, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	e7f9      	b.n	800623c <memset+0x4>

08006248 <__cvt>:
 8006248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624a:	b08b      	sub	sp, #44	; 0x2c
 800624c:	0014      	movs	r4, r2
 800624e:	1e1d      	subs	r5, r3, #0
 8006250:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006252:	da53      	bge.n	80062fc <__cvt+0xb4>
 8006254:	2480      	movs	r4, #128	; 0x80
 8006256:	0624      	lsls	r4, r4, #24
 8006258:	191b      	adds	r3, r3, r4
 800625a:	001d      	movs	r5, r3
 800625c:	0014      	movs	r4, r2
 800625e:	232d      	movs	r3, #45	; 0x2d
 8006260:	700b      	strb	r3, [r1, #0]
 8006262:	2320      	movs	r3, #32
 8006264:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006266:	2203      	movs	r2, #3
 8006268:	439e      	bics	r6, r3
 800626a:	2e46      	cmp	r6, #70	; 0x46
 800626c:	d007      	beq.n	800627e <__cvt+0x36>
 800626e:	0033      	movs	r3, r6
 8006270:	3b45      	subs	r3, #69	; 0x45
 8006272:	4259      	negs	r1, r3
 8006274:	414b      	adcs	r3, r1
 8006276:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006278:	3a01      	subs	r2, #1
 800627a:	18cb      	adds	r3, r1, r3
 800627c:	9310      	str	r3, [sp, #64]	; 0x40
 800627e:	ab09      	add	r3, sp, #36	; 0x24
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	ab08      	add	r3, sp, #32
 8006284:	9303      	str	r3, [sp, #12]
 8006286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006288:	9200      	str	r2, [sp, #0]
 800628a:	9302      	str	r3, [sp, #8]
 800628c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800628e:	0022      	movs	r2, r4
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	002b      	movs	r3, r5
 8006294:	f000 fcdc 	bl	8006c50 <_dtoa_r>
 8006298:	0007      	movs	r7, r0
 800629a:	2e47      	cmp	r6, #71	; 0x47
 800629c:	d102      	bne.n	80062a4 <__cvt+0x5c>
 800629e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a0:	07db      	lsls	r3, r3, #31
 80062a2:	d524      	bpl.n	80062ee <__cvt+0xa6>
 80062a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062a6:	18fb      	adds	r3, r7, r3
 80062a8:	9307      	str	r3, [sp, #28]
 80062aa:	2e46      	cmp	r6, #70	; 0x46
 80062ac:	d114      	bne.n	80062d8 <__cvt+0x90>
 80062ae:	783b      	ldrb	r3, [r7, #0]
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d10c      	bne.n	80062ce <__cvt+0x86>
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	0020      	movs	r0, r4
 80062ba:	0029      	movs	r1, r5
 80062bc:	f7fa f8bc 	bl	8000438 <__aeabi_dcmpeq>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d104      	bne.n	80062ce <__cvt+0x86>
 80062c4:	2301      	movs	r3, #1
 80062c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062d0:	9a07      	ldr	r2, [sp, #28]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	18d3      	adds	r3, r2, r3
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	0020      	movs	r0, r4
 80062de:	0029      	movs	r1, r5
 80062e0:	f7fa f8aa 	bl	8000438 <__aeabi_dcmpeq>
 80062e4:	2230      	movs	r2, #48	; 0x30
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d00d      	beq.n	8006306 <__cvt+0xbe>
 80062ea:	9b07      	ldr	r3, [sp, #28]
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	0038      	movs	r0, r7
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f4:	1bdb      	subs	r3, r3, r7
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	b00b      	add	sp, #44	; 0x2c
 80062fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fc:	2300      	movs	r3, #0
 80062fe:	e7af      	b.n	8006260 <__cvt+0x18>
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	9109      	str	r1, [sp, #36]	; 0x24
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006308:	9907      	ldr	r1, [sp, #28]
 800630a:	428b      	cmp	r3, r1
 800630c:	d3f8      	bcc.n	8006300 <__cvt+0xb8>
 800630e:	e7ee      	b.n	80062ee <__cvt+0xa6>

08006310 <__exponent>:
 8006310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006312:	1c83      	adds	r3, r0, #2
 8006314:	b085      	sub	sp, #20
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	0006      	movs	r6, r0
 800631a:	000c      	movs	r4, r1
 800631c:	7002      	strb	r2, [r0, #0]
 800631e:	232b      	movs	r3, #43	; 0x2b
 8006320:	2900      	cmp	r1, #0
 8006322:	da01      	bge.n	8006328 <__exponent+0x18>
 8006324:	232d      	movs	r3, #45	; 0x2d
 8006326:	424c      	negs	r4, r1
 8006328:	7073      	strb	r3, [r6, #1]
 800632a:	2c09      	cmp	r4, #9
 800632c:	dd22      	ble.n	8006374 <__exponent+0x64>
 800632e:	ab02      	add	r3, sp, #8
 8006330:	1ddd      	adds	r5, r3, #7
 8006332:	0020      	movs	r0, r4
 8006334:	210a      	movs	r1, #10
 8006336:	f7fa f869 	bl	800040c <__aeabi_idivmod>
 800633a:	1e6f      	subs	r7, r5, #1
 800633c:	3130      	adds	r1, #48	; 0x30
 800633e:	7039      	strb	r1, [r7, #0]
 8006340:	0020      	movs	r0, r4
 8006342:	210a      	movs	r1, #10
 8006344:	f7f9 ff7c 	bl	8000240 <__divsi3>
 8006348:	0004      	movs	r4, r0
 800634a:	2809      	cmp	r0, #9
 800634c:	dc0b      	bgt.n	8006366 <__exponent+0x56>
 800634e:	3d02      	subs	r5, #2
 8006350:	3430      	adds	r4, #48	; 0x30
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	702c      	strb	r4, [r5, #0]
 8006356:	aa02      	add	r2, sp, #8
 8006358:	3207      	adds	r2, #7
 800635a:	0018      	movs	r0, r3
 800635c:	42aa      	cmp	r2, r5
 800635e:	d804      	bhi.n	800636a <__exponent+0x5a>
 8006360:	1b80      	subs	r0, r0, r6
 8006362:	b005      	add	sp, #20
 8006364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006366:	003d      	movs	r5, r7
 8006368:	e7e3      	b.n	8006332 <__exponent+0x22>
 800636a:	782a      	ldrb	r2, [r5, #0]
 800636c:	3501      	adds	r5, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	e7f0      	b.n	8006356 <__exponent+0x46>
 8006374:	2330      	movs	r3, #48	; 0x30
 8006376:	18e4      	adds	r4, r4, r3
 8006378:	70b3      	strb	r3, [r6, #2]
 800637a:	1d30      	adds	r0, r6, #4
 800637c:	70f4      	strb	r4, [r6, #3]
 800637e:	e7ef      	b.n	8006360 <__exponent+0x50>

08006380 <_printf_float>:
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b095      	sub	sp, #84	; 0x54
 8006384:	000c      	movs	r4, r1
 8006386:	920a      	str	r2, [sp, #40]	; 0x28
 8006388:	930b      	str	r3, [sp, #44]	; 0x2c
 800638a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800638c:	9009      	str	r0, [sp, #36]	; 0x24
 800638e:	f001 fa3f 	bl	8007810 <_localeconv_r>
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	0018      	movs	r0, r3
 8006396:	930c      	str	r3, [sp, #48]	; 0x30
 8006398:	f7f9 feb6 	bl	8000108 <strlen>
 800639c:	2300      	movs	r3, #0
 800639e:	9312      	str	r3, [sp, #72]	; 0x48
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	900e      	str	r0, [sp, #56]	; 0x38
 80063a4:	930d      	str	r3, [sp, #52]	; 0x34
 80063a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063a8:	7e27      	ldrb	r7, [r4, #24]
 80063aa:	682b      	ldr	r3, [r5, #0]
 80063ac:	2207      	movs	r2, #7
 80063ae:	05c9      	lsls	r1, r1, #23
 80063b0:	d545      	bpl.n	800643e <_printf_float+0xbe>
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	4393      	bics	r3, r2
 80063b6:	001a      	movs	r2, r3
 80063b8:	3208      	adds	r2, #8
 80063ba:	602a      	str	r2, [r5, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	64a2      	str	r2, [r4, #72]	; 0x48
 80063c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80063c4:	2201      	movs	r2, #1
 80063c6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80063c8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80063ca:	006b      	lsls	r3, r5, #1
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d0:	4252      	negs	r2, r2
 80063d2:	4bac      	ldr	r3, [pc, #688]	; (8006684 <_printf_float+0x304>)
 80063d4:	0030      	movs	r0, r6
 80063d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063d8:	f7fb fda6 	bl	8001f28 <__aeabi_dcmpun>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d130      	bne.n	8006442 <_printf_float+0xc2>
 80063e0:	2201      	movs	r2, #1
 80063e2:	4ba8      	ldr	r3, [pc, #672]	; (8006684 <_printf_float+0x304>)
 80063e4:	4252      	negs	r2, r2
 80063e6:	0030      	movs	r0, r6
 80063e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063ea:	f7fa f835 	bl	8000458 <__aeabi_dcmple>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d127      	bne.n	8006442 <_printf_float+0xc2>
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
 80063f6:	0030      	movs	r0, r6
 80063f8:	0029      	movs	r1, r5
 80063fa:	f7fa f823 	bl	8000444 <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d003      	beq.n	800640a <_printf_float+0x8a>
 8006402:	0023      	movs	r3, r4
 8006404:	222d      	movs	r2, #45	; 0x2d
 8006406:	3343      	adds	r3, #67	; 0x43
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	4d9f      	ldr	r5, [pc, #636]	; (8006688 <_printf_float+0x308>)
 800640c:	2f47      	cmp	r7, #71	; 0x47
 800640e:	d800      	bhi.n	8006412 <_printf_float+0x92>
 8006410:	4d9e      	ldr	r5, [pc, #632]	; (800668c <_printf_float+0x30c>)
 8006412:	2303      	movs	r3, #3
 8006414:	2600      	movs	r6, #0
 8006416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	3301      	adds	r3, #1
 800641c:	439a      	bics	r2, r3
 800641e:	6022      	str	r2, [r4, #0]
 8006420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006422:	aa13      	add	r2, sp, #76	; 0x4c
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	0021      	movs	r1, r4
 8006428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800642c:	f000 f9f4 	bl	8006818 <_printf_common>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d000      	beq.n	8006436 <_printf_float+0xb6>
 8006434:	e093      	b.n	800655e <_printf_float+0x1de>
 8006436:	2001      	movs	r0, #1
 8006438:	4240      	negs	r0, r0
 800643a:	b015      	add	sp, #84	; 0x54
 800643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643e:	3307      	adds	r3, #7
 8006440:	e7b8      	b.n	80063b4 <_printf_float+0x34>
 8006442:	0032      	movs	r2, r6
 8006444:	002b      	movs	r3, r5
 8006446:	0030      	movs	r0, r6
 8006448:	0029      	movs	r1, r5
 800644a:	f7fb fd6d 	bl	8001f28 <__aeabi_dcmpun>
 800644e:	2800      	cmp	r0, #0
 8006450:	d004      	beq.n	800645c <_printf_float+0xdc>
 8006452:	4d8f      	ldr	r5, [pc, #572]	; (8006690 <_printf_float+0x310>)
 8006454:	2f47      	cmp	r7, #71	; 0x47
 8006456:	d8dc      	bhi.n	8006412 <_printf_float+0x92>
 8006458:	4d8e      	ldr	r5, [pc, #568]	; (8006694 <_printf_float+0x314>)
 800645a:	e7da      	b.n	8006412 <_printf_float+0x92>
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	430b      	orrs	r3, r1
 8006466:	1c51      	adds	r1, r2, #1
 8006468:	d143      	bne.n	80064f2 <_printf_float+0x172>
 800646a:	3207      	adds	r2, #7
 800646c:	6062      	str	r2, [r4, #4]
 800646e:	aa12      	add	r2, sp, #72	; 0x48
 8006470:	2100      	movs	r1, #0
 8006472:	9205      	str	r2, [sp, #20]
 8006474:	aa11      	add	r2, sp, #68	; 0x44
 8006476:	9203      	str	r2, [sp, #12]
 8006478:	2223      	movs	r2, #35	; 0x23
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	9106      	str	r1, [sp, #24]
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	a908      	add	r1, sp, #32
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	1852      	adds	r2, r2, r1
 8006486:	9202      	str	r2, [sp, #8]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	0032      	movs	r2, r6
 800648c:	002b      	movs	r3, r5
 800648e:	9704      	str	r7, [sp, #16]
 8006490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006492:	f7ff fed9 	bl	8006248 <__cvt>
 8006496:	2320      	movs	r3, #32
 8006498:	003a      	movs	r2, r7
 800649a:	0005      	movs	r5, r0
 800649c:	439a      	bics	r2, r3
 800649e:	2a47      	cmp	r2, #71	; 0x47
 80064a0:	d107      	bne.n	80064b2 <_printf_float+0x132>
 80064a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064a4:	1cda      	adds	r2, r3, #3
 80064a6:	db02      	blt.n	80064ae <_printf_float+0x12e>
 80064a8:	6862      	ldr	r2, [r4, #4]
 80064aa:	4293      	cmp	r3, r2
 80064ac:	dd45      	ble.n	800653a <_printf_float+0x1ba>
 80064ae:	3f02      	subs	r7, #2
 80064b0:	b2ff      	uxtb	r7, r7
 80064b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064b4:	2f65      	cmp	r7, #101	; 0x65
 80064b6:	d825      	bhi.n	8006504 <_printf_float+0x184>
 80064b8:	0020      	movs	r0, r4
 80064ba:	3901      	subs	r1, #1
 80064bc:	003a      	movs	r2, r7
 80064be:	3050      	adds	r0, #80	; 0x50
 80064c0:	9111      	str	r1, [sp, #68]	; 0x44
 80064c2:	f7ff ff25 	bl	8006310 <__exponent>
 80064c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064c8:	0006      	movs	r6, r0
 80064ca:	1813      	adds	r3, r2, r0
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	2a01      	cmp	r2, #1
 80064d0:	dc02      	bgt.n	80064d8 <_printf_float+0x158>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	07d2      	lsls	r2, r2, #31
 80064d6:	d501      	bpl.n	80064dc <_printf_float+0x15c>
 80064d8:	3301      	adds	r3, #1
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	2323      	movs	r3, #35	; 0x23
 80064de:	aa08      	add	r2, sp, #32
 80064e0:	189b      	adds	r3, r3, r2
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d09b      	beq.n	8006420 <_printf_float+0xa0>
 80064e8:	0023      	movs	r3, r4
 80064ea:	222d      	movs	r2, #45	; 0x2d
 80064ec:	3343      	adds	r3, #67	; 0x43
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e796      	b.n	8006420 <_printf_float+0xa0>
 80064f2:	2f67      	cmp	r7, #103	; 0x67
 80064f4:	d100      	bne.n	80064f8 <_printf_float+0x178>
 80064f6:	e176      	b.n	80067e6 <_printf_float+0x466>
 80064f8:	2f47      	cmp	r7, #71	; 0x47
 80064fa:	d1b8      	bne.n	800646e <_printf_float+0xee>
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	d1b6      	bne.n	800646e <_printf_float+0xee>
 8006500:	2201      	movs	r2, #1
 8006502:	e7b3      	b.n	800646c <_printf_float+0xec>
 8006504:	2f66      	cmp	r7, #102	; 0x66
 8006506:	d119      	bne.n	800653c <_printf_float+0x1bc>
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	2900      	cmp	r1, #0
 800650c:	dd0c      	ble.n	8006528 <_printf_float+0x1a8>
 800650e:	6121      	str	r1, [r4, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <_printf_float+0x19a>
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	07d2      	lsls	r2, r2, #31
 8006518:	d502      	bpl.n	8006520 <_printf_float+0x1a0>
 800651a:	3301      	adds	r3, #1
 800651c:	185b      	adds	r3, r3, r1
 800651e:	6123      	str	r3, [r4, #16]
 8006520:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006522:	2600      	movs	r6, #0
 8006524:	65a3      	str	r3, [r4, #88]	; 0x58
 8006526:	e7d9      	b.n	80064dc <_printf_float+0x15c>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <_printf_float+0x1b4>
 800652c:	2201      	movs	r2, #1
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	4211      	tst	r1, r2
 8006532:	d000      	beq.n	8006536 <_printf_float+0x1b6>
 8006534:	1c9a      	adds	r2, r3, #2
 8006536:	6122      	str	r2, [r4, #16]
 8006538:	e7f2      	b.n	8006520 <_printf_float+0x1a0>
 800653a:	2767      	movs	r7, #103	; 0x67
 800653c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800653e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006540:	4293      	cmp	r3, r2
 8006542:	db05      	blt.n	8006550 <_printf_float+0x1d0>
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	6123      	str	r3, [r4, #16]
 8006548:	07d2      	lsls	r2, r2, #31
 800654a:	d5e9      	bpl.n	8006520 <_printf_float+0x1a0>
 800654c:	3301      	adds	r3, #1
 800654e:	e7e6      	b.n	800651e <_printf_float+0x19e>
 8006550:	2101      	movs	r1, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	dc01      	bgt.n	800655a <_printf_float+0x1da>
 8006556:	1849      	adds	r1, r1, r1
 8006558:	1ac9      	subs	r1, r1, r3
 800655a:	1852      	adds	r2, r2, r1
 800655c:	e7eb      	b.n	8006536 <_printf_float+0x1b6>
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	0553      	lsls	r3, r2, #21
 8006562:	d408      	bmi.n	8006576 <_printf_float+0x1f6>
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	002a      	movs	r2, r5
 8006568:	990a      	ldr	r1, [sp, #40]	; 0x28
 800656a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800656c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800656e:	47a8      	blx	r5
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d129      	bne.n	80065c8 <_printf_float+0x248>
 8006574:	e75f      	b.n	8006436 <_printf_float+0xb6>
 8006576:	2f65      	cmp	r7, #101	; 0x65
 8006578:	d800      	bhi.n	800657c <_printf_float+0x1fc>
 800657a:	e0e0      	b.n	800673e <_printf_float+0x3be>
 800657c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800657e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	f7f9 ff58 	bl	8000438 <__aeabi_dcmpeq>
 8006588:	2800      	cmp	r0, #0
 800658a:	d034      	beq.n	80065f6 <_printf_float+0x276>
 800658c:	2301      	movs	r3, #1
 800658e:	4a42      	ldr	r2, [pc, #264]	; (8006698 <_printf_float+0x318>)
 8006590:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006594:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006596:	47a8      	blx	r5
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d100      	bne.n	800659e <_printf_float+0x21e>
 800659c:	e74b      	b.n	8006436 <_printf_float+0xb6>
 800659e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065a2:	4293      	cmp	r3, r2
 80065a4:	db02      	blt.n	80065ac <_printf_float+0x22c>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	07db      	lsls	r3, r3, #31
 80065aa:	d50d      	bpl.n	80065c8 <_printf_float+0x248>
 80065ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065b6:	47a8      	blx	r5
 80065b8:	2500      	movs	r5, #0
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	d100      	bne.n	80065c0 <_printf_float+0x240>
 80065be:	e73a      	b.n	8006436 <_printf_float+0xb6>
 80065c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c2:	3b01      	subs	r3, #1
 80065c4:	42ab      	cmp	r3, r5
 80065c6:	dc0a      	bgt.n	80065de <_printf_float+0x25e>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	079b      	lsls	r3, r3, #30
 80065cc:	d500      	bpl.n	80065d0 <_printf_float+0x250>
 80065ce:	e108      	b.n	80067e2 <_printf_float+0x462>
 80065d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065d2:	68e0      	ldr	r0, [r4, #12]
 80065d4:	4298      	cmp	r0, r3
 80065d6:	db00      	blt.n	80065da <_printf_float+0x25a>
 80065d8:	e72f      	b.n	800643a <_printf_float+0xba>
 80065da:	0018      	movs	r0, r3
 80065dc:	e72d      	b.n	800643a <_printf_float+0xba>
 80065de:	0022      	movs	r2, r4
 80065e0:	2301      	movs	r3, #1
 80065e2:	321a      	adds	r2, #26
 80065e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065ea:	47b0      	blx	r6
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d100      	bne.n	80065f2 <_printf_float+0x272>
 80065f0:	e721      	b.n	8006436 <_printf_float+0xb6>
 80065f2:	3501      	adds	r5, #1
 80065f4:	e7e4      	b.n	80065c0 <_printf_float+0x240>
 80065f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dc2d      	bgt.n	8006658 <_printf_float+0x2d8>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4a26      	ldr	r2, [pc, #152]	; (8006698 <_printf_float+0x318>)
 8006600:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006604:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006606:	47b0      	blx	r6
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d100      	bne.n	800660e <_printf_float+0x28e>
 800660c:	e713      	b.n	8006436 <_printf_float+0xb6>
 800660e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <_printf_float+0x2a0>
 8006614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <_printf_float+0x2a0>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	07db      	lsls	r3, r3, #31
 800661e:	d5d3      	bpl.n	80065c8 <_printf_float+0x248>
 8006620:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006626:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662a:	47b0      	blx	r6
 800662c:	2600      	movs	r6, #0
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d100      	bne.n	8006634 <_printf_float+0x2b4>
 8006632:	e700      	b.n	8006436 <_printf_float+0xb6>
 8006634:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006636:	425b      	negs	r3, r3
 8006638:	42b3      	cmp	r3, r6
 800663a:	dc01      	bgt.n	8006640 <_printf_float+0x2c0>
 800663c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800663e:	e792      	b.n	8006566 <_printf_float+0x1e6>
 8006640:	0022      	movs	r2, r4
 8006642:	2301      	movs	r3, #1
 8006644:	321a      	adds	r2, #26
 8006646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800664c:	47b8      	blx	r7
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d100      	bne.n	8006654 <_printf_float+0x2d4>
 8006652:	e6f0      	b.n	8006436 <_printf_float+0xb6>
 8006654:	3601      	adds	r6, #1
 8006656:	e7ed      	b.n	8006634 <_printf_float+0x2b4>
 8006658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800665a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800665c:	429f      	cmp	r7, r3
 800665e:	dd00      	ble.n	8006662 <_printf_float+0x2e2>
 8006660:	001f      	movs	r7, r3
 8006662:	2f00      	cmp	r7, #0
 8006664:	dd08      	ble.n	8006678 <_printf_float+0x2f8>
 8006666:	003b      	movs	r3, r7
 8006668:	002a      	movs	r2, r5
 800666a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006670:	47b0      	blx	r6
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d100      	bne.n	8006678 <_printf_float+0x2f8>
 8006676:	e6de      	b.n	8006436 <_printf_float+0xb6>
 8006678:	2300      	movs	r3, #0
 800667a:	930d      	str	r3, [sp, #52]	; 0x34
 800667c:	43fb      	mvns	r3, r7
 800667e:	17db      	asrs	r3, r3, #31
 8006680:	930f      	str	r3, [sp, #60]	; 0x3c
 8006682:	e018      	b.n	80066b6 <_printf_float+0x336>
 8006684:	7fefffff 	.word	0x7fefffff
 8006688:	08008438 	.word	0x08008438
 800668c:	08008434 	.word	0x08008434
 8006690:	08008440 	.word	0x08008440
 8006694:	0800843c 	.word	0x0800843c
 8006698:	08008444 	.word	0x08008444
 800669c:	0022      	movs	r2, r4
 800669e:	2301      	movs	r3, #1
 80066a0:	321a      	adds	r2, #26
 80066a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066a8:	47b0      	blx	r6
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	d100      	bne.n	80066b0 <_printf_float+0x330>
 80066ae:	e6c2      	b.n	8006436 <_printf_float+0xb6>
 80066b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066b2:	3301      	adds	r3, #1
 80066b4:	930d      	str	r3, [sp, #52]	; 0x34
 80066b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066b8:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80066ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066bc:	403b      	ands	r3, r7
 80066be:	1af3      	subs	r3, r6, r3
 80066c0:	4293      	cmp	r3, r2
 80066c2:	dceb      	bgt.n	800669c <_printf_float+0x31c>
 80066c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066c8:	19ad      	adds	r5, r5, r6
 80066ca:	4293      	cmp	r3, r2
 80066cc:	db10      	blt.n	80066f0 <_printf_float+0x370>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	07db      	lsls	r3, r3, #31
 80066d2:	d40d      	bmi.n	80066f0 <_printf_float+0x370>
 80066d4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80066d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066d8:	1bbe      	subs	r6, r7, r6
 80066da:	1aff      	subs	r7, r7, r3
 80066dc:	42b7      	cmp	r7, r6
 80066de:	dd00      	ble.n	80066e2 <_printf_float+0x362>
 80066e0:	0037      	movs	r7, r6
 80066e2:	2f00      	cmp	r7, #0
 80066e4:	dc0d      	bgt.n	8006702 <_printf_float+0x382>
 80066e6:	43fe      	mvns	r6, r7
 80066e8:	17f3      	asrs	r3, r6, #31
 80066ea:	2500      	movs	r5, #0
 80066ec:	930c      	str	r3, [sp, #48]	; 0x30
 80066ee:	e01c      	b.n	800672a <_printf_float+0x3aa>
 80066f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80066f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80066fa:	47b8      	blx	r7
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d1e9      	bne.n	80066d4 <_printf_float+0x354>
 8006700:	e699      	b.n	8006436 <_printf_float+0xb6>
 8006702:	003b      	movs	r3, r7
 8006704:	002a      	movs	r2, r5
 8006706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800670a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800670c:	47a8      	blx	r5
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d1e9      	bne.n	80066e6 <_printf_float+0x366>
 8006712:	e690      	b.n	8006436 <_printf_float+0xb6>
 8006714:	0022      	movs	r2, r4
 8006716:	2301      	movs	r3, #1
 8006718:	321a      	adds	r2, #26
 800671a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800671c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800671e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006720:	47b0      	blx	r6
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d100      	bne.n	8006728 <_printf_float+0x3a8>
 8006726:	e686      	b.n	8006436 <_printf_float+0xb6>
 8006728:	3501      	adds	r5, #1
 800672a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800672c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800672e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	003a      	movs	r2, r7
 8006734:	400a      	ands	r2, r1
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	42ab      	cmp	r3, r5
 800673a:	dceb      	bgt.n	8006714 <_printf_float+0x394>
 800673c:	e744      	b.n	80065c8 <_printf_float+0x248>
 800673e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006740:	2b01      	cmp	r3, #1
 8006742:	dc02      	bgt.n	800674a <_printf_float+0x3ca>
 8006744:	2301      	movs	r3, #1
 8006746:	421a      	tst	r2, r3
 8006748:	d032      	beq.n	80067b0 <_printf_float+0x430>
 800674a:	2301      	movs	r3, #1
 800674c:	002a      	movs	r2, r5
 800674e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006752:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006754:	47b8      	blx	r7
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d100      	bne.n	800675c <_printf_float+0x3dc>
 800675a:	e66c      	b.n	8006436 <_printf_float+0xb6>
 800675c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800675e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006760:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006764:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006766:	3501      	adds	r5, #1
 8006768:	47b8      	blx	r7
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d100      	bne.n	8006770 <_printf_float+0x3f0>
 800676e:	e662      	b.n	8006436 <_printf_float+0xb6>
 8006770:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006772:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006776:	2200      	movs	r2, #0
 8006778:	1e5f      	subs	r7, r3, #1
 800677a:	2300      	movs	r3, #0
 800677c:	f7f9 fe5c 	bl	8000438 <__aeabi_dcmpeq>
 8006780:	003b      	movs	r3, r7
 8006782:	2800      	cmp	r0, #0
 8006784:	d014      	beq.n	80067b0 <_printf_float+0x430>
 8006786:	2500      	movs	r5, #0
 8006788:	e00a      	b.n	80067a0 <_printf_float+0x420>
 800678a:	0022      	movs	r2, r4
 800678c:	2301      	movs	r3, #1
 800678e:	321a      	adds	r2, #26
 8006790:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006792:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006794:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006796:	47b8      	blx	r7
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d100      	bne.n	800679e <_printf_float+0x41e>
 800679c:	e64b      	b.n	8006436 <_printf_float+0xb6>
 800679e:	3501      	adds	r5, #1
 80067a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067a2:	3b01      	subs	r3, #1
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dcf0      	bgt.n	800678a <_printf_float+0x40a>
 80067a8:	0022      	movs	r2, r4
 80067aa:	0033      	movs	r3, r6
 80067ac:	3250      	adds	r2, #80	; 0x50
 80067ae:	e6db      	b.n	8006568 <_printf_float+0x1e8>
 80067b0:	002a      	movs	r2, r5
 80067b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80067b8:	47a8      	blx	r5
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d1f4      	bne.n	80067a8 <_printf_float+0x428>
 80067be:	e63a      	b.n	8006436 <_printf_float+0xb6>
 80067c0:	0022      	movs	r2, r4
 80067c2:	2301      	movs	r3, #1
 80067c4:	3219      	adds	r2, #25
 80067c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80067cc:	47b0      	blx	r6
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	d100      	bne.n	80067d4 <_printf_float+0x454>
 80067d2:	e630      	b.n	8006436 <_printf_float+0xb6>
 80067d4:	3501      	adds	r5, #1
 80067d6:	68e3      	ldr	r3, [r4, #12]
 80067d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	42ab      	cmp	r3, r5
 80067de:	dcef      	bgt.n	80067c0 <_printf_float+0x440>
 80067e0:	e6f6      	b.n	80065d0 <_printf_float+0x250>
 80067e2:	2500      	movs	r5, #0
 80067e4:	e7f7      	b.n	80067d6 <_printf_float+0x456>
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	d100      	bne.n	80067ec <_printf_float+0x46c>
 80067ea:	e689      	b.n	8006500 <_printf_float+0x180>
 80067ec:	2100      	movs	r1, #0
 80067ee:	9106      	str	r1, [sp, #24]
 80067f0:	a912      	add	r1, sp, #72	; 0x48
 80067f2:	9105      	str	r1, [sp, #20]
 80067f4:	a911      	add	r1, sp, #68	; 0x44
 80067f6:	9103      	str	r1, [sp, #12]
 80067f8:	2123      	movs	r1, #35	; 0x23
 80067fa:	a808      	add	r0, sp, #32
 80067fc:	1809      	adds	r1, r1, r0
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	9200      	str	r2, [sp, #0]
 8006804:	002b      	movs	r3, r5
 8006806:	9704      	str	r7, [sp, #16]
 8006808:	9102      	str	r1, [sp, #8]
 800680a:	0032      	movs	r2, r6
 800680c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800680e:	f7ff fd1b 	bl	8006248 <__cvt>
 8006812:	0005      	movs	r5, r0
 8006814:	e645      	b.n	80064a2 <_printf_float+0x122>
 8006816:	46c0      	nop			; (mov r8, r8)

08006818 <_printf_common>:
 8006818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681a:	0015      	movs	r5, r2
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	688a      	ldr	r2, [r1, #8]
 8006820:	690b      	ldr	r3, [r1, #16]
 8006822:	9000      	str	r0, [sp, #0]
 8006824:	000c      	movs	r4, r1
 8006826:	4293      	cmp	r3, r2
 8006828:	da00      	bge.n	800682c <_printf_common+0x14>
 800682a:	0013      	movs	r3, r2
 800682c:	0022      	movs	r2, r4
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	3243      	adds	r2, #67	; 0x43
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	2a00      	cmp	r2, #0
 8006836:	d001      	beq.n	800683c <_printf_common+0x24>
 8006838:	3301      	adds	r3, #1
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	069b      	lsls	r3, r3, #26
 8006840:	d502      	bpl.n	8006848 <_printf_common+0x30>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	3302      	adds	r3, #2
 8006846:	602b      	str	r3, [r5, #0]
 8006848:	2706      	movs	r7, #6
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	401f      	ands	r7, r3
 800684e:	d027      	beq.n	80068a0 <_printf_common+0x88>
 8006850:	0023      	movs	r3, r4
 8006852:	3343      	adds	r3, #67	; 0x43
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	1e5a      	subs	r2, r3, #1
 8006858:	4193      	sbcs	r3, r2
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	0692      	lsls	r2, r2, #26
 800685e:	d430      	bmi.n	80068c2 <_printf_common+0xaa>
 8006860:	0022      	movs	r2, r4
 8006862:	9901      	ldr	r1, [sp, #4]
 8006864:	3243      	adds	r2, #67	; 0x43
 8006866:	9800      	ldr	r0, [sp, #0]
 8006868:	9e08      	ldr	r6, [sp, #32]
 800686a:	47b0      	blx	r6
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d025      	beq.n	80068bc <_printf_common+0xa4>
 8006870:	2306      	movs	r3, #6
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	682a      	ldr	r2, [r5, #0]
 8006876:	68e1      	ldr	r1, [r4, #12]
 8006878:	4003      	ands	r3, r0
 800687a:	2500      	movs	r5, #0
 800687c:	2b04      	cmp	r3, #4
 800687e:	d103      	bne.n	8006888 <_printf_common+0x70>
 8006880:	1a8d      	subs	r5, r1, r2
 8006882:	43eb      	mvns	r3, r5
 8006884:	17db      	asrs	r3, r3, #31
 8006886:	401d      	ands	r5, r3
 8006888:	68a3      	ldr	r3, [r4, #8]
 800688a:	6922      	ldr	r2, [r4, #16]
 800688c:	4293      	cmp	r3, r2
 800688e:	dd01      	ble.n	8006894 <_printf_common+0x7c>
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	18ed      	adds	r5, r5, r3
 8006894:	2700      	movs	r7, #0
 8006896:	42bd      	cmp	r5, r7
 8006898:	d120      	bne.n	80068dc <_printf_common+0xc4>
 800689a:	2000      	movs	r0, #0
 800689c:	e010      	b.n	80068c0 <_printf_common+0xa8>
 800689e:	3701      	adds	r7, #1
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	682a      	ldr	r2, [r5, #0]
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	42bb      	cmp	r3, r7
 80068a8:	ddd2      	ble.n	8006850 <_printf_common+0x38>
 80068aa:	0022      	movs	r2, r4
 80068ac:	2301      	movs	r3, #1
 80068ae:	3219      	adds	r2, #25
 80068b0:	9901      	ldr	r1, [sp, #4]
 80068b2:	9800      	ldr	r0, [sp, #0]
 80068b4:	9e08      	ldr	r6, [sp, #32]
 80068b6:	47b0      	blx	r6
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d1f0      	bne.n	800689e <_printf_common+0x86>
 80068bc:	2001      	movs	r0, #1
 80068be:	4240      	negs	r0, r0
 80068c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068c2:	2030      	movs	r0, #48	; 0x30
 80068c4:	18e1      	adds	r1, r4, r3
 80068c6:	3143      	adds	r1, #67	; 0x43
 80068c8:	7008      	strb	r0, [r1, #0]
 80068ca:	0021      	movs	r1, r4
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	3145      	adds	r1, #69	; 0x45
 80068d0:	7809      	ldrb	r1, [r1, #0]
 80068d2:	18a2      	adds	r2, r4, r2
 80068d4:	3243      	adds	r2, #67	; 0x43
 80068d6:	3302      	adds	r3, #2
 80068d8:	7011      	strb	r1, [r2, #0]
 80068da:	e7c1      	b.n	8006860 <_printf_common+0x48>
 80068dc:	0022      	movs	r2, r4
 80068de:	2301      	movs	r3, #1
 80068e0:	321a      	adds	r2, #26
 80068e2:	9901      	ldr	r1, [sp, #4]
 80068e4:	9800      	ldr	r0, [sp, #0]
 80068e6:	9e08      	ldr	r6, [sp, #32]
 80068e8:	47b0      	blx	r6
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d0e6      	beq.n	80068bc <_printf_common+0xa4>
 80068ee:	3701      	adds	r7, #1
 80068f0:	e7d1      	b.n	8006896 <_printf_common+0x7e>
	...

080068f4 <_printf_i>:
 80068f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f6:	b089      	sub	sp, #36	; 0x24
 80068f8:	9204      	str	r2, [sp, #16]
 80068fa:	000a      	movs	r2, r1
 80068fc:	3243      	adds	r2, #67	; 0x43
 80068fe:	9305      	str	r3, [sp, #20]
 8006900:	9003      	str	r0, [sp, #12]
 8006902:	9202      	str	r2, [sp, #8]
 8006904:	7e0a      	ldrb	r2, [r1, #24]
 8006906:	000c      	movs	r4, r1
 8006908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800690a:	2a6e      	cmp	r2, #110	; 0x6e
 800690c:	d100      	bne.n	8006910 <_printf_i+0x1c>
 800690e:	e086      	b.n	8006a1e <_printf_i+0x12a>
 8006910:	d81f      	bhi.n	8006952 <_printf_i+0x5e>
 8006912:	2a63      	cmp	r2, #99	; 0x63
 8006914:	d033      	beq.n	800697e <_printf_i+0x8a>
 8006916:	d808      	bhi.n	800692a <_printf_i+0x36>
 8006918:	2a00      	cmp	r2, #0
 800691a:	d100      	bne.n	800691e <_printf_i+0x2a>
 800691c:	e08c      	b.n	8006a38 <_printf_i+0x144>
 800691e:	2a58      	cmp	r2, #88	; 0x58
 8006920:	d04d      	beq.n	80069be <_printf_i+0xca>
 8006922:	0025      	movs	r5, r4
 8006924:	3542      	adds	r5, #66	; 0x42
 8006926:	702a      	strb	r2, [r5, #0]
 8006928:	e030      	b.n	800698c <_printf_i+0x98>
 800692a:	2a64      	cmp	r2, #100	; 0x64
 800692c:	d001      	beq.n	8006932 <_printf_i+0x3e>
 800692e:	2a69      	cmp	r2, #105	; 0x69
 8006930:	d1f7      	bne.n	8006922 <_printf_i+0x2e>
 8006932:	6819      	ldr	r1, [r3, #0]
 8006934:	6825      	ldr	r5, [r4, #0]
 8006936:	1d0a      	adds	r2, r1, #4
 8006938:	0628      	lsls	r0, r5, #24
 800693a:	d529      	bpl.n	8006990 <_printf_i+0x9c>
 800693c:	6808      	ldr	r0, [r1, #0]
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	2800      	cmp	r0, #0
 8006942:	da03      	bge.n	800694c <_printf_i+0x58>
 8006944:	232d      	movs	r3, #45	; 0x2d
 8006946:	9a02      	ldr	r2, [sp, #8]
 8006948:	4240      	negs	r0, r0
 800694a:	7013      	strb	r3, [r2, #0]
 800694c:	4e6b      	ldr	r6, [pc, #428]	; (8006afc <_printf_i+0x208>)
 800694e:	270a      	movs	r7, #10
 8006950:	e04f      	b.n	80069f2 <_printf_i+0xfe>
 8006952:	2a73      	cmp	r2, #115	; 0x73
 8006954:	d074      	beq.n	8006a40 <_printf_i+0x14c>
 8006956:	d808      	bhi.n	800696a <_printf_i+0x76>
 8006958:	2a6f      	cmp	r2, #111	; 0x6f
 800695a:	d01f      	beq.n	800699c <_printf_i+0xa8>
 800695c:	2a70      	cmp	r2, #112	; 0x70
 800695e:	d1e0      	bne.n	8006922 <_printf_i+0x2e>
 8006960:	2220      	movs	r2, #32
 8006962:	6809      	ldr	r1, [r1, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	e003      	b.n	8006972 <_printf_i+0x7e>
 800696a:	2a75      	cmp	r2, #117	; 0x75
 800696c:	d016      	beq.n	800699c <_printf_i+0xa8>
 800696e:	2a78      	cmp	r2, #120	; 0x78
 8006970:	d1d7      	bne.n	8006922 <_printf_i+0x2e>
 8006972:	0022      	movs	r2, r4
 8006974:	2178      	movs	r1, #120	; 0x78
 8006976:	3245      	adds	r2, #69	; 0x45
 8006978:	7011      	strb	r1, [r2, #0]
 800697a:	4e61      	ldr	r6, [pc, #388]	; (8006b00 <_printf_i+0x20c>)
 800697c:	e022      	b.n	80069c4 <_printf_i+0xd0>
 800697e:	0025      	movs	r5, r4
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	3542      	adds	r5, #66	; 0x42
 8006984:	1d11      	adds	r1, r2, #4
 8006986:	6019      	str	r1, [r3, #0]
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	702b      	strb	r3, [r5, #0]
 800698c:	2301      	movs	r3, #1
 800698e:	e065      	b.n	8006a5c <_printf_i+0x168>
 8006990:	6808      	ldr	r0, [r1, #0]
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	0669      	lsls	r1, r5, #25
 8006996:	d5d3      	bpl.n	8006940 <_printf_i+0x4c>
 8006998:	b200      	sxth	r0, r0
 800699a:	e7d1      	b.n	8006940 <_printf_i+0x4c>
 800699c:	6819      	ldr	r1, [r3, #0]
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	1d08      	adds	r0, r1, #4
 80069a2:	6018      	str	r0, [r3, #0]
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	062e      	lsls	r6, r5, #24
 80069a8:	d505      	bpl.n	80069b6 <_printf_i+0xc2>
 80069aa:	4e54      	ldr	r6, [pc, #336]	; (8006afc <_printf_i+0x208>)
 80069ac:	2708      	movs	r7, #8
 80069ae:	2a6f      	cmp	r2, #111	; 0x6f
 80069b0:	d01b      	beq.n	80069ea <_printf_i+0xf6>
 80069b2:	270a      	movs	r7, #10
 80069b4:	e019      	b.n	80069ea <_printf_i+0xf6>
 80069b6:	066d      	lsls	r5, r5, #25
 80069b8:	d5f7      	bpl.n	80069aa <_printf_i+0xb6>
 80069ba:	b280      	uxth	r0, r0
 80069bc:	e7f5      	b.n	80069aa <_printf_i+0xb6>
 80069be:	3145      	adds	r1, #69	; 0x45
 80069c0:	4e4e      	ldr	r6, [pc, #312]	; (8006afc <_printf_i+0x208>)
 80069c2:	700a      	strb	r2, [r1, #0]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	1d01      	adds	r1, r0, #4
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	6019      	str	r1, [r3, #0]
 80069ce:	0615      	lsls	r5, r2, #24
 80069d0:	d521      	bpl.n	8006a16 <_printf_i+0x122>
 80069d2:	07d3      	lsls	r3, r2, #31
 80069d4:	d502      	bpl.n	80069dc <_printf_i+0xe8>
 80069d6:	2320      	movs	r3, #32
 80069d8:	431a      	orrs	r2, r3
 80069da:	6022      	str	r2, [r4, #0]
 80069dc:	2710      	movs	r7, #16
 80069de:	2800      	cmp	r0, #0
 80069e0:	d103      	bne.n	80069ea <_printf_i+0xf6>
 80069e2:	2320      	movs	r3, #32
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	439a      	bics	r2, r3
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	0023      	movs	r3, r4
 80069ec:	2200      	movs	r2, #0
 80069ee:	3343      	adds	r3, #67	; 0x43
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	60a3      	str	r3, [r4, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	db58      	blt.n	8006aac <_printf_i+0x1b8>
 80069fa:	2204      	movs	r2, #4
 80069fc:	6821      	ldr	r1, [r4, #0]
 80069fe:	4391      	bics	r1, r2
 8006a00:	6021      	str	r1, [r4, #0]
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d154      	bne.n	8006ab0 <_printf_i+0x1bc>
 8006a06:	9d02      	ldr	r5, [sp, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05a      	beq.n	8006ac2 <_printf_i+0x1ce>
 8006a0c:	0025      	movs	r5, r4
 8006a0e:	7833      	ldrb	r3, [r6, #0]
 8006a10:	3542      	adds	r5, #66	; 0x42
 8006a12:	702b      	strb	r3, [r5, #0]
 8006a14:	e055      	b.n	8006ac2 <_printf_i+0x1ce>
 8006a16:	0655      	lsls	r5, r2, #25
 8006a18:	d5db      	bpl.n	80069d2 <_printf_i+0xde>
 8006a1a:	b280      	uxth	r0, r0
 8006a1c:	e7d9      	b.n	80069d2 <_printf_i+0xde>
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	680d      	ldr	r5, [r1, #0]
 8006a22:	1d10      	adds	r0, r2, #4
 8006a24:	6949      	ldr	r1, [r1, #20]
 8006a26:	6018      	str	r0, [r3, #0]
 8006a28:	6813      	ldr	r3, [r2, #0]
 8006a2a:	062e      	lsls	r6, r5, #24
 8006a2c:	d501      	bpl.n	8006a32 <_printf_i+0x13e>
 8006a2e:	6019      	str	r1, [r3, #0]
 8006a30:	e002      	b.n	8006a38 <_printf_i+0x144>
 8006a32:	066d      	lsls	r5, r5, #25
 8006a34:	d5fb      	bpl.n	8006a2e <_printf_i+0x13a>
 8006a36:	8019      	strh	r1, [r3, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9d02      	ldr	r5, [sp, #8]
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	e04f      	b.n	8006ae0 <_printf_i+0x1ec>
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	1d11      	adds	r1, r2, #4
 8006a44:	6019      	str	r1, [r3, #0]
 8006a46:	6815      	ldr	r5, [r2, #0]
 8006a48:	2100      	movs	r1, #0
 8006a4a:	6862      	ldr	r2, [r4, #4]
 8006a4c:	0028      	movs	r0, r5
 8006a4e:	f000 fef5 	bl	800783c <memchr>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d001      	beq.n	8006a5a <_printf_i+0x166>
 8006a56:	1b40      	subs	r0, r0, r5
 8006a58:	6060      	str	r0, [r4, #4]
 8006a5a:	6863      	ldr	r3, [r4, #4]
 8006a5c:	6123      	str	r3, [r4, #16]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9a02      	ldr	r2, [sp, #8]
 8006a62:	7013      	strb	r3, [r2, #0]
 8006a64:	e03c      	b.n	8006ae0 <_printf_i+0x1ec>
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	002a      	movs	r2, r5
 8006a6a:	9904      	ldr	r1, [sp, #16]
 8006a6c:	9803      	ldr	r0, [sp, #12]
 8006a6e:	9d05      	ldr	r5, [sp, #20]
 8006a70:	47a8      	blx	r5
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d03e      	beq.n	8006af4 <_printf_i+0x200>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	079b      	lsls	r3, r3, #30
 8006a7a:	d415      	bmi.n	8006aa8 <_printf_i+0x1b4>
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	68e0      	ldr	r0, [r4, #12]
 8006a80:	4298      	cmp	r0, r3
 8006a82:	da39      	bge.n	8006af8 <_printf_i+0x204>
 8006a84:	0018      	movs	r0, r3
 8006a86:	e037      	b.n	8006af8 <_printf_i+0x204>
 8006a88:	0022      	movs	r2, r4
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	3219      	adds	r2, #25
 8006a8e:	9904      	ldr	r1, [sp, #16]
 8006a90:	9803      	ldr	r0, [sp, #12]
 8006a92:	9e05      	ldr	r6, [sp, #20]
 8006a94:	47b0      	blx	r6
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	d02c      	beq.n	8006af4 <_printf_i+0x200>
 8006a9a:	3501      	adds	r5, #1
 8006a9c:	68e3      	ldr	r3, [r4, #12]
 8006a9e:	9a07      	ldr	r2, [sp, #28]
 8006aa0:	1a9b      	subs	r3, r3, r2
 8006aa2:	42ab      	cmp	r3, r5
 8006aa4:	dcf0      	bgt.n	8006a88 <_printf_i+0x194>
 8006aa6:	e7e9      	b.n	8006a7c <_printf_i+0x188>
 8006aa8:	2500      	movs	r5, #0
 8006aaa:	e7f7      	b.n	8006a9c <_printf_i+0x1a8>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d0ad      	beq.n	8006a0c <_printf_i+0x118>
 8006ab0:	9d02      	ldr	r5, [sp, #8]
 8006ab2:	0039      	movs	r1, r7
 8006ab4:	f7f9 fbc0 	bl	8000238 <__aeabi_uidivmod>
 8006ab8:	5c73      	ldrb	r3, [r6, r1]
 8006aba:	3d01      	subs	r5, #1
 8006abc:	702b      	strb	r3, [r5, #0]
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1f7      	bne.n	8006ab2 <_printf_i+0x1be>
 8006ac2:	2f08      	cmp	r7, #8
 8006ac4:	d109      	bne.n	8006ada <_printf_i+0x1e6>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	07db      	lsls	r3, r3, #31
 8006aca:	d506      	bpl.n	8006ada <_printf_i+0x1e6>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	dc02      	bgt.n	8006ada <_printf_i+0x1e6>
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	3d01      	subs	r5, #1
 8006ad8:	702b      	strb	r3, [r5, #0]
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	1b5b      	subs	r3, r3, r5
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	9b05      	ldr	r3, [sp, #20]
 8006ae2:	aa07      	add	r2, sp, #28
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	0021      	movs	r1, r4
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	9803      	ldr	r0, [sp, #12]
 8006aec:	f7ff fe94 	bl	8006818 <_printf_common>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d1b8      	bne.n	8006a66 <_printf_i+0x172>
 8006af4:	2001      	movs	r0, #1
 8006af6:	4240      	negs	r0, r0
 8006af8:	b009      	add	sp, #36	; 0x24
 8006afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afc:	08008446 	.word	0x08008446
 8006b00:	08008457 	.word	0x08008457

08006b04 <siprintf>:
 8006b04:	b40e      	push	{r1, r2, r3}
 8006b06:	b500      	push	{lr}
 8006b08:	490b      	ldr	r1, [pc, #44]	; (8006b38 <siprintf+0x34>)
 8006b0a:	b09c      	sub	sp, #112	; 0x70
 8006b0c:	ab1d      	add	r3, sp, #116	; 0x74
 8006b0e:	9002      	str	r0, [sp, #8]
 8006b10:	9006      	str	r0, [sp, #24]
 8006b12:	9107      	str	r1, [sp, #28]
 8006b14:	9104      	str	r1, [sp, #16]
 8006b16:	4809      	ldr	r0, [pc, #36]	; (8006b3c <siprintf+0x38>)
 8006b18:	4909      	ldr	r1, [pc, #36]	; (8006b40 <siprintf+0x3c>)
 8006b1a:	cb04      	ldmia	r3!, {r2}
 8006b1c:	9105      	str	r1, [sp, #20]
 8006b1e:	6800      	ldr	r0, [r0, #0]
 8006b20:	a902      	add	r1, sp, #8
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	f001 fa9c 	bl	8008060 <_svfiprintf_r>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9a02      	ldr	r2, [sp, #8]
 8006b2c:	7013      	strb	r3, [r2, #0]
 8006b2e:	b01c      	add	sp, #112	; 0x70
 8006b30:	bc08      	pop	{r3}
 8006b32:	b003      	add	sp, #12
 8006b34:	4718      	bx	r3
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	7fffffff 	.word	0x7fffffff
 8006b3c:	200000c0 	.word	0x200000c0
 8006b40:	ffff0208 	.word	0xffff0208

08006b44 <quorem>:
 8006b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b46:	6903      	ldr	r3, [r0, #16]
 8006b48:	690c      	ldr	r4, [r1, #16]
 8006b4a:	b089      	sub	sp, #36	; 0x24
 8006b4c:	0007      	movs	r7, r0
 8006b4e:	9105      	str	r1, [sp, #20]
 8006b50:	2600      	movs	r6, #0
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	db65      	blt.n	8006c22 <quorem+0xde>
 8006b56:	000b      	movs	r3, r1
 8006b58:	3c01      	subs	r4, #1
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	00a5      	lsls	r5, r4, #2
 8006b5e:	9303      	str	r3, [sp, #12]
 8006b60:	195b      	adds	r3, r3, r5
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	0003      	movs	r3, r0
 8006b66:	3314      	adds	r3, #20
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	195d      	adds	r5, r3, r5
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	6828      	ldr	r0, [r5, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1c59      	adds	r1, r3, #1
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	f7f9 fad9 	bl	800012c <__udivsi3>
 8006b7a:	9001      	str	r0, [sp, #4]
 8006b7c:	42b0      	cmp	r0, r6
 8006b7e:	d029      	beq.n	8006bd4 <quorem+0x90>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	9802      	ldr	r0, [sp, #8]
 8006b84:	469c      	mov	ip, r3
 8006b86:	9606      	str	r6, [sp, #24]
 8006b88:	4662      	mov	r2, ip
 8006b8a:	ca08      	ldmia	r2!, {r3}
 8006b8c:	4694      	mov	ip, r2
 8006b8e:	9a01      	ldr	r2, [sp, #4]
 8006b90:	b299      	uxth	r1, r3
 8006b92:	4351      	muls	r1, r2
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	4353      	muls	r3, r2
 8006b98:	1989      	adds	r1, r1, r6
 8006b9a:	0c0a      	lsrs	r2, r1, #16
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	0c1e      	lsrs	r6, r3, #16
 8006ba2:	6803      	ldr	r3, [r0, #0]
 8006ba4:	b289      	uxth	r1, r1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	9b06      	ldr	r3, [sp, #24]
 8006baa:	18d2      	adds	r2, r2, r3
 8006bac:	6803      	ldr	r3, [r0, #0]
 8006bae:	1a52      	subs	r2, r2, r1
 8006bb0:	0c19      	lsrs	r1, r3, #16
 8006bb2:	466b      	mov	r3, sp
 8006bb4:	8b9b      	ldrh	r3, [r3, #28]
 8006bb6:	1acb      	subs	r3, r1, r3
 8006bb8:	1411      	asrs	r1, r2, #16
 8006bba:	185b      	adds	r3, r3, r1
 8006bbc:	1419      	asrs	r1, r3, #16
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	9106      	str	r1, [sp, #24]
 8006bc8:	c004      	stmia	r0!, {r2}
 8006bca:	4563      	cmp	r3, ip
 8006bcc:	d2dc      	bcs.n	8006b88 <quorem+0x44>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <quorem+0xec>
 8006bd4:	9905      	ldr	r1, [sp, #20]
 8006bd6:	0038      	movs	r0, r7
 8006bd8:	f001 f858 	bl	8007c8c <__mcmp>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	db1f      	blt.n	8006c20 <quorem+0xdc>
 8006be0:	2500      	movs	r5, #0
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	9802      	ldr	r0, [sp, #8]
 8006be6:	3301      	adds	r3, #1
 8006be8:	9903      	ldr	r1, [sp, #12]
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	6802      	ldr	r2, [r0, #0]
 8006bee:	c908      	ldmia	r1!, {r3}
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	1955      	adds	r5, r2, r5
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	1aaa      	subs	r2, r5, r2
 8006bf8:	6805      	ldr	r5, [r0, #0]
 8006bfa:	0c1b      	lsrs	r3, r3, #16
 8006bfc:	0c2d      	lsrs	r5, r5, #16
 8006bfe:	1aeb      	subs	r3, r5, r3
 8006c00:	1415      	asrs	r5, r2, #16
 8006c02:	195b      	adds	r3, r3, r5
 8006c04:	141d      	asrs	r5, r3, #16
 8006c06:	b292      	uxth	r2, r2
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	c008      	stmia	r0!, {r3}
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	428b      	cmp	r3, r1
 8006c12:	d2eb      	bcs.n	8006bec <quorem+0xa8>
 8006c14:	9a02      	ldr	r2, [sp, #8]
 8006c16:	00a3      	lsls	r3, r4, #2
 8006c18:	18d3      	adds	r3, r2, r3
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	d011      	beq.n	8006c44 <quorem+0x100>
 8006c20:	9e01      	ldr	r6, [sp, #4]
 8006c22:	0030      	movs	r0, r6
 8006c24:	b009      	add	sp, #36	; 0x24
 8006c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <quorem+0xf4>
 8006c2e:	3c01      	subs	r4, #1
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	3d04      	subs	r5, #4
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	d3f7      	bcc.n	8006c28 <quorem+0xe4>
 8006c38:	613c      	str	r4, [r7, #16]
 8006c3a:	e7cb      	b.n	8006bd4 <quorem+0x90>
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	d104      	bne.n	8006c4c <quorem+0x108>
 8006c42:	3c01      	subs	r4, #1
 8006c44:	9a02      	ldr	r2, [sp, #8]
 8006c46:	3b04      	subs	r3, #4
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d3f7      	bcc.n	8006c3c <quorem+0xf8>
 8006c4c:	613c      	str	r4, [r7, #16]
 8006c4e:	e7e7      	b.n	8006c20 <quorem+0xdc>

08006c50 <_dtoa_r>:
 8006c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c52:	0016      	movs	r6, r2
 8006c54:	001f      	movs	r7, r3
 8006c56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c58:	b09b      	sub	sp, #108	; 0x6c
 8006c5a:	9002      	str	r0, [sp, #8]
 8006c5c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006c5e:	9606      	str	r6, [sp, #24]
 8006c60:	9707      	str	r7, [sp, #28]
 8006c62:	2c00      	cmp	r4, #0
 8006c64:	d108      	bne.n	8006c78 <_dtoa_r+0x28>
 8006c66:	2010      	movs	r0, #16
 8006c68:	f000 fdde 	bl	8007828 <malloc>
 8006c6c:	9b02      	ldr	r3, [sp, #8]
 8006c6e:	6258      	str	r0, [r3, #36]	; 0x24
 8006c70:	6044      	str	r4, [r0, #4]
 8006c72:	6084      	str	r4, [r0, #8]
 8006c74:	6004      	str	r4, [r0, #0]
 8006c76:	60c4      	str	r4, [r0, #12]
 8006c78:	9b02      	ldr	r3, [sp, #8]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	6819      	ldr	r1, [r3, #0]
 8006c7e:	2900      	cmp	r1, #0
 8006c80:	d00b      	beq.n	8006c9a <_dtoa_r+0x4a>
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	2301      	movs	r3, #1
 8006c86:	4093      	lsls	r3, r2
 8006c88:	604a      	str	r2, [r1, #4]
 8006c8a:	608b      	str	r3, [r1, #8]
 8006c8c:	9802      	ldr	r0, [sp, #8]
 8006c8e:	f000 fe21 	bl	80078d4 <_Bfree>
 8006c92:	2200      	movs	r2, #0
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	da20      	bge.n	8006ce0 <_dtoa_r+0x90>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	007b      	lsls	r3, r7, #1
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	9c07      	ldr	r4, [sp, #28]
 8006caa:	4bb2      	ldr	r3, [pc, #712]	; (8006f74 <_dtoa_r+0x324>)
 8006cac:	0022      	movs	r2, r4
 8006cae:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cb0:	401a      	ands	r2, r3
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d117      	bne.n	8006ce6 <_dtoa_r+0x96>
 8006cb6:	4bb0      	ldr	r3, [pc, #704]	; (8006f78 <_dtoa_r+0x328>)
 8006cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	9b06      	ldr	r3, [sp, #24]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <_dtoa_r+0x7a>
 8006cc2:	0324      	lsls	r4, r4, #12
 8006cc4:	d101      	bne.n	8006cca <_dtoa_r+0x7a>
 8006cc6:	f000 fd87 	bl	80077d8 <_dtoa_r+0xb88>
 8006cca:	4bac      	ldr	r3, [pc, #688]	; (8006f7c <_dtoa_r+0x32c>)
 8006ccc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cce:	9308      	str	r3, [sp, #32]
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d002      	beq.n	8006cda <_dtoa_r+0x8a>
 8006cd4:	4baa      	ldr	r3, [pc, #680]	; (8006f80 <_dtoa_r+0x330>)
 8006cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	9808      	ldr	r0, [sp, #32]
 8006cdc:	b01b      	add	sp, #108	; 0x6c
 8006cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	e7e0      	b.n	8006ca8 <_dtoa_r+0x58>
 8006ce6:	9e06      	ldr	r6, [sp, #24]
 8006ce8:	9f07      	ldr	r7, [sp, #28]
 8006cea:	2200      	movs	r2, #0
 8006cec:	2300      	movs	r3, #0
 8006cee:	0030      	movs	r0, r6
 8006cf0:	0039      	movs	r1, r7
 8006cf2:	f7f9 fba1 	bl	8000438 <__aeabi_dcmpeq>
 8006cf6:	1e05      	subs	r5, r0, #0
 8006cf8:	d00b      	beq.n	8006d12 <_dtoa_r+0xc2>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	4ba0      	ldr	r3, [pc, #640]	; (8006f84 <_dtoa_r+0x334>)
 8006d02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d04:	9308      	str	r3, [sp, #32]
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	d0e7      	beq.n	8006cda <_dtoa_r+0x8a>
 8006d0a:	4a9f      	ldr	r2, [pc, #636]	; (8006f88 <_dtoa_r+0x338>)
 8006d0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006d0e:	600a      	str	r2, [r1, #0]
 8006d10:	e7e3      	b.n	8006cda <_dtoa_r+0x8a>
 8006d12:	ab18      	add	r3, sp, #96	; 0x60
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	ab19      	add	r3, sp, #100	; 0x64
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	0032      	movs	r2, r6
 8006d1c:	003b      	movs	r3, r7
 8006d1e:	9802      	ldr	r0, [sp, #8]
 8006d20:	f001 f832 	bl	8007d88 <__d2b>
 8006d24:	0063      	lsls	r3, r4, #1
 8006d26:	9003      	str	r0, [sp, #12]
 8006d28:	0d5b      	lsrs	r3, r3, #21
 8006d2a:	d074      	beq.n	8006e16 <_dtoa_r+0x1c6>
 8006d2c:	033a      	lsls	r2, r7, #12
 8006d2e:	4c97      	ldr	r4, [pc, #604]	; (8006f8c <_dtoa_r+0x33c>)
 8006d30:	0b12      	lsrs	r2, r2, #12
 8006d32:	4314      	orrs	r4, r2
 8006d34:	0021      	movs	r1, r4
 8006d36:	4a96      	ldr	r2, [pc, #600]	; (8006f90 <_dtoa_r+0x340>)
 8006d38:	0030      	movs	r0, r6
 8006d3a:	9516      	str	r5, [sp, #88]	; 0x58
 8006d3c:	189e      	adds	r6, r3, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4b94      	ldr	r3, [pc, #592]	; (8006f94 <_dtoa_r+0x344>)
 8006d42:	f7fa fda9 	bl	8001898 <__aeabi_dsub>
 8006d46:	4a94      	ldr	r2, [pc, #592]	; (8006f98 <_dtoa_r+0x348>)
 8006d48:	4b94      	ldr	r3, [pc, #592]	; (8006f9c <_dtoa_r+0x34c>)
 8006d4a:	f7fa fb33 	bl	80013b4 <__aeabi_dmul>
 8006d4e:	4a94      	ldr	r2, [pc, #592]	; (8006fa0 <_dtoa_r+0x350>)
 8006d50:	4b94      	ldr	r3, [pc, #592]	; (8006fa4 <_dtoa_r+0x354>)
 8006d52:	f7f9 fc09 	bl	8000568 <__aeabi_dadd>
 8006d56:	0004      	movs	r4, r0
 8006d58:	0030      	movs	r0, r6
 8006d5a:	000d      	movs	r5, r1
 8006d5c:	f7fb f936 	bl	8001fcc <__aeabi_i2d>
 8006d60:	4a91      	ldr	r2, [pc, #580]	; (8006fa8 <_dtoa_r+0x358>)
 8006d62:	4b92      	ldr	r3, [pc, #584]	; (8006fac <_dtoa_r+0x35c>)
 8006d64:	f7fa fb26 	bl	80013b4 <__aeabi_dmul>
 8006d68:	0002      	movs	r2, r0
 8006d6a:	000b      	movs	r3, r1
 8006d6c:	0020      	movs	r0, r4
 8006d6e:	0029      	movs	r1, r5
 8006d70:	f7f9 fbfa 	bl	8000568 <__aeabi_dadd>
 8006d74:	0004      	movs	r4, r0
 8006d76:	000d      	movs	r5, r1
 8006d78:	f7fb f8f2 	bl	8001f60 <__aeabi_d2iz>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	0007      	movs	r7, r0
 8006d80:	2300      	movs	r3, #0
 8006d82:	0020      	movs	r0, r4
 8006d84:	0029      	movs	r1, r5
 8006d86:	f7f9 fb5d 	bl	8000444 <__aeabi_dcmplt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d009      	beq.n	8006da2 <_dtoa_r+0x152>
 8006d8e:	0038      	movs	r0, r7
 8006d90:	f7fb f91c 	bl	8001fcc <__aeabi_i2d>
 8006d94:	002b      	movs	r3, r5
 8006d96:	0022      	movs	r2, r4
 8006d98:	f7f9 fb4e 	bl	8000438 <__aeabi_dcmpeq>
 8006d9c:	4243      	negs	r3, r0
 8006d9e:	4158      	adcs	r0, r3
 8006da0:	1a3f      	subs	r7, r7, r0
 8006da2:	2301      	movs	r3, #1
 8006da4:	9314      	str	r3, [sp, #80]	; 0x50
 8006da6:	2f16      	cmp	r7, #22
 8006da8:	d80d      	bhi.n	8006dc6 <_dtoa_r+0x176>
 8006daa:	4981      	ldr	r1, [pc, #516]	; (8006fb0 <_dtoa_r+0x360>)
 8006dac:	00fb      	lsls	r3, r7, #3
 8006dae:	18c9      	adds	r1, r1, r3
 8006db0:	6808      	ldr	r0, [r1, #0]
 8006db2:	6849      	ldr	r1, [r1, #4]
 8006db4:	9a06      	ldr	r2, [sp, #24]
 8006db6:	9b07      	ldr	r3, [sp, #28]
 8006db8:	f7f9 fb58 	bl	800046c <__aeabi_dcmpgt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d046      	beq.n	8006e4e <_dtoa_r+0x1fe>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	3f01      	subs	r7, #1
 8006dc4:	9314      	str	r3, [sp, #80]	; 0x50
 8006dc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006dc8:	1b9e      	subs	r6, r3, r6
 8006dca:	2300      	movs	r3, #0
 8006dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dce:	0033      	movs	r3, r6
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd4:	d504      	bpl.n	8006de0 <_dtoa_r+0x190>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	1b9b      	subs	r3, r3, r6
 8006dda:	930a      	str	r3, [sp, #40]	; 0x28
 8006ddc:	2300      	movs	r3, #0
 8006dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	db36      	blt.n	8006e52 <_dtoa_r+0x202>
 8006de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de6:	9711      	str	r7, [sp, #68]	; 0x44
 8006de8:	19db      	adds	r3, r3, r7
 8006dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dec:	2300      	movs	r3, #0
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006df2:	2401      	movs	r4, #1
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d900      	bls.n	8006dfa <_dtoa_r+0x1aa>
 8006df8:	e084      	b.n	8006f04 <_dtoa_r+0x2b4>
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	dd02      	ble.n	8006e04 <_dtoa_r+0x1b4>
 8006dfe:	2400      	movs	r4, #0
 8006e00:	3b04      	subs	r3, #4
 8006e02:	9320      	str	r3, [sp, #128]	; 0x80
 8006e04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006e06:	1e98      	subs	r0, r3, #2
 8006e08:	2803      	cmp	r0, #3
 8006e0a:	d900      	bls.n	8006e0e <_dtoa_r+0x1be>
 8006e0c:	e084      	b.n	8006f18 <_dtoa_r+0x2c8>
 8006e0e:	f7f9 f983 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006e12:	7775      	.short	0x7775
 8006e14:	6a28      	.short	0x6a28
 8006e16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006e18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e1a:	189e      	adds	r6, r3, r2
 8006e1c:	4b65      	ldr	r3, [pc, #404]	; (8006fb4 <_dtoa_r+0x364>)
 8006e1e:	18f2      	adds	r2, r6, r3
 8006e20:	2a20      	cmp	r2, #32
 8006e22:	dd0f      	ble.n	8006e44 <_dtoa_r+0x1f4>
 8006e24:	2340      	movs	r3, #64	; 0x40
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	409c      	lsls	r4, r3
 8006e2a:	4b63      	ldr	r3, [pc, #396]	; (8006fb8 <_dtoa_r+0x368>)
 8006e2c:	9806      	ldr	r0, [sp, #24]
 8006e2e:	18f3      	adds	r3, r6, r3
 8006e30:	40d8      	lsrs	r0, r3
 8006e32:	4320      	orrs	r0, r4
 8006e34:	f7fb f904 	bl	8002040 <__aeabi_ui2d>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4c60      	ldr	r4, [pc, #384]	; (8006fbc <_dtoa_r+0x36c>)
 8006e3c:	3e01      	subs	r6, #1
 8006e3e:	1909      	adds	r1, r1, r4
 8006e40:	9316      	str	r3, [sp, #88]	; 0x58
 8006e42:	e77c      	b.n	8006d3e <_dtoa_r+0xee>
 8006e44:	2320      	movs	r3, #32
 8006e46:	9806      	ldr	r0, [sp, #24]
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	4098      	lsls	r0, r3
 8006e4c:	e7f2      	b.n	8006e34 <_dtoa_r+0x1e4>
 8006e4e:	9014      	str	r0, [sp, #80]	; 0x50
 8006e50:	e7b9      	b.n	8006dc6 <_dtoa_r+0x176>
 8006e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e54:	1bdb      	subs	r3, r3, r7
 8006e56:	930a      	str	r3, [sp, #40]	; 0x28
 8006e58:	427b      	negs	r3, r7
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9311      	str	r3, [sp, #68]	; 0x44
 8006e60:	e7c6      	b.n	8006df0 <_dtoa_r+0x1a0>
 8006e62:	2301      	movs	r3, #1
 8006e64:	930d      	str	r3, [sp, #52]	; 0x34
 8006e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dd59      	ble.n	8006f20 <_dtoa_r+0x2d0>
 8006e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	9a02      	ldr	r2, [sp, #8]
 8006e72:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8006e74:	2200      	movs	r2, #0
 8006e76:	606a      	str	r2, [r5, #4]
 8006e78:	3204      	adds	r2, #4
 8006e7a:	0010      	movs	r0, r2
 8006e7c:	3014      	adds	r0, #20
 8006e7e:	6869      	ldr	r1, [r5, #4]
 8006e80:	4298      	cmp	r0, r3
 8006e82:	d952      	bls.n	8006f2a <_dtoa_r+0x2da>
 8006e84:	9802      	ldr	r0, [sp, #8]
 8006e86:	f000 fced 	bl	8007864 <_Balloc>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	6028      	str	r0, [r5, #0]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	9308      	str	r3, [sp, #32]
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	2b0e      	cmp	r3, #14
 8006e98:	d900      	bls.n	8006e9c <_dtoa_r+0x24c>
 8006e9a:	e10a      	b.n	80070b2 <_dtoa_r+0x462>
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	d100      	bne.n	8006ea2 <_dtoa_r+0x252>
 8006ea0:	e107      	b.n	80070b2 <_dtoa_r+0x462>
 8006ea2:	9b06      	ldr	r3, [sp, #24]
 8006ea4:	9c07      	ldr	r4, [sp, #28]
 8006ea6:	9312      	str	r3, [sp, #72]	; 0x48
 8006ea8:	9413      	str	r4, [sp, #76]	; 0x4c
 8006eaa:	2f00      	cmp	r7, #0
 8006eac:	dc00      	bgt.n	8006eb0 <_dtoa_r+0x260>
 8006eae:	e089      	b.n	8006fc4 <_dtoa_r+0x374>
 8006eb0:	210f      	movs	r1, #15
 8006eb2:	003a      	movs	r2, r7
 8006eb4:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <_dtoa_r+0x360>)
 8006eb6:	400a      	ands	r2, r1
 8006eb8:	00d2      	lsls	r2, r2, #3
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	685e      	ldr	r6, [r3, #4]
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	113c      	asrs	r4, r7, #4
 8006ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec6:	06e3      	lsls	r3, r4, #27
 8006ec8:	d50b      	bpl.n	8006ee2 <_dtoa_r+0x292>
 8006eca:	4b3d      	ldr	r3, [pc, #244]	; (8006fc0 <_dtoa_r+0x370>)
 8006ecc:	400c      	ands	r4, r1
 8006ece:	6a1a      	ldr	r2, [r3, #32]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006ed4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ed6:	f7f9 fe63 	bl	8000ba0 <__aeabi_ddiv>
 8006eda:	2303      	movs	r3, #3
 8006edc:	9006      	str	r0, [sp, #24]
 8006ede:	9107      	str	r1, [sp, #28]
 8006ee0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e03a      	b.n	8006f5c <_dtoa_r+0x30c>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8006eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dcbb      	bgt.n	8006e70 <_dtoa_r+0x220>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e7b9      	b.n	8006e70 <_dtoa_r+0x220>
 8006efc:	2300      	movs	r3, #0
 8006efe:	e7b1      	b.n	8006e64 <_dtoa_r+0x214>
 8006f00:	2300      	movs	r3, #0
 8006f02:	e7f1      	b.n	8006ee8 <_dtoa_r+0x298>
 8006f04:	2300      	movs	r3, #0
 8006f06:	940d      	str	r4, [sp, #52]	; 0x34
 8006f08:	9320      	str	r3, [sp, #128]	; 0x80
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f10:	9309      	str	r3, [sp, #36]	; 0x24
 8006f12:	3313      	adds	r3, #19
 8006f14:	9221      	str	r2, [sp, #132]	; 0x84
 8006f16:	e7ab      	b.n	8006e70 <_dtoa_r+0x220>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f1c:	3b02      	subs	r3, #2
 8006f1e:	e7f5      	b.n	8006f0c <_dtoa_r+0x2bc>
 8006f20:	2301      	movs	r3, #1
 8006f22:	930c      	str	r3, [sp, #48]	; 0x30
 8006f24:	9309      	str	r3, [sp, #36]	; 0x24
 8006f26:	001a      	movs	r2, r3
 8006f28:	e7f4      	b.n	8006f14 <_dtoa_r+0x2c4>
 8006f2a:	3101      	adds	r1, #1
 8006f2c:	6069      	str	r1, [r5, #4]
 8006f2e:	0052      	lsls	r2, r2, #1
 8006f30:	e7a3      	b.n	8006e7a <_dtoa_r+0x22a>
 8006f32:	2301      	movs	r3, #1
 8006f34:	421c      	tst	r4, r3
 8006f36:	d00e      	beq.n	8006f56 <_dtoa_r+0x306>
 8006f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f3a:	4a21      	ldr	r2, [pc, #132]	; (8006fc0 <_dtoa_r+0x370>)
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	930e      	str	r3, [sp, #56]	; 0x38
 8006f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f42:	0028      	movs	r0, r5
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	0031      	movs	r1, r6
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f7fa fa31 	bl	80013b4 <__aeabi_dmul>
 8006f52:	0005      	movs	r5, r0
 8006f54:	000e      	movs	r6, r1
 8006f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f58:	1064      	asrs	r4, r4, #1
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	d1e7      	bne.n	8006f32 <_dtoa_r+0x2e2>
 8006f62:	9806      	ldr	r0, [sp, #24]
 8006f64:	9907      	ldr	r1, [sp, #28]
 8006f66:	002a      	movs	r2, r5
 8006f68:	0033      	movs	r3, r6
 8006f6a:	f7f9 fe19 	bl	8000ba0 <__aeabi_ddiv>
 8006f6e:	9006      	str	r0, [sp, #24]
 8006f70:	9107      	str	r1, [sp, #28]
 8006f72:	e042      	b.n	8006ffa <_dtoa_r+0x3aa>
 8006f74:	7ff00000 	.word	0x7ff00000
 8006f78:	0000270f 	.word	0x0000270f
 8006f7c:	08008471 	.word	0x08008471
 8006f80:	08008474 	.word	0x08008474
 8006f84:	08008444 	.word	0x08008444
 8006f88:	08008445 	.word	0x08008445
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	fffffc01 	.word	0xfffffc01
 8006f94:	3ff80000 	.word	0x3ff80000
 8006f98:	636f4361 	.word	0x636f4361
 8006f9c:	3fd287a7 	.word	0x3fd287a7
 8006fa0:	8b60c8b3 	.word	0x8b60c8b3
 8006fa4:	3fc68a28 	.word	0x3fc68a28
 8006fa8:	509f79fb 	.word	0x509f79fb
 8006fac:	3fd34413 	.word	0x3fd34413
 8006fb0:	080084a0 	.word	0x080084a0
 8006fb4:	00000432 	.word	0x00000432
 8006fb8:	00000412 	.word	0x00000412
 8006fbc:	fe100000 	.word	0xfe100000
 8006fc0:	08008478 	.word	0x08008478
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc8:	2f00      	cmp	r7, #0
 8006fca:	d016      	beq.n	8006ffa <_dtoa_r+0x3aa>
 8006fcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006fce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006fd0:	427c      	negs	r4, r7
 8006fd2:	330d      	adds	r3, #13
 8006fd4:	4023      	ands	r3, r4
 8006fd6:	4ace      	ldr	r2, [pc, #824]	; (8007310 <_dtoa_r+0x6c0>)
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	18d3      	adds	r3, r2, r3
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f7fa f9e8 	bl	80013b4 <__aeabi_dmul>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2601      	movs	r6, #1
 8006fe8:	001d      	movs	r5, r3
 8006fea:	9006      	str	r0, [sp, #24]
 8006fec:	9107      	str	r1, [sp, #28]
 8006fee:	1124      	asrs	r4, r4, #4
 8006ff0:	2c00      	cmp	r4, #0
 8006ff2:	d000      	beq.n	8006ff6 <_dtoa_r+0x3a6>
 8006ff4:	e08c      	b.n	8007110 <_dtoa_r+0x4c0>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1b9      	bne.n	8006f6e <_dtoa_r+0x31e>
 8006ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d100      	bne.n	8007002 <_dtoa_r+0x3b2>
 8007000:	e096      	b.n	8007130 <_dtoa_r+0x4e0>
 8007002:	9c06      	ldr	r4, [sp, #24]
 8007004:	9d07      	ldr	r5, [sp, #28]
 8007006:	2200      	movs	r2, #0
 8007008:	4bc2      	ldr	r3, [pc, #776]	; (8007314 <_dtoa_r+0x6c4>)
 800700a:	0020      	movs	r0, r4
 800700c:	0029      	movs	r1, r5
 800700e:	f7f9 fa19 	bl	8000444 <__aeabi_dcmplt>
 8007012:	2800      	cmp	r0, #0
 8007014:	d100      	bne.n	8007018 <_dtoa_r+0x3c8>
 8007016:	e08b      	b.n	8007130 <_dtoa_r+0x4e0>
 8007018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d100      	bne.n	8007020 <_dtoa_r+0x3d0>
 800701e:	e087      	b.n	8007130 <_dtoa_r+0x4e0>
 8007020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007022:	2b00      	cmp	r3, #0
 8007024:	dd41      	ble.n	80070aa <_dtoa_r+0x45a>
 8007026:	4bbc      	ldr	r3, [pc, #752]	; (8007318 <_dtoa_r+0x6c8>)
 8007028:	2200      	movs	r2, #0
 800702a:	0020      	movs	r0, r4
 800702c:	0029      	movs	r1, r5
 800702e:	f7fa f9c1 	bl	80013b4 <__aeabi_dmul>
 8007032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007034:	9006      	str	r0, [sp, #24]
 8007036:	9107      	str	r1, [sp, #28]
 8007038:	3301      	adds	r3, #1
 800703a:	930e      	str	r3, [sp, #56]	; 0x38
 800703c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800703e:	1e7e      	subs	r6, r7, #1
 8007040:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007042:	9310      	str	r3, [sp, #64]	; 0x40
 8007044:	f7fa ffc2 	bl	8001fcc <__aeabi_i2d>
 8007048:	9a06      	ldr	r2, [sp, #24]
 800704a:	9b07      	ldr	r3, [sp, #28]
 800704c:	f7fa f9b2 	bl	80013b4 <__aeabi_dmul>
 8007050:	2200      	movs	r2, #0
 8007052:	4bb2      	ldr	r3, [pc, #712]	; (800731c <_dtoa_r+0x6cc>)
 8007054:	f7f9 fa88 	bl	8000568 <__aeabi_dadd>
 8007058:	4ab1      	ldr	r2, [pc, #708]	; (8007320 <_dtoa_r+0x6d0>)
 800705a:	900e      	str	r0, [sp, #56]	; 0x38
 800705c:	910f      	str	r1, [sp, #60]	; 0x3c
 800705e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007060:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007062:	4694      	mov	ip, r2
 8007064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007066:	4463      	add	r3, ip
 8007068:	9315      	str	r3, [sp, #84]	; 0x54
 800706a:	001d      	movs	r5, r3
 800706c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d161      	bne.n	8007136 <_dtoa_r+0x4e6>
 8007072:	9806      	ldr	r0, [sp, #24]
 8007074:	9907      	ldr	r1, [sp, #28]
 8007076:	2200      	movs	r2, #0
 8007078:	4baa      	ldr	r3, [pc, #680]	; (8007324 <_dtoa_r+0x6d4>)
 800707a:	f7fa fc0d 	bl	8001898 <__aeabi_dsub>
 800707e:	0022      	movs	r2, r4
 8007080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007082:	9006      	str	r0, [sp, #24]
 8007084:	9107      	str	r1, [sp, #28]
 8007086:	f7f9 f9f1 	bl	800046c <__aeabi_dcmpgt>
 800708a:	2800      	cmp	r0, #0
 800708c:	d000      	beq.n	8007090 <_dtoa_r+0x440>
 800708e:	e2a8      	b.n	80075e2 <_dtoa_r+0x992>
 8007090:	48a5      	ldr	r0, [pc, #660]	; (8007328 <_dtoa_r+0x6d8>)
 8007092:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007094:	4684      	mov	ip, r0
 8007096:	4461      	add	r1, ip
 8007098:	000b      	movs	r3, r1
 800709a:	9806      	ldr	r0, [sp, #24]
 800709c:	9907      	ldr	r1, [sp, #28]
 800709e:	0022      	movs	r2, r4
 80070a0:	f7f9 f9d0 	bl	8000444 <__aeabi_dcmplt>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d000      	beq.n	80070aa <_dtoa_r+0x45a>
 80070a8:	e295      	b.n	80075d6 <_dtoa_r+0x986>
 80070aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80070ae:	9306      	str	r3, [sp, #24]
 80070b0:	9407      	str	r4, [sp, #28]
 80070b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da00      	bge.n	80070ba <_dtoa_r+0x46a>
 80070b8:	e15c      	b.n	8007374 <_dtoa_r+0x724>
 80070ba:	2f0e      	cmp	r7, #14
 80070bc:	dd00      	ble.n	80070c0 <_dtoa_r+0x470>
 80070be:	e159      	b.n	8007374 <_dtoa_r+0x724>
 80070c0:	4b93      	ldr	r3, [pc, #588]	; (8007310 <_dtoa_r+0x6c0>)
 80070c2:	00fa      	lsls	r2, r7, #3
 80070c4:	189b      	adds	r3, r3, r2
 80070c6:	685c      	ldr	r4, [r3, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9405      	str	r4, [sp, #20]
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db00      	blt.n	80070d6 <_dtoa_r+0x486>
 80070d4:	e0d8      	b.n	8007288 <_dtoa_r+0x638>
 80070d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dd00      	ble.n	80070de <_dtoa_r+0x48e>
 80070dc:	e0d4      	b.n	8007288 <_dtoa_r+0x638>
 80070de:	d000      	beq.n	80070e2 <_dtoa_r+0x492>
 80070e0:	e27d      	b.n	80075de <_dtoa_r+0x98e>
 80070e2:	9804      	ldr	r0, [sp, #16]
 80070e4:	9905      	ldr	r1, [sp, #20]
 80070e6:	2200      	movs	r2, #0
 80070e8:	4b8e      	ldr	r3, [pc, #568]	; (8007324 <_dtoa_r+0x6d4>)
 80070ea:	f7fa f963 	bl	80013b4 <__aeabi_dmul>
 80070ee:	9a06      	ldr	r2, [sp, #24]
 80070f0:	9b07      	ldr	r3, [sp, #28]
 80070f2:	f7f9 f9c5 	bl	8000480 <__aeabi_dcmpge>
 80070f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	001e      	movs	r6, r3
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d000      	beq.n	8007102 <_dtoa_r+0x4b2>
 8007100:	e24f      	b.n	80075a2 <_dtoa_r+0x952>
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	9a08      	ldr	r2, [sp, #32]
 8007106:	1c5d      	adds	r5, r3, #1
 8007108:	2331      	movs	r3, #49	; 0x31
 800710a:	3701      	adds	r7, #1
 800710c:	7013      	strb	r3, [r2, #0]
 800710e:	e24b      	b.n	80075a8 <_dtoa_r+0x958>
 8007110:	4234      	tst	r4, r6
 8007112:	d00a      	beq.n	800712a <_dtoa_r+0x4da>
 8007114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007116:	4a85      	ldr	r2, [pc, #532]	; (800732c <_dtoa_r+0x6dc>)
 8007118:	3301      	adds	r3, #1
 800711a:	930e      	str	r3, [sp, #56]	; 0x38
 800711c:	00eb      	lsls	r3, r5, #3
 800711e:	189b      	adds	r3, r3, r2
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f7fa f946 	bl	80013b4 <__aeabi_dmul>
 8007128:	0033      	movs	r3, r6
 800712a:	1064      	asrs	r4, r4, #1
 800712c:	3501      	adds	r5, #1
 800712e:	e75f      	b.n	8006ff0 <_dtoa_r+0x3a0>
 8007130:	003e      	movs	r6, r7
 8007132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007134:	e784      	b.n	8007040 <_dtoa_r+0x3f0>
 8007136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007138:	990d      	ldr	r1, [sp, #52]	; 0x34
 800713a:	1e5a      	subs	r2, r3, #1
 800713c:	4b74      	ldr	r3, [pc, #464]	; (8007310 <_dtoa_r+0x6c0>)
 800713e:	00d2      	lsls	r2, r2, #3
 8007140:	189b      	adds	r3, r3, r2
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2900      	cmp	r1, #0
 8007148:	d049      	beq.n	80071de <_dtoa_r+0x58e>
 800714a:	2000      	movs	r0, #0
 800714c:	4978      	ldr	r1, [pc, #480]	; (8007330 <_dtoa_r+0x6e0>)
 800714e:	f7f9 fd27 	bl	8000ba0 <__aeabi_ddiv>
 8007152:	002b      	movs	r3, r5
 8007154:	0022      	movs	r2, r4
 8007156:	f7fa fb9f 	bl	8001898 <__aeabi_dsub>
 800715a:	9b08      	ldr	r3, [sp, #32]
 800715c:	900e      	str	r0, [sp, #56]	; 0x38
 800715e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007160:	9315      	str	r3, [sp, #84]	; 0x54
 8007162:	9806      	ldr	r0, [sp, #24]
 8007164:	9907      	ldr	r1, [sp, #28]
 8007166:	f7fa fefb 	bl	8001f60 <__aeabi_d2iz>
 800716a:	0004      	movs	r4, r0
 800716c:	f7fa ff2e 	bl	8001fcc <__aeabi_i2d>
 8007170:	0002      	movs	r2, r0
 8007172:	000b      	movs	r3, r1
 8007174:	9806      	ldr	r0, [sp, #24]
 8007176:	9907      	ldr	r1, [sp, #28]
 8007178:	f7fa fb8e 	bl	8001898 <__aeabi_dsub>
 800717c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800717e:	3430      	adds	r4, #48	; 0x30
 8007180:	1c5d      	adds	r5, r3, #1
 8007182:	701c      	strb	r4, [r3, #0]
 8007184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007188:	9006      	str	r0, [sp, #24]
 800718a:	9107      	str	r1, [sp, #28]
 800718c:	f7f9 f95a 	bl	8000444 <__aeabi_dcmplt>
 8007190:	2800      	cmp	r0, #0
 8007192:	d16c      	bne.n	800726e <_dtoa_r+0x61e>
 8007194:	9a06      	ldr	r2, [sp, #24]
 8007196:	9b07      	ldr	r3, [sp, #28]
 8007198:	2000      	movs	r0, #0
 800719a:	495e      	ldr	r1, [pc, #376]	; (8007314 <_dtoa_r+0x6c4>)
 800719c:	f7fa fb7c 	bl	8001898 <__aeabi_dsub>
 80071a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071a4:	f7f9 f94e 	bl	8000444 <__aeabi_dcmplt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d000      	beq.n	80071ae <_dtoa_r+0x55e>
 80071ac:	e0c3      	b.n	8007336 <_dtoa_r+0x6e6>
 80071ae:	9b08      	ldr	r3, [sp, #32]
 80071b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071b2:	1aeb      	subs	r3, r5, r3
 80071b4:	429a      	cmp	r2, r3
 80071b6:	dc00      	bgt.n	80071ba <_dtoa_r+0x56a>
 80071b8:	e777      	b.n	80070aa <_dtoa_r+0x45a>
 80071ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071be:	2200      	movs	r2, #0
 80071c0:	4b55      	ldr	r3, [pc, #340]	; (8007318 <_dtoa_r+0x6c8>)
 80071c2:	f7fa f8f7 	bl	80013b4 <__aeabi_dmul>
 80071c6:	2200      	movs	r2, #0
 80071c8:	900e      	str	r0, [sp, #56]	; 0x38
 80071ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80071cc:	9806      	ldr	r0, [sp, #24]
 80071ce:	9907      	ldr	r1, [sp, #28]
 80071d0:	4b51      	ldr	r3, [pc, #324]	; (8007318 <_dtoa_r+0x6c8>)
 80071d2:	f7fa f8ef 	bl	80013b4 <__aeabi_dmul>
 80071d6:	9515      	str	r5, [sp, #84]	; 0x54
 80071d8:	9006      	str	r0, [sp, #24]
 80071da:	9107      	str	r1, [sp, #28]
 80071dc:	e7c1      	b.n	8007162 <_dtoa_r+0x512>
 80071de:	0020      	movs	r0, r4
 80071e0:	0029      	movs	r1, r5
 80071e2:	f7fa f8e7 	bl	80013b4 <__aeabi_dmul>
 80071e6:	9c08      	ldr	r4, [sp, #32]
 80071e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071ea:	0023      	movs	r3, r4
 80071ec:	4694      	mov	ip, r2
 80071ee:	900e      	str	r0, [sp, #56]	; 0x38
 80071f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80071f2:	4463      	add	r3, ip
 80071f4:	9315      	str	r3, [sp, #84]	; 0x54
 80071f6:	9806      	ldr	r0, [sp, #24]
 80071f8:	9907      	ldr	r1, [sp, #28]
 80071fa:	f7fa feb1 	bl	8001f60 <__aeabi_d2iz>
 80071fe:	0005      	movs	r5, r0
 8007200:	f7fa fee4 	bl	8001fcc <__aeabi_i2d>
 8007204:	000b      	movs	r3, r1
 8007206:	0002      	movs	r2, r0
 8007208:	9806      	ldr	r0, [sp, #24]
 800720a:	9907      	ldr	r1, [sp, #28]
 800720c:	f7fa fb44 	bl	8001898 <__aeabi_dsub>
 8007210:	3530      	adds	r5, #48	; 0x30
 8007212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007214:	7025      	strb	r5, [r4, #0]
 8007216:	3401      	adds	r4, #1
 8007218:	9006      	str	r0, [sp, #24]
 800721a:	9107      	str	r1, [sp, #28]
 800721c:	42a3      	cmp	r3, r4
 800721e:	d12a      	bne.n	8007276 <_dtoa_r+0x626>
 8007220:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007222:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007224:	9a08      	ldr	r2, [sp, #32]
 8007226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007228:	4694      	mov	ip, r2
 800722a:	4463      	add	r3, ip
 800722c:	2200      	movs	r2, #0
 800722e:	001d      	movs	r5, r3
 8007230:	4b3f      	ldr	r3, [pc, #252]	; (8007330 <_dtoa_r+0x6e0>)
 8007232:	f7f9 f999 	bl	8000568 <__aeabi_dadd>
 8007236:	0002      	movs	r2, r0
 8007238:	000b      	movs	r3, r1
 800723a:	9806      	ldr	r0, [sp, #24]
 800723c:	9907      	ldr	r1, [sp, #28]
 800723e:	f7f9 f915 	bl	800046c <__aeabi_dcmpgt>
 8007242:	2800      	cmp	r0, #0
 8007244:	d000      	beq.n	8007248 <_dtoa_r+0x5f8>
 8007246:	e076      	b.n	8007336 <_dtoa_r+0x6e6>
 8007248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800724a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800724c:	2000      	movs	r0, #0
 800724e:	4938      	ldr	r1, [pc, #224]	; (8007330 <_dtoa_r+0x6e0>)
 8007250:	f7fa fb22 	bl	8001898 <__aeabi_dsub>
 8007254:	0002      	movs	r2, r0
 8007256:	000b      	movs	r3, r1
 8007258:	9806      	ldr	r0, [sp, #24]
 800725a:	9907      	ldr	r1, [sp, #28]
 800725c:	f7f9 f8f2 	bl	8000444 <__aeabi_dcmplt>
 8007260:	2800      	cmp	r0, #0
 8007262:	d100      	bne.n	8007266 <_dtoa_r+0x616>
 8007264:	e721      	b.n	80070aa <_dtoa_r+0x45a>
 8007266:	1e6b      	subs	r3, r5, #1
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	2a30      	cmp	r2, #48	; 0x30
 800726c:	d001      	beq.n	8007272 <_dtoa_r+0x622>
 800726e:	0037      	movs	r7, r6
 8007270:	e03f      	b.n	80072f2 <_dtoa_r+0x6a2>
 8007272:	001d      	movs	r5, r3
 8007274:	e7f7      	b.n	8007266 <_dtoa_r+0x616>
 8007276:	9806      	ldr	r0, [sp, #24]
 8007278:	9907      	ldr	r1, [sp, #28]
 800727a:	2200      	movs	r2, #0
 800727c:	4b26      	ldr	r3, [pc, #152]	; (8007318 <_dtoa_r+0x6c8>)
 800727e:	f7fa f899 	bl	80013b4 <__aeabi_dmul>
 8007282:	9006      	str	r0, [sp, #24]
 8007284:	9107      	str	r1, [sp, #28]
 8007286:	e7b6      	b.n	80071f6 <_dtoa_r+0x5a6>
 8007288:	9e08      	ldr	r6, [sp, #32]
 800728a:	9a04      	ldr	r2, [sp, #16]
 800728c:	9b05      	ldr	r3, [sp, #20]
 800728e:	9806      	ldr	r0, [sp, #24]
 8007290:	9907      	ldr	r1, [sp, #28]
 8007292:	f7f9 fc85 	bl	8000ba0 <__aeabi_ddiv>
 8007296:	f7fa fe63 	bl	8001f60 <__aeabi_d2iz>
 800729a:	0004      	movs	r4, r0
 800729c:	f7fa fe96 	bl	8001fcc <__aeabi_i2d>
 80072a0:	9a04      	ldr	r2, [sp, #16]
 80072a2:	9b05      	ldr	r3, [sp, #20]
 80072a4:	f7fa f886 	bl	80013b4 <__aeabi_dmul>
 80072a8:	0002      	movs	r2, r0
 80072aa:	000b      	movs	r3, r1
 80072ac:	9806      	ldr	r0, [sp, #24]
 80072ae:	9907      	ldr	r1, [sp, #28]
 80072b0:	f7fa faf2 	bl	8001898 <__aeabi_dsub>
 80072b4:	0023      	movs	r3, r4
 80072b6:	3330      	adds	r3, #48	; 0x30
 80072b8:	7033      	strb	r3, [r6, #0]
 80072ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	1c75      	adds	r5, r6, #1
 80072c0:	1aeb      	subs	r3, r5, r3
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d148      	bne.n	8007358 <_dtoa_r+0x708>
 80072c6:	0002      	movs	r2, r0
 80072c8:	000b      	movs	r3, r1
 80072ca:	f7f9 f94d 	bl	8000568 <__aeabi_dadd>
 80072ce:	9a04      	ldr	r2, [sp, #16]
 80072d0:	9b05      	ldr	r3, [sp, #20]
 80072d2:	9006      	str	r0, [sp, #24]
 80072d4:	9107      	str	r1, [sp, #28]
 80072d6:	f7f9 f8c9 	bl	800046c <__aeabi_dcmpgt>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d12a      	bne.n	8007334 <_dtoa_r+0x6e4>
 80072de:	9a04      	ldr	r2, [sp, #16]
 80072e0:	9b05      	ldr	r3, [sp, #20]
 80072e2:	9806      	ldr	r0, [sp, #24]
 80072e4:	9907      	ldr	r1, [sp, #28]
 80072e6:	f7f9 f8a7 	bl	8000438 <__aeabi_dcmpeq>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d001      	beq.n	80072f2 <_dtoa_r+0x6a2>
 80072ee:	07e3      	lsls	r3, r4, #31
 80072f0:	d420      	bmi.n	8007334 <_dtoa_r+0x6e4>
 80072f2:	9903      	ldr	r1, [sp, #12]
 80072f4:	9802      	ldr	r0, [sp, #8]
 80072f6:	f000 faed 	bl	80078d4 <_Bfree>
 80072fa:	2300      	movs	r3, #0
 80072fc:	702b      	strb	r3, [r5, #0]
 80072fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007300:	3701      	adds	r7, #1
 8007302:	601f      	str	r7, [r3, #0]
 8007304:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007306:	2b00      	cmp	r3, #0
 8007308:	d100      	bne.n	800730c <_dtoa_r+0x6bc>
 800730a:	e4e6      	b.n	8006cda <_dtoa_r+0x8a>
 800730c:	601d      	str	r5, [r3, #0]
 800730e:	e4e4      	b.n	8006cda <_dtoa_r+0x8a>
 8007310:	080084a0 	.word	0x080084a0
 8007314:	3ff00000 	.word	0x3ff00000
 8007318:	40240000 	.word	0x40240000
 800731c:	401c0000 	.word	0x401c0000
 8007320:	fcc00000 	.word	0xfcc00000
 8007324:	40140000 	.word	0x40140000
 8007328:	7cc00000 	.word	0x7cc00000
 800732c:	08008478 	.word	0x08008478
 8007330:	3fe00000 	.word	0x3fe00000
 8007334:	003e      	movs	r6, r7
 8007336:	1e6b      	subs	r3, r5, #1
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	2a39      	cmp	r2, #57	; 0x39
 800733c:	d106      	bne.n	800734c <_dtoa_r+0x6fc>
 800733e:	9a08      	ldr	r2, [sp, #32]
 8007340:	429a      	cmp	r2, r3
 8007342:	d107      	bne.n	8007354 <_dtoa_r+0x704>
 8007344:	2330      	movs	r3, #48	; 0x30
 8007346:	7013      	strb	r3, [r2, #0]
 8007348:	0013      	movs	r3, r2
 800734a:	3601      	adds	r6, #1
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	3201      	adds	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e78c      	b.n	800726e <_dtoa_r+0x61e>
 8007354:	001d      	movs	r5, r3
 8007356:	e7ee      	b.n	8007336 <_dtoa_r+0x6e6>
 8007358:	2200      	movs	r2, #0
 800735a:	4ba4      	ldr	r3, [pc, #656]	; (80075ec <_dtoa_r+0x99c>)
 800735c:	f7fa f82a 	bl	80013b4 <__aeabi_dmul>
 8007360:	2200      	movs	r2, #0
 8007362:	2300      	movs	r3, #0
 8007364:	9006      	str	r0, [sp, #24]
 8007366:	9107      	str	r1, [sp, #28]
 8007368:	002e      	movs	r6, r5
 800736a:	f7f9 f865 	bl	8000438 <__aeabi_dcmpeq>
 800736e:	2800      	cmp	r0, #0
 8007370:	d08b      	beq.n	800728a <_dtoa_r+0x63a>
 8007372:	e7be      	b.n	80072f2 <_dtoa_r+0x6a2>
 8007374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007376:	2a00      	cmp	r2, #0
 8007378:	d100      	bne.n	800737c <_dtoa_r+0x72c>
 800737a:	e0da      	b.n	8007532 <_dtoa_r+0x8e2>
 800737c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800737e:	2a01      	cmp	r2, #1
 8007380:	dd00      	ble.n	8007384 <_dtoa_r+0x734>
 8007382:	e0bd      	b.n	8007500 <_dtoa_r+0x8b0>
 8007384:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007386:	2a00      	cmp	r2, #0
 8007388:	d100      	bne.n	800738c <_dtoa_r+0x73c>
 800738a:	e0b5      	b.n	80074f8 <_dtoa_r+0x8a8>
 800738c:	4a98      	ldr	r2, [pc, #608]	; (80075f0 <_dtoa_r+0x9a0>)
 800738e:	189b      	adds	r3, r3, r2
 8007390:	9d04      	ldr	r5, [sp, #16]
 8007392:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007396:	2101      	movs	r1, #1
 8007398:	18d2      	adds	r2, r2, r3
 800739a:	920a      	str	r2, [sp, #40]	; 0x28
 800739c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800739e:	9802      	ldr	r0, [sp, #8]
 80073a0:	18d3      	adds	r3, r2, r3
 80073a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a4:	f000 fb36 	bl	8007a14 <__i2b>
 80073a8:	0006      	movs	r6, r0
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	dd0e      	ble.n	80073cc <_dtoa_r+0x77c>
 80073ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dd0b      	ble.n	80073cc <_dtoa_r+0x77c>
 80073b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073b6:	0023      	movs	r3, r4
 80073b8:	4294      	cmp	r4, r2
 80073ba:	dd00      	ble.n	80073be <_dtoa_r+0x76e>
 80073bc:	0013      	movs	r3, r2
 80073be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c0:	1ae4      	subs	r4, r4, r3
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	920a      	str	r2, [sp, #40]	; 0x28
 80073c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01f      	beq.n	8007412 <_dtoa_r+0x7c2>
 80073d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d100      	bne.n	80073da <_dtoa_r+0x78a>
 80073d8:	e0af      	b.n	800753a <_dtoa_r+0x8ea>
 80073da:	2d00      	cmp	r5, #0
 80073dc:	d011      	beq.n	8007402 <_dtoa_r+0x7b2>
 80073de:	0031      	movs	r1, r6
 80073e0:	002a      	movs	r2, r5
 80073e2:	9802      	ldr	r0, [sp, #8]
 80073e4:	f000 fbae 	bl	8007b44 <__pow5mult>
 80073e8:	9a03      	ldr	r2, [sp, #12]
 80073ea:	0001      	movs	r1, r0
 80073ec:	0006      	movs	r6, r0
 80073ee:	9802      	ldr	r0, [sp, #8]
 80073f0:	f000 fb19 	bl	8007a26 <__multiply>
 80073f4:	9903      	ldr	r1, [sp, #12]
 80073f6:	9010      	str	r0, [sp, #64]	; 0x40
 80073f8:	9802      	ldr	r0, [sp, #8]
 80073fa:	f000 fa6b 	bl	80078d4 <_Bfree>
 80073fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007400:	9303      	str	r3, [sp, #12]
 8007402:	9b04      	ldr	r3, [sp, #16]
 8007404:	1b5a      	subs	r2, r3, r5
 8007406:	d004      	beq.n	8007412 <_dtoa_r+0x7c2>
 8007408:	9903      	ldr	r1, [sp, #12]
 800740a:	9802      	ldr	r0, [sp, #8]
 800740c:	f000 fb9a 	bl	8007b44 <__pow5mult>
 8007410:	9003      	str	r0, [sp, #12]
 8007412:	2101      	movs	r1, #1
 8007414:	9802      	ldr	r0, [sp, #8]
 8007416:	f000 fafd 	bl	8007a14 <__i2b>
 800741a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800741c:	9004      	str	r0, [sp, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d100      	bne.n	8007424 <_dtoa_r+0x7d4>
 8007422:	e1e3      	b.n	80077ec <_dtoa_r+0xb9c>
 8007424:	001a      	movs	r2, r3
 8007426:	0001      	movs	r1, r0
 8007428:	9802      	ldr	r0, [sp, #8]
 800742a:	f000 fb8b 	bl	8007b44 <__pow5mult>
 800742e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007430:	9004      	str	r0, [sp, #16]
 8007432:	2b01      	cmp	r3, #1
 8007434:	dd00      	ble.n	8007438 <_dtoa_r+0x7e8>
 8007436:	e082      	b.n	800753e <_dtoa_r+0x8ee>
 8007438:	2500      	movs	r5, #0
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	42ab      	cmp	r3, r5
 800743e:	d10e      	bne.n	800745e <_dtoa_r+0x80e>
 8007440:	9b07      	ldr	r3, [sp, #28]
 8007442:	031b      	lsls	r3, r3, #12
 8007444:	42ab      	cmp	r3, r5
 8007446:	d10a      	bne.n	800745e <_dtoa_r+0x80e>
 8007448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800744a:	9a07      	ldr	r2, [sp, #28]
 800744c:	4213      	tst	r3, r2
 800744e:	d006      	beq.n	800745e <_dtoa_r+0x80e>
 8007450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007452:	3501      	adds	r5, #1
 8007454:	3301      	adds	r3, #1
 8007456:	930a      	str	r3, [sp, #40]	; 0x28
 8007458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745a:	3301      	adds	r3, #1
 800745c:	930b      	str	r3, [sp, #44]	; 0x2c
 800745e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007460:	2001      	movs	r0, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d16c      	bne.n	8007540 <_dtoa_r+0x8f0>
 8007466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007468:	1818      	adds	r0, r3, r0
 800746a:	231f      	movs	r3, #31
 800746c:	4018      	ands	r0, r3
 800746e:	d07e      	beq.n	800756e <_dtoa_r+0x91e>
 8007470:	3301      	adds	r3, #1
 8007472:	1a1b      	subs	r3, r3, r0
 8007474:	2b04      	cmp	r3, #4
 8007476:	dd70      	ble.n	800755a <_dtoa_r+0x90a>
 8007478:	231c      	movs	r3, #28
 800747a:	1a18      	subs	r0, r3, r0
 800747c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747e:	1824      	adds	r4, r4, r0
 8007480:	181b      	adds	r3, r3, r0
 8007482:	930a      	str	r3, [sp, #40]	; 0x28
 8007484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007486:	181b      	adds	r3, r3, r0
 8007488:	930b      	str	r3, [sp, #44]	; 0x2c
 800748a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd05      	ble.n	800749c <_dtoa_r+0x84c>
 8007490:	001a      	movs	r2, r3
 8007492:	9903      	ldr	r1, [sp, #12]
 8007494:	9802      	ldr	r0, [sp, #8]
 8007496:	f000 fba7 	bl	8007be8 <__lshift>
 800749a:	9003      	str	r0, [sp, #12]
 800749c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd05      	ble.n	80074ae <_dtoa_r+0x85e>
 80074a2:	001a      	movs	r2, r3
 80074a4:	9904      	ldr	r1, [sp, #16]
 80074a6:	9802      	ldr	r0, [sp, #8]
 80074a8:	f000 fb9e 	bl	8007be8 <__lshift>
 80074ac:	9004      	str	r0, [sp, #16]
 80074ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05e      	beq.n	8007572 <_dtoa_r+0x922>
 80074b4:	9904      	ldr	r1, [sp, #16]
 80074b6:	9803      	ldr	r0, [sp, #12]
 80074b8:	f000 fbe8 	bl	8007c8c <__mcmp>
 80074bc:	2800      	cmp	r0, #0
 80074be:	da58      	bge.n	8007572 <_dtoa_r+0x922>
 80074c0:	2300      	movs	r3, #0
 80074c2:	220a      	movs	r2, #10
 80074c4:	9903      	ldr	r1, [sp, #12]
 80074c6:	9802      	ldr	r0, [sp, #8]
 80074c8:	f000 fa1d 	bl	8007906 <__multadd>
 80074cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ce:	3f01      	subs	r7, #1
 80074d0:	9003      	str	r0, [sp, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d100      	bne.n	80074d8 <_dtoa_r+0x888>
 80074d6:	e190      	b.n	80077fa <_dtoa_r+0xbaa>
 80074d8:	2300      	movs	r3, #0
 80074da:	0031      	movs	r1, r6
 80074dc:	220a      	movs	r2, #10
 80074de:	9802      	ldr	r0, [sp, #8]
 80074e0:	f000 fa11 	bl	8007906 <__multadd>
 80074e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074e6:	0006      	movs	r6, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dd00      	ble.n	80074ee <_dtoa_r+0x89e>
 80074ec:	e088      	b.n	8007600 <_dtoa_r+0x9b0>
 80074ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	dc00      	bgt.n	80074f6 <_dtoa_r+0x8a6>
 80074f4:	e084      	b.n	8007600 <_dtoa_r+0x9b0>
 80074f6:	e044      	b.n	8007582 <_dtoa_r+0x932>
 80074f8:	2336      	movs	r3, #54	; 0x36
 80074fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	e747      	b.n	8007390 <_dtoa_r+0x740>
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	1e5d      	subs	r5, r3, #1
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	42ab      	cmp	r3, r5
 8007508:	db08      	blt.n	800751c <_dtoa_r+0x8cc>
 800750a:	1b5d      	subs	r5, r3, r5
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	da0c      	bge.n	800752c <_dtoa_r+0x8dc>
 8007512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007516:	1a9c      	subs	r4, r3, r2
 8007518:	2300      	movs	r3, #0
 800751a:	e73b      	b.n	8007394 <_dtoa_r+0x744>
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	9504      	str	r5, [sp, #16]
 8007520:	1aea      	subs	r2, r5, r3
 8007522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007524:	2500      	movs	r5, #0
 8007526:	189b      	adds	r3, r3, r2
 8007528:	9311      	str	r3, [sp, #68]	; 0x44
 800752a:	e7ef      	b.n	800750c <_dtoa_r+0x8bc>
 800752c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	e730      	b.n	8007394 <_dtoa_r+0x744>
 8007532:	9d04      	ldr	r5, [sp, #16]
 8007534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007536:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007538:	e737      	b.n	80073aa <_dtoa_r+0x75a>
 800753a:	9a04      	ldr	r2, [sp, #16]
 800753c:	e764      	b.n	8007408 <_dtoa_r+0x7b8>
 800753e:	2500      	movs	r5, #0
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	9a04      	ldr	r2, [sp, #16]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	9310      	str	r3, [sp, #64]	; 0x40
 8007548:	3303      	adds	r3, #3
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	18d3      	adds	r3, r2, r3
 800754e:	6858      	ldr	r0, [r3, #4]
 8007550:	f000 fa17 	bl	8007982 <__hi0bits>
 8007554:	2320      	movs	r3, #32
 8007556:	1a18      	subs	r0, r3, r0
 8007558:	e785      	b.n	8007466 <_dtoa_r+0x816>
 800755a:	2b04      	cmp	r3, #4
 800755c:	d095      	beq.n	800748a <_dtoa_r+0x83a>
 800755e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007560:	331c      	adds	r3, #28
 8007562:	18d2      	adds	r2, r2, r3
 8007564:	920a      	str	r2, [sp, #40]	; 0x28
 8007566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007568:	18e4      	adds	r4, r4, r3
 800756a:	18d3      	adds	r3, r2, r3
 800756c:	e78c      	b.n	8007488 <_dtoa_r+0x838>
 800756e:	0003      	movs	r3, r0
 8007570:	e7f5      	b.n	800755e <_dtoa_r+0x90e>
 8007572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	dc3d      	bgt.n	80075f4 <_dtoa_r+0x9a4>
 8007578:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800757a:	2b02      	cmp	r3, #2
 800757c:	dd3a      	ble.n	80075f4 <_dtoa_r+0x9a4>
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	930c      	str	r3, [sp, #48]	; 0x30
 8007582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10c      	bne.n	80075a2 <_dtoa_r+0x952>
 8007588:	9904      	ldr	r1, [sp, #16]
 800758a:	2205      	movs	r2, #5
 800758c:	9802      	ldr	r0, [sp, #8]
 800758e:	f000 f9ba 	bl	8007906 <__multadd>
 8007592:	9004      	str	r0, [sp, #16]
 8007594:	0001      	movs	r1, r0
 8007596:	9803      	ldr	r0, [sp, #12]
 8007598:	f000 fb78 	bl	8007c8c <__mcmp>
 800759c:	2800      	cmp	r0, #0
 800759e:	dd00      	ble.n	80075a2 <_dtoa_r+0x952>
 80075a0:	e5af      	b.n	8007102 <_dtoa_r+0x4b2>
 80075a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a4:	9d08      	ldr	r5, [sp, #32]
 80075a6:	43df      	mvns	r7, r3
 80075a8:	2300      	movs	r3, #0
 80075aa:	9309      	str	r3, [sp, #36]	; 0x24
 80075ac:	9904      	ldr	r1, [sp, #16]
 80075ae:	9802      	ldr	r0, [sp, #8]
 80075b0:	f000 f990 	bl	80078d4 <_Bfree>
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	d100      	bne.n	80075ba <_dtoa_r+0x96a>
 80075b8:	e69b      	b.n	80072f2 <_dtoa_r+0x6a2>
 80075ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <_dtoa_r+0x97c>
 80075c0:	42b3      	cmp	r3, r6
 80075c2:	d003      	beq.n	80075cc <_dtoa_r+0x97c>
 80075c4:	0019      	movs	r1, r3
 80075c6:	9802      	ldr	r0, [sp, #8]
 80075c8:	f000 f984 	bl	80078d4 <_Bfree>
 80075cc:	0031      	movs	r1, r6
 80075ce:	9802      	ldr	r0, [sp, #8]
 80075d0:	f000 f980 	bl	80078d4 <_Bfree>
 80075d4:	e68d      	b.n	80072f2 <_dtoa_r+0x6a2>
 80075d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	001e      	movs	r6, r3
 80075dc:	e7e1      	b.n	80075a2 <_dtoa_r+0x952>
 80075de:	2300      	movs	r3, #0
 80075e0:	e7fa      	b.n	80075d8 <_dtoa_r+0x988>
 80075e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075e4:	0037      	movs	r7, r6
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	001e      	movs	r6, r3
 80075ea:	e58a      	b.n	8007102 <_dtoa_r+0x4b2>
 80075ec:	40240000 	.word	0x40240000
 80075f0:	00000433 	.word	0x00000433
 80075f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d100      	bne.n	80075fc <_dtoa_r+0x9ac>
 80075fa:	e0b2      	b.n	8007762 <_dtoa_r+0xb12>
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007600:	2c00      	cmp	r4, #0
 8007602:	dd05      	ble.n	8007610 <_dtoa_r+0x9c0>
 8007604:	0031      	movs	r1, r6
 8007606:	0022      	movs	r2, r4
 8007608:	9802      	ldr	r0, [sp, #8]
 800760a:	f000 faed 	bl	8007be8 <__lshift>
 800760e:	0006      	movs	r6, r0
 8007610:	0030      	movs	r0, r6
 8007612:	2d00      	cmp	r5, #0
 8007614:	d011      	beq.n	800763a <_dtoa_r+0x9ea>
 8007616:	6871      	ldr	r1, [r6, #4]
 8007618:	9802      	ldr	r0, [sp, #8]
 800761a:	f000 f923 	bl	8007864 <_Balloc>
 800761e:	0031      	movs	r1, r6
 8007620:	0004      	movs	r4, r0
 8007622:	6933      	ldr	r3, [r6, #16]
 8007624:	310c      	adds	r1, #12
 8007626:	1c9a      	adds	r2, r3, #2
 8007628:	0092      	lsls	r2, r2, #2
 800762a:	300c      	adds	r0, #12
 800762c:	f000 f911 	bl	8007852 <memcpy>
 8007630:	2201      	movs	r2, #1
 8007632:	0021      	movs	r1, r4
 8007634:	9802      	ldr	r0, [sp, #8]
 8007636:	f000 fad7 	bl	8007be8 <__lshift>
 800763a:	9609      	str	r6, [sp, #36]	; 0x24
 800763c:	0006      	movs	r6, r0
 800763e:	9b08      	ldr	r3, [sp, #32]
 8007640:	930a      	str	r3, [sp, #40]	; 0x28
 8007642:	9904      	ldr	r1, [sp, #16]
 8007644:	9803      	ldr	r0, [sp, #12]
 8007646:	f7ff fa7d 	bl	8006b44 <quorem>
 800764a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800764c:	900d      	str	r0, [sp, #52]	; 0x34
 800764e:	0004      	movs	r4, r0
 8007650:	9803      	ldr	r0, [sp, #12]
 8007652:	f000 fb1b 	bl	8007c8c <__mcmp>
 8007656:	0032      	movs	r2, r6
 8007658:	9010      	str	r0, [sp, #64]	; 0x40
 800765a:	9904      	ldr	r1, [sp, #16]
 800765c:	9802      	ldr	r0, [sp, #8]
 800765e:	f000 fb2f 	bl	8007cc0 <__mdiff>
 8007662:	2301      	movs	r3, #1
 8007664:	930b      	str	r3, [sp, #44]	; 0x2c
 8007666:	68c3      	ldr	r3, [r0, #12]
 8007668:	3430      	adds	r4, #48	; 0x30
 800766a:	0005      	movs	r5, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <_dtoa_r+0xa2a>
 8007670:	0001      	movs	r1, r0
 8007672:	9803      	ldr	r0, [sp, #12]
 8007674:	f000 fb0a 	bl	8007c8c <__mcmp>
 8007678:	900b      	str	r0, [sp, #44]	; 0x2c
 800767a:	0029      	movs	r1, r5
 800767c:	9802      	ldr	r0, [sp, #8]
 800767e:	f000 f929 	bl	80078d4 <_Bfree>
 8007682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007684:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007686:	4313      	orrs	r3, r2
 8007688:	d10e      	bne.n	80076a8 <_dtoa_r+0xa58>
 800768a:	9a06      	ldr	r2, [sp, #24]
 800768c:	3301      	adds	r3, #1
 800768e:	4213      	tst	r3, r2
 8007690:	d10a      	bne.n	80076a8 <_dtoa_r+0xa58>
 8007692:	2c39      	cmp	r4, #57	; 0x39
 8007694:	d026      	beq.n	80076e4 <_dtoa_r+0xa94>
 8007696:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	dd01      	ble.n	80076a0 <_dtoa_r+0xa50>
 800769c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800769e:	3431      	adds	r4, #49	; 0x31
 80076a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a2:	1c5d      	adds	r5, r3, #1
 80076a4:	701c      	strb	r4, [r3, #0]
 80076a6:	e781      	b.n	80075ac <_dtoa_r+0x95c>
 80076a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	db07      	blt.n	80076be <_dtoa_r+0xa6e>
 80076ae:	001d      	movs	r5, r3
 80076b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80076b2:	431d      	orrs	r5, r3
 80076b4:	d122      	bne.n	80076fc <_dtoa_r+0xaac>
 80076b6:	2301      	movs	r3, #1
 80076b8:	9a06      	ldr	r2, [sp, #24]
 80076ba:	4213      	tst	r3, r2
 80076bc:	d11e      	bne.n	80076fc <_dtoa_r+0xaac>
 80076be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dded      	ble.n	80076a0 <_dtoa_r+0xa50>
 80076c4:	9903      	ldr	r1, [sp, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	9802      	ldr	r0, [sp, #8]
 80076ca:	f000 fa8d 	bl	8007be8 <__lshift>
 80076ce:	9904      	ldr	r1, [sp, #16]
 80076d0:	9003      	str	r0, [sp, #12]
 80076d2:	f000 fadb 	bl	8007c8c <__mcmp>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dc02      	bgt.n	80076e0 <_dtoa_r+0xa90>
 80076da:	d1e1      	bne.n	80076a0 <_dtoa_r+0xa50>
 80076dc:	07e3      	lsls	r3, r4, #31
 80076de:	d5df      	bpl.n	80076a0 <_dtoa_r+0xa50>
 80076e0:	2c39      	cmp	r4, #57	; 0x39
 80076e2:	d1db      	bne.n	800769c <_dtoa_r+0xa4c>
 80076e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e8:	1c5d      	adds	r5, r3, #1
 80076ea:	2339      	movs	r3, #57	; 0x39
 80076ec:	7013      	strb	r3, [r2, #0]
 80076ee:	1e6b      	subs	r3, r5, #1
 80076f0:	781a      	ldrb	r2, [r3, #0]
 80076f2:	2a39      	cmp	r2, #57	; 0x39
 80076f4:	d067      	beq.n	80077c6 <_dtoa_r+0xb76>
 80076f6:	3201      	adds	r2, #1
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e757      	b.n	80075ac <_dtoa_r+0x95c>
 80076fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fe:	1c5d      	adds	r5, r3, #1
 8007700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007702:	2b00      	cmp	r3, #0
 8007704:	dd04      	ble.n	8007710 <_dtoa_r+0xac0>
 8007706:	2c39      	cmp	r4, #57	; 0x39
 8007708:	d0ec      	beq.n	80076e4 <_dtoa_r+0xa94>
 800770a:	3401      	adds	r4, #1
 800770c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770e:	e7c9      	b.n	80076a4 <_dtoa_r+0xa54>
 8007710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007714:	701c      	strb	r4, [r3, #0]
 8007716:	9b08      	ldr	r3, [sp, #32]
 8007718:	1aeb      	subs	r3, r5, r3
 800771a:	4293      	cmp	r3, r2
 800771c:	d03e      	beq.n	800779c <_dtoa_r+0xb4c>
 800771e:	2300      	movs	r3, #0
 8007720:	220a      	movs	r2, #10
 8007722:	9903      	ldr	r1, [sp, #12]
 8007724:	9802      	ldr	r0, [sp, #8]
 8007726:	f000 f8ee 	bl	8007906 <__multadd>
 800772a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772c:	9003      	str	r0, [sp, #12]
 800772e:	42b3      	cmp	r3, r6
 8007730:	d109      	bne.n	8007746 <_dtoa_r+0xaf6>
 8007732:	2300      	movs	r3, #0
 8007734:	220a      	movs	r2, #10
 8007736:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007738:	9802      	ldr	r0, [sp, #8]
 800773a:	f000 f8e4 	bl	8007906 <__multadd>
 800773e:	9009      	str	r0, [sp, #36]	; 0x24
 8007740:	0006      	movs	r6, r0
 8007742:	950a      	str	r5, [sp, #40]	; 0x28
 8007744:	e77d      	b.n	8007642 <_dtoa_r+0x9f2>
 8007746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007748:	2300      	movs	r3, #0
 800774a:	220a      	movs	r2, #10
 800774c:	9802      	ldr	r0, [sp, #8]
 800774e:	f000 f8da 	bl	8007906 <__multadd>
 8007752:	2300      	movs	r3, #0
 8007754:	9009      	str	r0, [sp, #36]	; 0x24
 8007756:	220a      	movs	r2, #10
 8007758:	0031      	movs	r1, r6
 800775a:	9802      	ldr	r0, [sp, #8]
 800775c:	f000 f8d3 	bl	8007906 <__multadd>
 8007760:	e7ee      	b.n	8007740 <_dtoa_r+0xaf0>
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	930c      	str	r3, [sp, #48]	; 0x30
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	9306      	str	r3, [sp, #24]
 800776a:	9904      	ldr	r1, [sp, #16]
 800776c:	9803      	ldr	r0, [sp, #12]
 800776e:	f7ff f9e9 	bl	8006b44 <quorem>
 8007772:	9b06      	ldr	r3, [sp, #24]
 8007774:	3030      	adds	r0, #48	; 0x30
 8007776:	1c5d      	adds	r5, r3, #1
 8007778:	7018      	strb	r0, [r3, #0]
 800777a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800777c:	9b08      	ldr	r3, [sp, #32]
 800777e:	0004      	movs	r4, r0
 8007780:	1aeb      	subs	r3, r5, r3
 8007782:	429a      	cmp	r2, r3
 8007784:	dd08      	ble.n	8007798 <_dtoa_r+0xb48>
 8007786:	2300      	movs	r3, #0
 8007788:	220a      	movs	r2, #10
 800778a:	9903      	ldr	r1, [sp, #12]
 800778c:	9802      	ldr	r0, [sp, #8]
 800778e:	f000 f8ba 	bl	8007906 <__multadd>
 8007792:	9506      	str	r5, [sp, #24]
 8007794:	9003      	str	r0, [sp, #12]
 8007796:	e7e8      	b.n	800776a <_dtoa_r+0xb1a>
 8007798:	2300      	movs	r3, #0
 800779a:	9309      	str	r3, [sp, #36]	; 0x24
 800779c:	9903      	ldr	r1, [sp, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	9802      	ldr	r0, [sp, #8]
 80077a2:	f000 fa21 	bl	8007be8 <__lshift>
 80077a6:	9904      	ldr	r1, [sp, #16]
 80077a8:	9003      	str	r0, [sp, #12]
 80077aa:	f000 fa6f 	bl	8007c8c <__mcmp>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	dc9d      	bgt.n	80076ee <_dtoa_r+0xa9e>
 80077b2:	d101      	bne.n	80077b8 <_dtoa_r+0xb68>
 80077b4:	07e3      	lsls	r3, r4, #31
 80077b6:	d49a      	bmi.n	80076ee <_dtoa_r+0xa9e>
 80077b8:	1e6b      	subs	r3, r5, #1
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	2a30      	cmp	r2, #48	; 0x30
 80077be:	d000      	beq.n	80077c2 <_dtoa_r+0xb72>
 80077c0:	e6f4      	b.n	80075ac <_dtoa_r+0x95c>
 80077c2:	001d      	movs	r5, r3
 80077c4:	e7f8      	b.n	80077b8 <_dtoa_r+0xb68>
 80077c6:	9a08      	ldr	r2, [sp, #32]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d103      	bne.n	80077d4 <_dtoa_r+0xb84>
 80077cc:	2331      	movs	r3, #49	; 0x31
 80077ce:	3701      	adds	r7, #1
 80077d0:	7013      	strb	r3, [r2, #0]
 80077d2:	e6eb      	b.n	80075ac <_dtoa_r+0x95c>
 80077d4:	001d      	movs	r5, r3
 80077d6:	e78a      	b.n	80076ee <_dtoa_r+0xa9e>
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <_dtoa_r+0xbb8>)
 80077da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077dc:	9308      	str	r3, [sp, #32]
 80077de:	4b0b      	ldr	r3, [pc, #44]	; (800780c <_dtoa_r+0xbbc>)
 80077e0:	2a00      	cmp	r2, #0
 80077e2:	d001      	beq.n	80077e8 <_dtoa_r+0xb98>
 80077e4:	f7ff fa77 	bl	8006cd6 <_dtoa_r+0x86>
 80077e8:	f7ff fa77 	bl	8006cda <_dtoa_r+0x8a>
 80077ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	dc00      	bgt.n	80077f4 <_dtoa_r+0xba4>
 80077f2:	e621      	b.n	8007438 <_dtoa_r+0x7e8>
 80077f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80077f6:	2001      	movs	r0, #1
 80077f8:	e635      	b.n	8007466 <_dtoa_r+0x816>
 80077fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dcb2      	bgt.n	8007766 <_dtoa_r+0xb16>
 8007800:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007802:	2b02      	cmp	r3, #2
 8007804:	ddaf      	ble.n	8007766 <_dtoa_r+0xb16>
 8007806:	e6bc      	b.n	8007582 <_dtoa_r+0x932>
 8007808:	08008468 	.word	0x08008468
 800780c:	08008470 	.word	0x08008470

08007810 <_localeconv_r>:
 8007810:	4b03      	ldr	r3, [pc, #12]	; (8007820 <_localeconv_r+0x10>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a18      	ldr	r0, [r3, #32]
 8007816:	2800      	cmp	r0, #0
 8007818:	d100      	bne.n	800781c <_localeconv_r+0xc>
 800781a:	4802      	ldr	r0, [pc, #8]	; (8007824 <_localeconv_r+0x14>)
 800781c:	30f0      	adds	r0, #240	; 0xf0
 800781e:	4770      	bx	lr
 8007820:	200000c0 	.word	0x200000c0
 8007824:	20000124 	.word	0x20000124

08007828 <malloc>:
 8007828:	b510      	push	{r4, lr}
 800782a:	4b03      	ldr	r3, [pc, #12]	; (8007838 <malloc+0x10>)
 800782c:	0001      	movs	r1, r0
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	f000 fb56 	bl	8007ee0 <_malloc_r>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	200000c0 	.word	0x200000c0

0800783c <memchr>:
 800783c:	b2c9      	uxtb	r1, r1
 800783e:	1882      	adds	r2, r0, r2
 8007840:	4290      	cmp	r0, r2
 8007842:	d101      	bne.n	8007848 <memchr+0xc>
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr
 8007848:	7803      	ldrb	r3, [r0, #0]
 800784a:	428b      	cmp	r3, r1
 800784c:	d0fb      	beq.n	8007846 <memchr+0xa>
 800784e:	3001      	adds	r0, #1
 8007850:	e7f6      	b.n	8007840 <memchr+0x4>

08007852 <memcpy>:
 8007852:	2300      	movs	r3, #0
 8007854:	b510      	push	{r4, lr}
 8007856:	429a      	cmp	r2, r3
 8007858:	d100      	bne.n	800785c <memcpy+0xa>
 800785a:	bd10      	pop	{r4, pc}
 800785c:	5ccc      	ldrb	r4, [r1, r3]
 800785e:	54c4      	strb	r4, [r0, r3]
 8007860:	3301      	adds	r3, #1
 8007862:	e7f8      	b.n	8007856 <memcpy+0x4>

08007864 <_Balloc>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007868:	0004      	movs	r4, r0
 800786a:	000d      	movs	r5, r1
 800786c:	2e00      	cmp	r6, #0
 800786e:	d107      	bne.n	8007880 <_Balloc+0x1c>
 8007870:	2010      	movs	r0, #16
 8007872:	f7ff ffd9 	bl	8007828 <malloc>
 8007876:	6260      	str	r0, [r4, #36]	; 0x24
 8007878:	6046      	str	r6, [r0, #4]
 800787a:	6086      	str	r6, [r0, #8]
 800787c:	6006      	str	r6, [r0, #0]
 800787e:	60c6      	str	r6, [r0, #12]
 8007880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007882:	68f3      	ldr	r3, [r6, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <_Balloc+0x4c>
 8007888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800788a:	00aa      	lsls	r2, r5, #2
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	189b      	adds	r3, r3, r2
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	2800      	cmp	r0, #0
 8007894:	d118      	bne.n	80078c8 <_Balloc+0x64>
 8007896:	2101      	movs	r1, #1
 8007898:	000e      	movs	r6, r1
 800789a:	40ae      	lsls	r6, r5
 800789c:	1d72      	adds	r2, r6, #5
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	0020      	movs	r0, r4
 80078a2:	f000 fac5 	bl	8007e30 <_calloc_r>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d00c      	beq.n	80078c4 <_Balloc+0x60>
 80078aa:	6045      	str	r5, [r0, #4]
 80078ac:	6086      	str	r6, [r0, #8]
 80078ae:	e00d      	b.n	80078cc <_Balloc+0x68>
 80078b0:	2221      	movs	r2, #33	; 0x21
 80078b2:	2104      	movs	r1, #4
 80078b4:	0020      	movs	r0, r4
 80078b6:	f000 fabb 	bl	8007e30 <_calloc_r>
 80078ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078bc:	60f0      	str	r0, [r6, #12]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e1      	bne.n	8007888 <_Balloc+0x24>
 80078c4:	2000      	movs	r0, #0
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	6802      	ldr	r2, [r0, #0]
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	2300      	movs	r3, #0
 80078ce:	6103      	str	r3, [r0, #16]
 80078d0:	60c3      	str	r3, [r0, #12]
 80078d2:	e7f8      	b.n	80078c6 <_Balloc+0x62>

080078d4 <_Bfree>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80078d8:	0006      	movs	r6, r0
 80078da:	000d      	movs	r5, r1
 80078dc:	2c00      	cmp	r4, #0
 80078de:	d107      	bne.n	80078f0 <_Bfree+0x1c>
 80078e0:	2010      	movs	r0, #16
 80078e2:	f7ff ffa1 	bl	8007828 <malloc>
 80078e6:	6270      	str	r0, [r6, #36]	; 0x24
 80078e8:	6044      	str	r4, [r0, #4]
 80078ea:	6084      	str	r4, [r0, #8]
 80078ec:	6004      	str	r4, [r0, #0]
 80078ee:	60c4      	str	r4, [r0, #12]
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	d007      	beq.n	8007904 <_Bfree+0x30>
 80078f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80078f6:	686a      	ldr	r2, [r5, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	189b      	adds	r3, r3, r2
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	602a      	str	r2, [r5, #0]
 8007902:	601d      	str	r5, [r3, #0]
 8007904:	bd70      	pop	{r4, r5, r6, pc}

08007906 <__multadd>:
 8007906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007908:	001e      	movs	r6, r3
 800790a:	2314      	movs	r3, #20
 800790c:	469c      	mov	ip, r3
 800790e:	0007      	movs	r7, r0
 8007910:	000c      	movs	r4, r1
 8007912:	2000      	movs	r0, #0
 8007914:	690d      	ldr	r5, [r1, #16]
 8007916:	448c      	add	ip, r1
 8007918:	4663      	mov	r3, ip
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3001      	adds	r0, #1
 800791e:	b299      	uxth	r1, r3
 8007920:	4663      	mov	r3, ip
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4351      	muls	r1, r2
 8007926:	0c1b      	lsrs	r3, r3, #16
 8007928:	4353      	muls	r3, r2
 800792a:	1989      	adds	r1, r1, r6
 800792c:	0c0e      	lsrs	r6, r1, #16
 800792e:	199b      	adds	r3, r3, r6
 8007930:	b289      	uxth	r1, r1
 8007932:	0c1e      	lsrs	r6, r3, #16
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	185b      	adds	r3, r3, r1
 8007938:	4661      	mov	r1, ip
 800793a:	c108      	stmia	r1!, {r3}
 800793c:	468c      	mov	ip, r1
 800793e:	4285      	cmp	r5, r0
 8007940:	dcea      	bgt.n	8007918 <__multadd+0x12>
 8007942:	2e00      	cmp	r6, #0
 8007944:	d01b      	beq.n	800797e <__multadd+0x78>
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	42ab      	cmp	r3, r5
 800794a:	dc12      	bgt.n	8007972 <__multadd+0x6c>
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	0038      	movs	r0, r7
 8007950:	1c59      	adds	r1, r3, #1
 8007952:	f7ff ff87 	bl	8007864 <_Balloc>
 8007956:	0021      	movs	r1, r4
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	9001      	str	r0, [sp, #4]
 800795c:	1c9a      	adds	r2, r3, #2
 800795e:	0092      	lsls	r2, r2, #2
 8007960:	310c      	adds	r1, #12
 8007962:	300c      	adds	r0, #12
 8007964:	f7ff ff75 	bl	8007852 <memcpy>
 8007968:	0021      	movs	r1, r4
 800796a:	0038      	movs	r0, r7
 800796c:	f7ff ffb2 	bl	80078d4 <_Bfree>
 8007970:	9c01      	ldr	r4, [sp, #4]
 8007972:	1d2b      	adds	r3, r5, #4
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	18e3      	adds	r3, r4, r3
 8007978:	3501      	adds	r5, #1
 800797a:	605e      	str	r6, [r3, #4]
 800797c:	6125      	str	r5, [r4, #16]
 800797e:	0020      	movs	r0, r4
 8007980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08007982 <__hi0bits>:
 8007982:	0003      	movs	r3, r0
 8007984:	0c02      	lsrs	r2, r0, #16
 8007986:	2000      	movs	r0, #0
 8007988:	4282      	cmp	r2, r0
 800798a:	d101      	bne.n	8007990 <__hi0bits+0xe>
 800798c:	041b      	lsls	r3, r3, #16
 800798e:	3010      	adds	r0, #16
 8007990:	0e1a      	lsrs	r2, r3, #24
 8007992:	d101      	bne.n	8007998 <__hi0bits+0x16>
 8007994:	3008      	adds	r0, #8
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	0f1a      	lsrs	r2, r3, #28
 800799a:	d101      	bne.n	80079a0 <__hi0bits+0x1e>
 800799c:	3004      	adds	r0, #4
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	0f9a      	lsrs	r2, r3, #30
 80079a2:	d101      	bne.n	80079a8 <__hi0bits+0x26>
 80079a4:	3002      	adds	r0, #2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db03      	blt.n	80079b4 <__hi0bits+0x32>
 80079ac:	3001      	adds	r0, #1
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	d400      	bmi.n	80079b4 <__hi0bits+0x32>
 80079b2:	2020      	movs	r0, #32
 80079b4:	4770      	bx	lr

080079b6 <__lo0bits>:
 80079b6:	2207      	movs	r2, #7
 80079b8:	6803      	ldr	r3, [r0, #0]
 80079ba:	b510      	push	{r4, lr}
 80079bc:	0001      	movs	r1, r0
 80079be:	401a      	ands	r2, r3
 80079c0:	d00d      	beq.n	80079de <__lo0bits+0x28>
 80079c2:	2401      	movs	r4, #1
 80079c4:	2000      	movs	r0, #0
 80079c6:	4223      	tst	r3, r4
 80079c8:	d105      	bne.n	80079d6 <__lo0bits+0x20>
 80079ca:	3002      	adds	r0, #2
 80079cc:	4203      	tst	r3, r0
 80079ce:	d003      	beq.n	80079d8 <__lo0bits+0x22>
 80079d0:	40e3      	lsrs	r3, r4
 80079d2:	0020      	movs	r0, r4
 80079d4:	600b      	str	r3, [r1, #0]
 80079d6:	bd10      	pop	{r4, pc}
 80079d8:	089b      	lsrs	r3, r3, #2
 80079da:	600b      	str	r3, [r1, #0]
 80079dc:	e7fb      	b.n	80079d6 <__lo0bits+0x20>
 80079de:	b29c      	uxth	r4, r3
 80079e0:	0010      	movs	r0, r2
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d101      	bne.n	80079ea <__lo0bits+0x34>
 80079e6:	2010      	movs	r0, #16
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	d101      	bne.n	80079f4 <__lo0bits+0x3e>
 80079f0:	3008      	adds	r0, #8
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	071a      	lsls	r2, r3, #28
 80079f6:	d101      	bne.n	80079fc <__lo0bits+0x46>
 80079f8:	3004      	adds	r0, #4
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	079a      	lsls	r2, r3, #30
 80079fe:	d101      	bne.n	8007a04 <__lo0bits+0x4e>
 8007a00:	3002      	adds	r0, #2
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	07da      	lsls	r2, r3, #31
 8007a06:	d4e8      	bmi.n	80079da <__lo0bits+0x24>
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	d001      	beq.n	8007a10 <__lo0bits+0x5a>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	e7e4      	b.n	80079da <__lo0bits+0x24>
 8007a10:	2020      	movs	r0, #32
 8007a12:	e7e0      	b.n	80079d6 <__lo0bits+0x20>

08007a14 <__i2b>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	000c      	movs	r4, r1
 8007a18:	2101      	movs	r1, #1
 8007a1a:	f7ff ff23 	bl	8007864 <_Balloc>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	6144      	str	r4, [r0, #20]
 8007a22:	6103      	str	r3, [r0, #16]
 8007a24:	bd10      	pop	{r4, pc}

08007a26 <__multiply>:
 8007a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a28:	690b      	ldr	r3, [r1, #16]
 8007a2a:	0014      	movs	r4, r2
 8007a2c:	6912      	ldr	r2, [r2, #16]
 8007a2e:	b089      	sub	sp, #36	; 0x24
 8007a30:	000d      	movs	r5, r1
 8007a32:	4293      	cmp	r3, r2
 8007a34:	da01      	bge.n	8007a3a <__multiply+0x14>
 8007a36:	0025      	movs	r5, r4
 8007a38:	000c      	movs	r4, r1
 8007a3a:	692f      	ldr	r7, [r5, #16]
 8007a3c:	6926      	ldr	r6, [r4, #16]
 8007a3e:	6869      	ldr	r1, [r5, #4]
 8007a40:	19bb      	adds	r3, r7, r6
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	68ab      	ldr	r3, [r5, #8]
 8007a46:	19ba      	adds	r2, r7, r6
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	da00      	bge.n	8007a4e <__multiply+0x28>
 8007a4c:	3101      	adds	r1, #1
 8007a4e:	f7ff ff09 	bl	8007864 <_Balloc>
 8007a52:	0002      	movs	r2, r0
 8007a54:	19bb      	adds	r3, r7, r6
 8007a56:	3214      	adds	r2, #20
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	18d3      	adds	r3, r2, r3
 8007a5c:	469c      	mov	ip, r3
 8007a5e:	2100      	movs	r1, #0
 8007a60:	0013      	movs	r3, r2
 8007a62:	9004      	str	r0, [sp, #16]
 8007a64:	4563      	cmp	r3, ip
 8007a66:	d31d      	bcc.n	8007aa4 <__multiply+0x7e>
 8007a68:	3514      	adds	r5, #20
 8007a6a:	00bf      	lsls	r7, r7, #2
 8007a6c:	19eb      	adds	r3, r5, r7
 8007a6e:	3414      	adds	r4, #20
 8007a70:	00b6      	lsls	r6, r6, #2
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	19a3      	adds	r3, r4, r6
 8007a76:	9503      	str	r5, [sp, #12]
 8007a78:	9401      	str	r4, [sp, #4]
 8007a7a:	9307      	str	r3, [sp, #28]
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	9901      	ldr	r1, [sp, #4]
 8007a80:	4299      	cmp	r1, r3
 8007a82:	d311      	bcc.n	8007aa8 <__multiply+0x82>
 8007a84:	9b02      	ldr	r3, [sp, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd06      	ble.n	8007a98 <__multiply+0x72>
 8007a8a:	2304      	movs	r3, #4
 8007a8c:	425b      	negs	r3, r3
 8007a8e:	449c      	add	ip, r3
 8007a90:	4663      	mov	r3, ip
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d051      	beq.n	8007b3c <__multiply+0x116>
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	9a02      	ldr	r2, [sp, #8]
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	611a      	str	r2, [r3, #16]
 8007aa0:	b009      	add	sp, #36	; 0x24
 8007aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa4:	c302      	stmia	r3!, {r1}
 8007aa6:	e7dd      	b.n	8007a64 <__multiply+0x3e>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	b298      	uxth	r0, r3
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d01c      	beq.n	8007aec <__multiply+0xc6>
 8007ab2:	0015      	movs	r5, r2
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	9f03      	ldr	r7, [sp, #12]
 8007ab8:	cf02      	ldmia	r7!, {r1}
 8007aba:	682c      	ldr	r4, [r5, #0]
 8007abc:	b28b      	uxth	r3, r1
 8007abe:	4343      	muls	r3, r0
 8007ac0:	0c09      	lsrs	r1, r1, #16
 8007ac2:	4341      	muls	r1, r0
 8007ac4:	b2a4      	uxth	r4, r4
 8007ac6:	191b      	adds	r3, r3, r4
 8007ac8:	199b      	adds	r3, r3, r6
 8007aca:	000e      	movs	r6, r1
 8007acc:	6829      	ldr	r1, [r5, #0]
 8007ace:	9506      	str	r5, [sp, #24]
 8007ad0:	0c09      	lsrs	r1, r1, #16
 8007ad2:	1871      	adds	r1, r6, r1
 8007ad4:	0c1e      	lsrs	r6, r3, #16
 8007ad6:	1989      	adds	r1, r1, r6
 8007ad8:	0c0e      	lsrs	r6, r1, #16
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	0409      	lsls	r1, r1, #16
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	c508      	stmia	r5!, {r3}
 8007ae2:	9b05      	ldr	r3, [sp, #20]
 8007ae4:	42bb      	cmp	r3, r7
 8007ae6:	d8e7      	bhi.n	8007ab8 <__multiply+0x92>
 8007ae8:	9b06      	ldr	r3, [sp, #24]
 8007aea:	605e      	str	r6, [r3, #4]
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	0c1d      	lsrs	r5, r3, #16
 8007af2:	d01e      	beq.n	8007b32 <__multiply+0x10c>
 8007af4:	0010      	movs	r0, r2
 8007af6:	2700      	movs	r7, #0
 8007af8:	6813      	ldr	r3, [r2, #0]
 8007afa:	9e03      	ldr	r6, [sp, #12]
 8007afc:	6831      	ldr	r1, [r6, #0]
 8007afe:	6804      	ldr	r4, [r0, #0]
 8007b00:	b289      	uxth	r1, r1
 8007b02:	4369      	muls	r1, r5
 8007b04:	0c24      	lsrs	r4, r4, #16
 8007b06:	1909      	adds	r1, r1, r4
 8007b08:	19c9      	adds	r1, r1, r7
 8007b0a:	040f      	lsls	r7, r1, #16
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	433b      	orrs	r3, r7
 8007b10:	6003      	str	r3, [r0, #0]
 8007b12:	ce80      	ldmia	r6!, {r7}
 8007b14:	6843      	ldr	r3, [r0, #4]
 8007b16:	0c3f      	lsrs	r7, r7, #16
 8007b18:	436f      	muls	r7, r5
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	0c09      	lsrs	r1, r1, #16
 8007b20:	185b      	adds	r3, r3, r1
 8007b22:	9905      	ldr	r1, [sp, #20]
 8007b24:	9006      	str	r0, [sp, #24]
 8007b26:	0c1f      	lsrs	r7, r3, #16
 8007b28:	3004      	adds	r0, #4
 8007b2a:	42b1      	cmp	r1, r6
 8007b2c:	d8e6      	bhi.n	8007afc <__multiply+0xd6>
 8007b2e:	9906      	ldr	r1, [sp, #24]
 8007b30:	604b      	str	r3, [r1, #4]
 8007b32:	9b01      	ldr	r3, [sp, #4]
 8007b34:	3204      	adds	r2, #4
 8007b36:	3304      	adds	r3, #4
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	e79f      	b.n	8007a7c <__multiply+0x56>
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	e79f      	b.n	8007a84 <__multiply+0x5e>

08007b44 <__pow5mult>:
 8007b44:	2303      	movs	r3, #3
 8007b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b48:	4013      	ands	r3, r2
 8007b4a:	0005      	movs	r5, r0
 8007b4c:	000e      	movs	r6, r1
 8007b4e:	0014      	movs	r4, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d008      	beq.n	8007b66 <__pow5mult+0x22>
 8007b54:	4922      	ldr	r1, [pc, #136]	; (8007be0 <__pow5mult+0x9c>)
 8007b56:	3b01      	subs	r3, #1
 8007b58:	009a      	lsls	r2, r3, #2
 8007b5a:	5852      	ldr	r2, [r2, r1]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	0031      	movs	r1, r6
 8007b60:	f7ff fed1 	bl	8007906 <__multadd>
 8007b64:	0006      	movs	r6, r0
 8007b66:	10a3      	asrs	r3, r4, #2
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	d036      	beq.n	8007bda <__pow5mult+0x96>
 8007b6c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	d107      	bne.n	8007b82 <__pow5mult+0x3e>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7ff fe58 	bl	8007828 <malloc>
 8007b78:	6268      	str	r0, [r5, #36]	; 0x24
 8007b7a:	6044      	str	r4, [r0, #4]
 8007b7c:	6084      	str	r4, [r0, #8]
 8007b7e:	6004      	str	r4, [r0, #0]
 8007b80:	60c4      	str	r4, [r0, #12]
 8007b82:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007b84:	68bc      	ldr	r4, [r7, #8]
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	d107      	bne.n	8007b9a <__pow5mult+0x56>
 8007b8a:	4916      	ldr	r1, [pc, #88]	; (8007be4 <__pow5mult+0xa0>)
 8007b8c:	0028      	movs	r0, r5
 8007b8e:	f7ff ff41 	bl	8007a14 <__i2b>
 8007b92:	2300      	movs	r3, #0
 8007b94:	0004      	movs	r4, r0
 8007b96:	60b8      	str	r0, [r7, #8]
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	4213      	tst	r3, r2
 8007ba0:	d00a      	beq.n	8007bb8 <__pow5mult+0x74>
 8007ba2:	0031      	movs	r1, r6
 8007ba4:	0022      	movs	r2, r4
 8007ba6:	0028      	movs	r0, r5
 8007ba8:	f7ff ff3d 	bl	8007a26 <__multiply>
 8007bac:	0007      	movs	r7, r0
 8007bae:	0031      	movs	r1, r6
 8007bb0:	0028      	movs	r0, r5
 8007bb2:	f7ff fe8f 	bl	80078d4 <_Bfree>
 8007bb6:	003e      	movs	r6, r7
 8007bb8:	9b01      	ldr	r3, [sp, #4]
 8007bba:	105b      	asrs	r3, r3, #1
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	d00c      	beq.n	8007bda <__pow5mult+0x96>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d107      	bne.n	8007bd6 <__pow5mult+0x92>
 8007bc6:	0022      	movs	r2, r4
 8007bc8:	0021      	movs	r1, r4
 8007bca:	0028      	movs	r0, r5
 8007bcc:	f7ff ff2b 	bl	8007a26 <__multiply>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6020      	str	r0, [r4, #0]
 8007bd4:	6003      	str	r3, [r0, #0]
 8007bd6:	0004      	movs	r4, r0
 8007bd8:	e7df      	b.n	8007b9a <__pow5mult+0x56>
 8007bda:	0030      	movs	r0, r6
 8007bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	08008568 	.word	0x08008568
 8007be4:	00000271 	.word	0x00000271

08007be8 <__lshift>:
 8007be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bea:	000d      	movs	r5, r1
 8007bec:	0017      	movs	r7, r2
 8007bee:	692b      	ldr	r3, [r5, #16]
 8007bf0:	1154      	asrs	r4, r2, #5
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	18e3      	adds	r3, r4, r3
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	6849      	ldr	r1, [r1, #4]
 8007bfe:	68ab      	ldr	r3, [r5, #8]
 8007c00:	9002      	str	r0, [sp, #8]
 8007c02:	9a00      	ldr	r2, [sp, #0]
 8007c04:	4293      	cmp	r3, r2
 8007c06:	db35      	blt.n	8007c74 <__lshift+0x8c>
 8007c08:	9802      	ldr	r0, [sp, #8]
 8007c0a:	f7ff fe2b 	bl	8007864 <_Balloc>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	0002      	movs	r2, r0
 8007c12:	0006      	movs	r6, r0
 8007c14:	0019      	movs	r1, r3
 8007c16:	3214      	adds	r2, #20
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	db2e      	blt.n	8007c7a <__lshift+0x92>
 8007c1c:	43e3      	mvns	r3, r4
 8007c1e:	17db      	asrs	r3, r3, #31
 8007c20:	401c      	ands	r4, r3
 8007c22:	002b      	movs	r3, r5
 8007c24:	00a4      	lsls	r4, r4, #2
 8007c26:	1914      	adds	r4, r2, r4
 8007c28:	692a      	ldr	r2, [r5, #16]
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	0092      	lsls	r2, r2, #2
 8007c2e:	189a      	adds	r2, r3, r2
 8007c30:	4694      	mov	ip, r2
 8007c32:	221f      	movs	r2, #31
 8007c34:	4017      	ands	r7, r2
 8007c36:	d024      	beq.n	8007c82 <__lshift+0x9a>
 8007c38:	3201      	adds	r2, #1
 8007c3a:	1bd2      	subs	r2, r2, r7
 8007c3c:	9203      	str	r2, [sp, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	6819      	ldr	r1, [r3, #0]
 8007c42:	0020      	movs	r0, r4
 8007c44:	40b9      	lsls	r1, r7
 8007c46:	430a      	orrs	r2, r1
 8007c48:	c404      	stmia	r4!, {r2}
 8007c4a:	cb04      	ldmia	r3!, {r2}
 8007c4c:	9903      	ldr	r1, [sp, #12]
 8007c4e:	40ca      	lsrs	r2, r1
 8007c50:	459c      	cmp	ip, r3
 8007c52:	d8f5      	bhi.n	8007c40 <__lshift+0x58>
 8007c54:	6042      	str	r2, [r0, #4]
 8007c56:	2a00      	cmp	r2, #0
 8007c58:	d002      	beq.n	8007c60 <__lshift+0x78>
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	9802      	ldr	r0, [sp, #8]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	6133      	str	r3, [r6, #16]
 8007c68:	0029      	movs	r1, r5
 8007c6a:	f7ff fe33 	bl	80078d4 <_Bfree>
 8007c6e:	0030      	movs	r0, r6
 8007c70:	b005      	add	sp, #20
 8007c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c74:	3101      	adds	r1, #1
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	e7c3      	b.n	8007c02 <__lshift+0x1a>
 8007c7a:	0098      	lsls	r0, r3, #2
 8007c7c:	5011      	str	r1, [r2, r0]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	e7ca      	b.n	8007c18 <__lshift+0x30>
 8007c82:	cb04      	ldmia	r3!, {r2}
 8007c84:	c404      	stmia	r4!, {r2}
 8007c86:	459c      	cmp	ip, r3
 8007c88:	d8fb      	bhi.n	8007c82 <__lshift+0x9a>
 8007c8a:	e7e9      	b.n	8007c60 <__lshift+0x78>

08007c8c <__mcmp>:
 8007c8c:	690a      	ldr	r2, [r1, #16]
 8007c8e:	6903      	ldr	r3, [r0, #16]
 8007c90:	b530      	push	{r4, r5, lr}
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	d10d      	bne.n	8007cb2 <__mcmp+0x26>
 8007c96:	0092      	lsls	r2, r2, #2
 8007c98:	3014      	adds	r0, #20
 8007c9a:	3114      	adds	r1, #20
 8007c9c:	1884      	adds	r4, r0, r2
 8007c9e:	1889      	adds	r1, r1, r2
 8007ca0:	3c04      	subs	r4, #4
 8007ca2:	3904      	subs	r1, #4
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	680a      	ldr	r2, [r1, #0]
 8007ca8:	4295      	cmp	r5, r2
 8007caa:	d004      	beq.n	8007cb6 <__mcmp+0x2a>
 8007cac:	2301      	movs	r3, #1
 8007cae:	4295      	cmp	r5, r2
 8007cb0:	d304      	bcc.n	8007cbc <__mcmp+0x30>
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	bd30      	pop	{r4, r5, pc}
 8007cb6:	42a0      	cmp	r0, r4
 8007cb8:	d3f2      	bcc.n	8007ca0 <__mcmp+0x14>
 8007cba:	e7fa      	b.n	8007cb2 <__mcmp+0x26>
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	e7f8      	b.n	8007cb2 <__mcmp+0x26>

08007cc0 <__mdiff>:
 8007cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc2:	000d      	movs	r5, r1
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	0007      	movs	r7, r0
 8007cc8:	0011      	movs	r1, r2
 8007cca:	0028      	movs	r0, r5
 8007ccc:	0014      	movs	r4, r2
 8007cce:	f7ff ffdd 	bl	8007c8c <__mcmp>
 8007cd2:	1e06      	subs	r6, r0, #0
 8007cd4:	d108      	bne.n	8007ce8 <__mdiff+0x28>
 8007cd6:	0001      	movs	r1, r0
 8007cd8:	0038      	movs	r0, r7
 8007cda:	f7ff fdc3 	bl	8007864 <_Balloc>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	6146      	str	r6, [r0, #20]
 8007ce2:	6103      	str	r3, [r0, #16]
 8007ce4:	b005      	add	sp, #20
 8007ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	2800      	cmp	r0, #0
 8007cee:	db04      	blt.n	8007cfa <__mdiff+0x3a>
 8007cf0:	0023      	movs	r3, r4
 8007cf2:	002c      	movs	r4, r5
 8007cf4:	001d      	movs	r5, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	6861      	ldr	r1, [r4, #4]
 8007cfc:	0038      	movs	r0, r7
 8007cfe:	f7ff fdb1 	bl	8007864 <_Balloc>
 8007d02:	002f      	movs	r7, r5
 8007d04:	2200      	movs	r2, #0
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	6926      	ldr	r6, [r4, #16]
 8007d0a:	60c3      	str	r3, [r0, #12]
 8007d0c:	3414      	adds	r4, #20
 8007d0e:	00b3      	lsls	r3, r6, #2
 8007d10:	18e3      	adds	r3, r4, r3
 8007d12:	9302      	str	r3, [sp, #8]
 8007d14:	692b      	ldr	r3, [r5, #16]
 8007d16:	3714      	adds	r7, #20
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	0003      	movs	r3, r0
 8007d20:	4694      	mov	ip, r2
 8007d22:	3314      	adds	r3, #20
 8007d24:	cc20      	ldmia	r4!, {r5}
 8007d26:	cf04      	ldmia	r7!, {r2}
 8007d28:	9201      	str	r2, [sp, #4]
 8007d2a:	b2aa      	uxth	r2, r5
 8007d2c:	4494      	add	ip, r2
 8007d2e:	466a      	mov	r2, sp
 8007d30:	4661      	mov	r1, ip
 8007d32:	8892      	ldrh	r2, [r2, #4]
 8007d34:	0c2d      	lsrs	r5, r5, #16
 8007d36:	1a8a      	subs	r2, r1, r2
 8007d38:	9901      	ldr	r1, [sp, #4]
 8007d3a:	0c09      	lsrs	r1, r1, #16
 8007d3c:	1a69      	subs	r1, r5, r1
 8007d3e:	1415      	asrs	r5, r2, #16
 8007d40:	1949      	adds	r1, r1, r5
 8007d42:	140d      	asrs	r5, r1, #16
 8007d44:	b292      	uxth	r2, r2
 8007d46:	0409      	lsls	r1, r1, #16
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	9a03      	ldr	r2, [sp, #12]
 8007d4e:	46ac      	mov	ip, r5
 8007d50:	3304      	adds	r3, #4
 8007d52:	42ba      	cmp	r2, r7
 8007d54:	d8e6      	bhi.n	8007d24 <__mdiff+0x64>
 8007d56:	9902      	ldr	r1, [sp, #8]
 8007d58:	001a      	movs	r2, r3
 8007d5a:	428c      	cmp	r4, r1
 8007d5c:	d305      	bcc.n	8007d6a <__mdiff+0xaa>
 8007d5e:	3a04      	subs	r2, #4
 8007d60:	6813      	ldr	r3, [r2, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00e      	beq.n	8007d84 <__mdiff+0xc4>
 8007d66:	6106      	str	r6, [r0, #16]
 8007d68:	e7bc      	b.n	8007ce4 <__mdiff+0x24>
 8007d6a:	cc04      	ldmia	r4!, {r2}
 8007d6c:	b291      	uxth	r1, r2
 8007d6e:	4461      	add	r1, ip
 8007d70:	140d      	asrs	r5, r1, #16
 8007d72:	0c12      	lsrs	r2, r2, #16
 8007d74:	1952      	adds	r2, r2, r5
 8007d76:	1415      	asrs	r5, r2, #16
 8007d78:	b289      	uxth	r1, r1
 8007d7a:	0412      	lsls	r2, r2, #16
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	46ac      	mov	ip, r5
 8007d80:	c304      	stmia	r3!, {r2}
 8007d82:	e7e8      	b.n	8007d56 <__mdiff+0x96>
 8007d84:	3e01      	subs	r6, #1
 8007d86:	e7ea      	b.n	8007d5e <__mdiff+0x9e>

08007d88 <__d2b>:
 8007d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d8a:	001d      	movs	r5, r3
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	0014      	movs	r4, r2
 8007d90:	9f08      	ldr	r7, [sp, #32]
 8007d92:	f7ff fd67 	bl	8007864 <_Balloc>
 8007d96:	032b      	lsls	r3, r5, #12
 8007d98:	006d      	lsls	r5, r5, #1
 8007d9a:	0006      	movs	r6, r0
 8007d9c:	0b1b      	lsrs	r3, r3, #12
 8007d9e:	0d6d      	lsrs	r5, r5, #21
 8007da0:	d124      	bne.n	8007dec <__d2b+0x64>
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	d027      	beq.n	8007df8 <__d2b+0x70>
 8007da8:	4668      	mov	r0, sp
 8007daa:	9400      	str	r4, [sp, #0]
 8007dac:	f7ff fe03 	bl	80079b6 <__lo0bits>
 8007db0:	9c00      	ldr	r4, [sp, #0]
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d01e      	beq.n	8007df4 <__d2b+0x6c>
 8007db6:	9b01      	ldr	r3, [sp, #4]
 8007db8:	2120      	movs	r1, #32
 8007dba:	001a      	movs	r2, r3
 8007dbc:	1a09      	subs	r1, r1, r0
 8007dbe:	408a      	lsls	r2, r1
 8007dc0:	40c3      	lsrs	r3, r0
 8007dc2:	4322      	orrs	r2, r4
 8007dc4:	6172      	str	r2, [r6, #20]
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	9c01      	ldr	r4, [sp, #4]
 8007dca:	61b4      	str	r4, [r6, #24]
 8007dcc:	1e63      	subs	r3, r4, #1
 8007dce:	419c      	sbcs	r4, r3
 8007dd0:	3401      	adds	r4, #1
 8007dd2:	6134      	str	r4, [r6, #16]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	d018      	beq.n	8007e0a <__d2b+0x82>
 8007dd8:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <__d2b+0x9c>)
 8007dda:	18ed      	adds	r5, r5, r3
 8007ddc:	2335      	movs	r3, #53	; 0x35
 8007dde:	182d      	adds	r5, r5, r0
 8007de0:	603d      	str	r5, [r7, #0]
 8007de2:	1a18      	subs	r0, r3, r0
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	6018      	str	r0, [r3, #0]
 8007de8:	0030      	movs	r0, r6
 8007dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dec:	2280      	movs	r2, #128	; 0x80
 8007dee:	0352      	lsls	r2, r2, #13
 8007df0:	4313      	orrs	r3, r2
 8007df2:	e7d6      	b.n	8007da2 <__d2b+0x1a>
 8007df4:	6174      	str	r4, [r6, #20]
 8007df6:	e7e7      	b.n	8007dc8 <__d2b+0x40>
 8007df8:	a801      	add	r0, sp, #4
 8007dfa:	f7ff fddc 	bl	80079b6 <__lo0bits>
 8007dfe:	2401      	movs	r4, #1
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	6134      	str	r4, [r6, #16]
 8007e04:	6173      	str	r3, [r6, #20]
 8007e06:	3020      	adds	r0, #32
 8007e08:	e7e4      	b.n	8007dd4 <__d2b+0x4c>
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <__d2b+0xa0>)
 8007e0c:	18c0      	adds	r0, r0, r3
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <__d2b+0xa4>)
 8007e10:	6038      	str	r0, [r7, #0]
 8007e12:	18e3      	adds	r3, r4, r3
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	18f3      	adds	r3, r6, r3
 8007e18:	6958      	ldr	r0, [r3, #20]
 8007e1a:	f7ff fdb2 	bl	8007982 <__hi0bits>
 8007e1e:	0164      	lsls	r4, r4, #5
 8007e20:	1a20      	subs	r0, r4, r0
 8007e22:	e7df      	b.n	8007de4 <__d2b+0x5c>
 8007e24:	fffffbcd 	.word	0xfffffbcd
 8007e28:	fffffbce 	.word	0xfffffbce
 8007e2c:	3fffffff 	.word	0x3fffffff

08007e30 <_calloc_r>:
 8007e30:	434a      	muls	r2, r1
 8007e32:	b570      	push	{r4, r5, r6, lr}
 8007e34:	0011      	movs	r1, r2
 8007e36:	0014      	movs	r4, r2
 8007e38:	f000 f852 	bl	8007ee0 <_malloc_r>
 8007e3c:	1e05      	subs	r5, r0, #0
 8007e3e:	d003      	beq.n	8007e48 <_calloc_r+0x18>
 8007e40:	0022      	movs	r2, r4
 8007e42:	2100      	movs	r1, #0
 8007e44:	f7fe f9f8 	bl	8006238 <memset>
 8007e48:	0028      	movs	r0, r5
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}

08007e4c <_free_r>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	0005      	movs	r5, r0
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d010      	beq.n	8007e76 <_free_r+0x2a>
 8007e54:	1f0c      	subs	r4, r1, #4
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da00      	bge.n	8007e5e <_free_r+0x12>
 8007e5c:	18e4      	adds	r4, r4, r3
 8007e5e:	0028      	movs	r0, r5
 8007e60:	f000 fa33 	bl	80082ca <__malloc_lock>
 8007e64:	4a1d      	ldr	r2, [pc, #116]	; (8007edc <_free_r+0x90>)
 8007e66:	6813      	ldr	r3, [r2, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d105      	bne.n	8007e78 <_free_r+0x2c>
 8007e6c:	6063      	str	r3, [r4, #4]
 8007e6e:	6014      	str	r4, [r2, #0]
 8007e70:	0028      	movs	r0, r5
 8007e72:	f000 fa2b 	bl	80082cc <__malloc_unlock>
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d909      	bls.n	8007e90 <_free_r+0x44>
 8007e7c:	6821      	ldr	r1, [r4, #0]
 8007e7e:	1860      	adds	r0, r4, r1
 8007e80:	4283      	cmp	r3, r0
 8007e82:	d1f3      	bne.n	8007e6c <_free_r+0x20>
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	1841      	adds	r1, r0, r1
 8007e8a:	6021      	str	r1, [r4, #0]
 8007e8c:	e7ee      	b.n	8007e6c <_free_r+0x20>
 8007e8e:	0013      	movs	r3, r2
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	d001      	beq.n	8007e9a <_free_r+0x4e>
 8007e96:	42a2      	cmp	r2, r4
 8007e98:	d9f9      	bls.n	8007e8e <_free_r+0x42>
 8007e9a:	6819      	ldr	r1, [r3, #0]
 8007e9c:	1858      	adds	r0, r3, r1
 8007e9e:	42a0      	cmp	r0, r4
 8007ea0:	d10b      	bne.n	8007eba <_free_r+0x6e>
 8007ea2:	6820      	ldr	r0, [r4, #0]
 8007ea4:	1809      	adds	r1, r1, r0
 8007ea6:	1858      	adds	r0, r3, r1
 8007ea8:	6019      	str	r1, [r3, #0]
 8007eaa:	4282      	cmp	r2, r0
 8007eac:	d1e0      	bne.n	8007e70 <_free_r+0x24>
 8007eae:	6810      	ldr	r0, [r2, #0]
 8007eb0:	6852      	ldr	r2, [r2, #4]
 8007eb2:	1841      	adds	r1, r0, r1
 8007eb4:	6019      	str	r1, [r3, #0]
 8007eb6:	605a      	str	r2, [r3, #4]
 8007eb8:	e7da      	b.n	8007e70 <_free_r+0x24>
 8007eba:	42a0      	cmp	r0, r4
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x78>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	e7d5      	b.n	8007e70 <_free_r+0x24>
 8007ec4:	6821      	ldr	r1, [r4, #0]
 8007ec6:	1860      	adds	r0, r4, r1
 8007ec8:	4282      	cmp	r2, r0
 8007eca:	d103      	bne.n	8007ed4 <_free_r+0x88>
 8007ecc:	6810      	ldr	r0, [r2, #0]
 8007ece:	6852      	ldr	r2, [r2, #4]
 8007ed0:	1841      	adds	r1, r0, r1
 8007ed2:	6021      	str	r1, [r4, #0]
 8007ed4:	6062      	str	r2, [r4, #4]
 8007ed6:	605c      	str	r4, [r3, #4]
 8007ed8:	e7ca      	b.n	8007e70 <_free_r+0x24>
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	200002c8 	.word	0x200002c8

08007ee0 <_malloc_r>:
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	b570      	push	{r4, r5, r6, lr}
 8007ee4:	1ccd      	adds	r5, r1, #3
 8007ee6:	439d      	bics	r5, r3
 8007ee8:	3508      	adds	r5, #8
 8007eea:	0006      	movs	r6, r0
 8007eec:	2d0c      	cmp	r5, #12
 8007eee:	d21e      	bcs.n	8007f2e <_malloc_r+0x4e>
 8007ef0:	250c      	movs	r5, #12
 8007ef2:	42a9      	cmp	r1, r5
 8007ef4:	d81d      	bhi.n	8007f32 <_malloc_r+0x52>
 8007ef6:	0030      	movs	r0, r6
 8007ef8:	f000 f9e7 	bl	80082ca <__malloc_lock>
 8007efc:	4a25      	ldr	r2, [pc, #148]	; (8007f94 <_malloc_r+0xb4>)
 8007efe:	6814      	ldr	r4, [r2, #0]
 8007f00:	0021      	movs	r1, r4
 8007f02:	2900      	cmp	r1, #0
 8007f04:	d119      	bne.n	8007f3a <_malloc_r+0x5a>
 8007f06:	4c24      	ldr	r4, [pc, #144]	; (8007f98 <_malloc_r+0xb8>)
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <_malloc_r+0x36>
 8007f0e:	0030      	movs	r0, r6
 8007f10:	f000 f9a4 	bl	800825c <_sbrk_r>
 8007f14:	6020      	str	r0, [r4, #0]
 8007f16:	0029      	movs	r1, r5
 8007f18:	0030      	movs	r0, r6
 8007f1a:	f000 f99f 	bl	800825c <_sbrk_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d12b      	bne.n	8007f7a <_malloc_r+0x9a>
 8007f22:	230c      	movs	r3, #12
 8007f24:	0030      	movs	r0, r6
 8007f26:	6033      	str	r3, [r6, #0]
 8007f28:	f000 f9d0 	bl	80082cc <__malloc_unlock>
 8007f2c:	e003      	b.n	8007f36 <_malloc_r+0x56>
 8007f2e:	2d00      	cmp	r5, #0
 8007f30:	dadf      	bge.n	8007ef2 <_malloc_r+0x12>
 8007f32:	230c      	movs	r3, #12
 8007f34:	6033      	str	r3, [r6, #0]
 8007f36:	2000      	movs	r0, #0
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
 8007f3a:	680b      	ldr	r3, [r1, #0]
 8007f3c:	1b5b      	subs	r3, r3, r5
 8007f3e:	d419      	bmi.n	8007f74 <_malloc_r+0x94>
 8007f40:	2b0b      	cmp	r3, #11
 8007f42:	d903      	bls.n	8007f4c <_malloc_r+0x6c>
 8007f44:	600b      	str	r3, [r1, #0]
 8007f46:	18cc      	adds	r4, r1, r3
 8007f48:	6025      	str	r5, [r4, #0]
 8007f4a:	e003      	b.n	8007f54 <_malloc_r+0x74>
 8007f4c:	684b      	ldr	r3, [r1, #4]
 8007f4e:	428c      	cmp	r4, r1
 8007f50:	d10d      	bne.n	8007f6e <_malloc_r+0x8e>
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	0030      	movs	r0, r6
 8007f56:	f000 f9b9 	bl	80082cc <__malloc_unlock>
 8007f5a:	0020      	movs	r0, r4
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	300b      	adds	r0, #11
 8007f60:	1d23      	adds	r3, r4, #4
 8007f62:	4390      	bics	r0, r2
 8007f64:	1ac3      	subs	r3, r0, r3
 8007f66:	d0e7      	beq.n	8007f38 <_malloc_r+0x58>
 8007f68:	425a      	negs	r2, r3
 8007f6a:	50e2      	str	r2, [r4, r3]
 8007f6c:	e7e4      	b.n	8007f38 <_malloc_r+0x58>
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	000c      	movs	r4, r1
 8007f72:	e7ef      	b.n	8007f54 <_malloc_r+0x74>
 8007f74:	000c      	movs	r4, r1
 8007f76:	6849      	ldr	r1, [r1, #4]
 8007f78:	e7c3      	b.n	8007f02 <_malloc_r+0x22>
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	1cc4      	adds	r4, r0, #3
 8007f7e:	439c      	bics	r4, r3
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d0e1      	beq.n	8007f48 <_malloc_r+0x68>
 8007f84:	1a21      	subs	r1, r4, r0
 8007f86:	0030      	movs	r0, r6
 8007f88:	f000 f968 	bl	800825c <_sbrk_r>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d1db      	bne.n	8007f48 <_malloc_r+0x68>
 8007f90:	e7c7      	b.n	8007f22 <_malloc_r+0x42>
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	200002c8 	.word	0x200002c8
 8007f98:	200002cc 	.word	0x200002cc

08007f9c <__ssputs_r>:
 8007f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f9e:	688e      	ldr	r6, [r1, #8]
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	0007      	movs	r7, r0
 8007fa4:	000c      	movs	r4, r1
 8007fa6:	9203      	str	r2, [sp, #12]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	429e      	cmp	r6, r3
 8007fac:	d83c      	bhi.n	8008028 <__ssputs_r+0x8c>
 8007fae:	2390      	movs	r3, #144	; 0x90
 8007fb0:	898a      	ldrh	r2, [r1, #12]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	421a      	tst	r2, r3
 8007fb6:	d034      	beq.n	8008022 <__ssputs_r+0x86>
 8007fb8:	2503      	movs	r5, #3
 8007fba:	6909      	ldr	r1, [r1, #16]
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	1a5b      	subs	r3, r3, r1
 8007fc0:	9302      	str	r3, [sp, #8]
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	9802      	ldr	r0, [sp, #8]
 8007fc6:	435d      	muls	r5, r3
 8007fc8:	0feb      	lsrs	r3, r5, #31
 8007fca:	195d      	adds	r5, r3, r5
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	106d      	asrs	r5, r5, #1
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	181b      	adds	r3, r3, r0
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	d900      	bls.n	8007fda <__ssputs_r+0x3e>
 8007fd8:	001d      	movs	r5, r3
 8007fda:	0553      	lsls	r3, r2, #21
 8007fdc:	d532      	bpl.n	8008044 <__ssputs_r+0xa8>
 8007fde:	0029      	movs	r1, r5
 8007fe0:	0038      	movs	r0, r7
 8007fe2:	f7ff ff7d 	bl	8007ee0 <_malloc_r>
 8007fe6:	1e06      	subs	r6, r0, #0
 8007fe8:	d109      	bne.n	8007ffe <__ssputs_r+0x62>
 8007fea:	230c      	movs	r3, #12
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	2340      	movs	r3, #64	; 0x40
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	89a2      	ldrh	r2, [r4, #12]
 8007ff4:	4240      	negs	r0, r0
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	b005      	add	sp, #20
 8007ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffe:	9a02      	ldr	r2, [sp, #8]
 8008000:	6921      	ldr	r1, [r4, #16]
 8008002:	f7ff fc26 	bl	8007852 <memcpy>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	4a14      	ldr	r2, [pc, #80]	; (800805c <__ssputs_r+0xc0>)
 800800a:	401a      	ands	r2, r3
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	4313      	orrs	r3, r2
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	9b02      	ldr	r3, [sp, #8]
 8008014:	6126      	str	r6, [r4, #16]
 8008016:	18f6      	adds	r6, r6, r3
 8008018:	6026      	str	r6, [r4, #0]
 800801a:	6165      	str	r5, [r4, #20]
 800801c:	9e01      	ldr	r6, [sp, #4]
 800801e:	1aed      	subs	r5, r5, r3
 8008020:	60a5      	str	r5, [r4, #8]
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	429e      	cmp	r6, r3
 8008026:	d900      	bls.n	800802a <__ssputs_r+0x8e>
 8008028:	9e01      	ldr	r6, [sp, #4]
 800802a:	0032      	movs	r2, r6
 800802c:	9903      	ldr	r1, [sp, #12]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	f000 f938 	bl	80082a4 <memmove>
 8008034:	68a3      	ldr	r3, [r4, #8]
 8008036:	2000      	movs	r0, #0
 8008038:	1b9b      	subs	r3, r3, r6
 800803a:	60a3      	str	r3, [r4, #8]
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	199e      	adds	r6, r3, r6
 8008040:	6026      	str	r6, [r4, #0]
 8008042:	e7da      	b.n	8007ffa <__ssputs_r+0x5e>
 8008044:	002a      	movs	r2, r5
 8008046:	0038      	movs	r0, r7
 8008048:	f000 f941 	bl	80082ce <_realloc_r>
 800804c:	1e06      	subs	r6, r0, #0
 800804e:	d1e0      	bne.n	8008012 <__ssputs_r+0x76>
 8008050:	6921      	ldr	r1, [r4, #16]
 8008052:	0038      	movs	r0, r7
 8008054:	f7ff fefa 	bl	8007e4c <_free_r>
 8008058:	e7c7      	b.n	8007fea <__ssputs_r+0x4e>
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	fffffb7f 	.word	0xfffffb7f

08008060 <_svfiprintf_r>:
 8008060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008062:	b0a1      	sub	sp, #132	; 0x84
 8008064:	9003      	str	r0, [sp, #12]
 8008066:	001d      	movs	r5, r3
 8008068:	898b      	ldrh	r3, [r1, #12]
 800806a:	000f      	movs	r7, r1
 800806c:	0016      	movs	r6, r2
 800806e:	061b      	lsls	r3, r3, #24
 8008070:	d511      	bpl.n	8008096 <_svfiprintf_r+0x36>
 8008072:	690b      	ldr	r3, [r1, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10e      	bne.n	8008096 <_svfiprintf_r+0x36>
 8008078:	2140      	movs	r1, #64	; 0x40
 800807a:	f7ff ff31 	bl	8007ee0 <_malloc_r>
 800807e:	6038      	str	r0, [r7, #0]
 8008080:	6138      	str	r0, [r7, #16]
 8008082:	2800      	cmp	r0, #0
 8008084:	d105      	bne.n	8008092 <_svfiprintf_r+0x32>
 8008086:	230c      	movs	r3, #12
 8008088:	9a03      	ldr	r2, [sp, #12]
 800808a:	3801      	subs	r0, #1
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	b021      	add	sp, #132	; 0x84
 8008090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008092:	2340      	movs	r3, #64	; 0x40
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	2300      	movs	r3, #0
 8008098:	ac08      	add	r4, sp, #32
 800809a:	6163      	str	r3, [r4, #20]
 800809c:	3320      	adds	r3, #32
 800809e:	7663      	strb	r3, [r4, #25]
 80080a0:	3310      	adds	r3, #16
 80080a2:	76a3      	strb	r3, [r4, #26]
 80080a4:	9507      	str	r5, [sp, #28]
 80080a6:	0035      	movs	r5, r6
 80080a8:	782b      	ldrb	r3, [r5, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <_svfiprintf_r+0x52>
 80080ae:	2b25      	cmp	r3, #37	; 0x25
 80080b0:	d146      	bne.n	8008140 <_svfiprintf_r+0xe0>
 80080b2:	1bab      	subs	r3, r5, r6
 80080b4:	9305      	str	r3, [sp, #20]
 80080b6:	d00c      	beq.n	80080d2 <_svfiprintf_r+0x72>
 80080b8:	0032      	movs	r2, r6
 80080ba:	0039      	movs	r1, r7
 80080bc:	9803      	ldr	r0, [sp, #12]
 80080be:	f7ff ff6d 	bl	8007f9c <__ssputs_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d100      	bne.n	80080c8 <_svfiprintf_r+0x68>
 80080c6:	e0ae      	b.n	8008226 <_svfiprintf_r+0x1c6>
 80080c8:	6962      	ldr	r2, [r4, #20]
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	4694      	mov	ip, r2
 80080ce:	4463      	add	r3, ip
 80080d0:	6163      	str	r3, [r4, #20]
 80080d2:	782b      	ldrb	r3, [r5, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d100      	bne.n	80080da <_svfiprintf_r+0x7a>
 80080d8:	e0a5      	b.n	8008226 <_svfiprintf_r+0x1c6>
 80080da:	2201      	movs	r2, #1
 80080dc:	2300      	movs	r3, #0
 80080de:	4252      	negs	r2, r2
 80080e0:	6062      	str	r2, [r4, #4]
 80080e2:	a904      	add	r1, sp, #16
 80080e4:	3254      	adds	r2, #84	; 0x54
 80080e6:	1852      	adds	r2, r2, r1
 80080e8:	1c6e      	adds	r6, r5, #1
 80080ea:	6023      	str	r3, [r4, #0]
 80080ec:	60e3      	str	r3, [r4, #12]
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	7013      	strb	r3, [r2, #0]
 80080f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80080f4:	7831      	ldrb	r1, [r6, #0]
 80080f6:	2205      	movs	r2, #5
 80080f8:	4853      	ldr	r0, [pc, #332]	; (8008248 <_svfiprintf_r+0x1e8>)
 80080fa:	f7ff fb9f 	bl	800783c <memchr>
 80080fe:	1c75      	adds	r5, r6, #1
 8008100:	2800      	cmp	r0, #0
 8008102:	d11f      	bne.n	8008144 <_svfiprintf_r+0xe4>
 8008104:	6822      	ldr	r2, [r4, #0]
 8008106:	06d3      	lsls	r3, r2, #27
 8008108:	d504      	bpl.n	8008114 <_svfiprintf_r+0xb4>
 800810a:	2353      	movs	r3, #83	; 0x53
 800810c:	a904      	add	r1, sp, #16
 800810e:	185b      	adds	r3, r3, r1
 8008110:	2120      	movs	r1, #32
 8008112:	7019      	strb	r1, [r3, #0]
 8008114:	0713      	lsls	r3, r2, #28
 8008116:	d504      	bpl.n	8008122 <_svfiprintf_r+0xc2>
 8008118:	2353      	movs	r3, #83	; 0x53
 800811a:	a904      	add	r1, sp, #16
 800811c:	185b      	adds	r3, r3, r1
 800811e:	212b      	movs	r1, #43	; 0x2b
 8008120:	7019      	strb	r1, [r3, #0]
 8008122:	7833      	ldrb	r3, [r6, #0]
 8008124:	2b2a      	cmp	r3, #42	; 0x2a
 8008126:	d016      	beq.n	8008156 <_svfiprintf_r+0xf6>
 8008128:	0035      	movs	r5, r6
 800812a:	2100      	movs	r1, #0
 800812c:	200a      	movs	r0, #10
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	782a      	ldrb	r2, [r5, #0]
 8008132:	1c6e      	adds	r6, r5, #1
 8008134:	3a30      	subs	r2, #48	; 0x30
 8008136:	2a09      	cmp	r2, #9
 8008138:	d94e      	bls.n	80081d8 <_svfiprintf_r+0x178>
 800813a:	2900      	cmp	r1, #0
 800813c:	d018      	beq.n	8008170 <_svfiprintf_r+0x110>
 800813e:	e010      	b.n	8008162 <_svfiprintf_r+0x102>
 8008140:	3501      	adds	r5, #1
 8008142:	e7b1      	b.n	80080a8 <_svfiprintf_r+0x48>
 8008144:	4b40      	ldr	r3, [pc, #256]	; (8008248 <_svfiprintf_r+0x1e8>)
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	2301      	movs	r3, #1
 800814c:	4083      	lsls	r3, r0
 800814e:	4313      	orrs	r3, r2
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	002e      	movs	r6, r5
 8008154:	e7ce      	b.n	80080f4 <_svfiprintf_r+0x94>
 8008156:	9b07      	ldr	r3, [sp, #28]
 8008158:	1d19      	adds	r1, r3, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	9107      	str	r1, [sp, #28]
 800815e:	2b00      	cmp	r3, #0
 8008160:	db01      	blt.n	8008166 <_svfiprintf_r+0x106>
 8008162:	930b      	str	r3, [sp, #44]	; 0x2c
 8008164:	e004      	b.n	8008170 <_svfiprintf_r+0x110>
 8008166:	425b      	negs	r3, r3
 8008168:	60e3      	str	r3, [r4, #12]
 800816a:	2302      	movs	r3, #2
 800816c:	4313      	orrs	r3, r2
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	782b      	ldrb	r3, [r5, #0]
 8008172:	2b2e      	cmp	r3, #46	; 0x2e
 8008174:	d10a      	bne.n	800818c <_svfiprintf_r+0x12c>
 8008176:	786b      	ldrb	r3, [r5, #1]
 8008178:	2b2a      	cmp	r3, #42	; 0x2a
 800817a:	d135      	bne.n	80081e8 <_svfiprintf_r+0x188>
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	3502      	adds	r5, #2
 8008180:	1d1a      	adds	r2, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9207      	str	r2, [sp, #28]
 8008186:	2b00      	cmp	r3, #0
 8008188:	db2b      	blt.n	80081e2 <_svfiprintf_r+0x182>
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	4e2f      	ldr	r6, [pc, #188]	; (800824c <_svfiprintf_r+0x1ec>)
 800818e:	7829      	ldrb	r1, [r5, #0]
 8008190:	2203      	movs	r2, #3
 8008192:	0030      	movs	r0, r6
 8008194:	f7ff fb52 	bl	800783c <memchr>
 8008198:	2800      	cmp	r0, #0
 800819a:	d006      	beq.n	80081aa <_svfiprintf_r+0x14a>
 800819c:	2340      	movs	r3, #64	; 0x40
 800819e:	1b80      	subs	r0, r0, r6
 80081a0:	4083      	lsls	r3, r0
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	3501      	adds	r5, #1
 80081a6:	4313      	orrs	r3, r2
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	7829      	ldrb	r1, [r5, #0]
 80081ac:	2206      	movs	r2, #6
 80081ae:	4828      	ldr	r0, [pc, #160]	; (8008250 <_svfiprintf_r+0x1f0>)
 80081b0:	1c6e      	adds	r6, r5, #1
 80081b2:	7621      	strb	r1, [r4, #24]
 80081b4:	f7ff fb42 	bl	800783c <memchr>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d03c      	beq.n	8008236 <_svfiprintf_r+0x1d6>
 80081bc:	4b25      	ldr	r3, [pc, #148]	; (8008254 <_svfiprintf_r+0x1f4>)
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d125      	bne.n	800820e <_svfiprintf_r+0x1ae>
 80081c2:	2207      	movs	r2, #7
 80081c4:	9b07      	ldr	r3, [sp, #28]
 80081c6:	3307      	adds	r3, #7
 80081c8:	4393      	bics	r3, r2
 80081ca:	3308      	adds	r3, #8
 80081cc:	9307      	str	r3, [sp, #28]
 80081ce:	6963      	ldr	r3, [r4, #20]
 80081d0:	9a04      	ldr	r2, [sp, #16]
 80081d2:	189b      	adds	r3, r3, r2
 80081d4:	6163      	str	r3, [r4, #20]
 80081d6:	e766      	b.n	80080a6 <_svfiprintf_r+0x46>
 80081d8:	4343      	muls	r3, r0
 80081da:	2101      	movs	r1, #1
 80081dc:	189b      	adds	r3, r3, r2
 80081de:	0035      	movs	r5, r6
 80081e0:	e7a6      	b.n	8008130 <_svfiprintf_r+0xd0>
 80081e2:	2301      	movs	r3, #1
 80081e4:	425b      	negs	r3, r3
 80081e6:	e7d0      	b.n	800818a <_svfiprintf_r+0x12a>
 80081e8:	2300      	movs	r3, #0
 80081ea:	200a      	movs	r0, #10
 80081ec:	001a      	movs	r2, r3
 80081ee:	3501      	adds	r5, #1
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	7829      	ldrb	r1, [r5, #0]
 80081f4:	1c6e      	adds	r6, r5, #1
 80081f6:	3930      	subs	r1, #48	; 0x30
 80081f8:	2909      	cmp	r1, #9
 80081fa:	d903      	bls.n	8008204 <_svfiprintf_r+0x1a4>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0c5      	beq.n	800818c <_svfiprintf_r+0x12c>
 8008200:	9209      	str	r2, [sp, #36]	; 0x24
 8008202:	e7c3      	b.n	800818c <_svfiprintf_r+0x12c>
 8008204:	4342      	muls	r2, r0
 8008206:	2301      	movs	r3, #1
 8008208:	1852      	adds	r2, r2, r1
 800820a:	0035      	movs	r5, r6
 800820c:	e7f1      	b.n	80081f2 <_svfiprintf_r+0x192>
 800820e:	ab07      	add	r3, sp, #28
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	003a      	movs	r2, r7
 8008214:	4b10      	ldr	r3, [pc, #64]	; (8008258 <_svfiprintf_r+0x1f8>)
 8008216:	0021      	movs	r1, r4
 8008218:	9803      	ldr	r0, [sp, #12]
 800821a:	f7fe f8b1 	bl	8006380 <_printf_float>
 800821e:	9004      	str	r0, [sp, #16]
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	3301      	adds	r3, #1
 8008224:	d1d3      	bne.n	80081ce <_svfiprintf_r+0x16e>
 8008226:	89bb      	ldrh	r3, [r7, #12]
 8008228:	980d      	ldr	r0, [sp, #52]	; 0x34
 800822a:	065b      	lsls	r3, r3, #25
 800822c:	d400      	bmi.n	8008230 <_svfiprintf_r+0x1d0>
 800822e:	e72e      	b.n	800808e <_svfiprintf_r+0x2e>
 8008230:	2001      	movs	r0, #1
 8008232:	4240      	negs	r0, r0
 8008234:	e72b      	b.n	800808e <_svfiprintf_r+0x2e>
 8008236:	ab07      	add	r3, sp, #28
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	003a      	movs	r2, r7
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <_svfiprintf_r+0x1f8>)
 800823e:	0021      	movs	r1, r4
 8008240:	9803      	ldr	r0, [sp, #12]
 8008242:	f7fe fb57 	bl	80068f4 <_printf_i>
 8008246:	e7ea      	b.n	800821e <_svfiprintf_r+0x1be>
 8008248:	08008574 	.word	0x08008574
 800824c:	0800857a 	.word	0x0800857a
 8008250:	0800857e 	.word	0x0800857e
 8008254:	08006381 	.word	0x08006381
 8008258:	08007f9d 	.word	0x08007f9d

0800825c <_sbrk_r>:
 800825c:	2300      	movs	r3, #0
 800825e:	b570      	push	{r4, r5, r6, lr}
 8008260:	4c06      	ldr	r4, [pc, #24]	; (800827c <_sbrk_r+0x20>)
 8008262:	0005      	movs	r5, r0
 8008264:	0008      	movs	r0, r1
 8008266:	6023      	str	r3, [r4, #0]
 8008268:	f7fb f902 	bl	8003470 <_sbrk>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d103      	bne.n	8008278 <_sbrk_r+0x1c>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d000      	beq.n	8008278 <_sbrk_r+0x1c>
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	20000450 	.word	0x20000450

08008280 <__ascii_mbtowc>:
 8008280:	b082      	sub	sp, #8
 8008282:	2900      	cmp	r1, #0
 8008284:	d100      	bne.n	8008288 <__ascii_mbtowc+0x8>
 8008286:	a901      	add	r1, sp, #4
 8008288:	1e10      	subs	r0, r2, #0
 800828a:	d006      	beq.n	800829a <__ascii_mbtowc+0x1a>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d006      	beq.n	800829e <__ascii_mbtowc+0x1e>
 8008290:	7813      	ldrb	r3, [r2, #0]
 8008292:	600b      	str	r3, [r1, #0]
 8008294:	7810      	ldrb	r0, [r2, #0]
 8008296:	1e43      	subs	r3, r0, #1
 8008298:	4198      	sbcs	r0, r3
 800829a:	b002      	add	sp, #8
 800829c:	4770      	bx	lr
 800829e:	2002      	movs	r0, #2
 80082a0:	4240      	negs	r0, r0
 80082a2:	e7fa      	b.n	800829a <__ascii_mbtowc+0x1a>

080082a4 <memmove>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	4288      	cmp	r0, r1
 80082a8:	d902      	bls.n	80082b0 <memmove+0xc>
 80082aa:	188b      	adds	r3, r1, r2
 80082ac:	4298      	cmp	r0, r3
 80082ae:	d303      	bcc.n	80082b8 <memmove+0x14>
 80082b0:	2300      	movs	r3, #0
 80082b2:	e007      	b.n	80082c4 <memmove+0x20>
 80082b4:	5c8b      	ldrb	r3, [r1, r2]
 80082b6:	5483      	strb	r3, [r0, r2]
 80082b8:	3a01      	subs	r2, #1
 80082ba:	d2fb      	bcs.n	80082b4 <memmove+0x10>
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	5ccc      	ldrb	r4, [r1, r3]
 80082c0:	54c4      	strb	r4, [r0, r3]
 80082c2:	3301      	adds	r3, #1
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d1fa      	bne.n	80082be <memmove+0x1a>
 80082c8:	e7f8      	b.n	80082bc <memmove+0x18>

080082ca <__malloc_lock>:
 80082ca:	4770      	bx	lr

080082cc <__malloc_unlock>:
 80082cc:	4770      	bx	lr

080082ce <_realloc_r>:
 80082ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d0:	0007      	movs	r7, r0
 80082d2:	000d      	movs	r5, r1
 80082d4:	0016      	movs	r6, r2
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d105      	bne.n	80082e6 <_realloc_r+0x18>
 80082da:	0011      	movs	r1, r2
 80082dc:	f7ff fe00 	bl	8007ee0 <_malloc_r>
 80082e0:	0004      	movs	r4, r0
 80082e2:	0020      	movs	r0, r4
 80082e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d103      	bne.n	80082f2 <_realloc_r+0x24>
 80082ea:	f7ff fdaf 	bl	8007e4c <_free_r>
 80082ee:	0034      	movs	r4, r6
 80082f0:	e7f7      	b.n	80082e2 <_realloc_r+0x14>
 80082f2:	f000 f81e 	bl	8008332 <_malloc_usable_size_r>
 80082f6:	002c      	movs	r4, r5
 80082f8:	42b0      	cmp	r0, r6
 80082fa:	d2f2      	bcs.n	80082e2 <_realloc_r+0x14>
 80082fc:	0031      	movs	r1, r6
 80082fe:	0038      	movs	r0, r7
 8008300:	f7ff fdee 	bl	8007ee0 <_malloc_r>
 8008304:	1e04      	subs	r4, r0, #0
 8008306:	d0ec      	beq.n	80082e2 <_realloc_r+0x14>
 8008308:	0029      	movs	r1, r5
 800830a:	0032      	movs	r2, r6
 800830c:	f7ff faa1 	bl	8007852 <memcpy>
 8008310:	0029      	movs	r1, r5
 8008312:	0038      	movs	r0, r7
 8008314:	f7ff fd9a 	bl	8007e4c <_free_r>
 8008318:	e7e3      	b.n	80082e2 <_realloc_r+0x14>

0800831a <__ascii_wctomb>:
 800831a:	1e0b      	subs	r3, r1, #0
 800831c:	d004      	beq.n	8008328 <__ascii_wctomb+0xe>
 800831e:	2aff      	cmp	r2, #255	; 0xff
 8008320:	d904      	bls.n	800832c <__ascii_wctomb+0x12>
 8008322:	238a      	movs	r3, #138	; 0x8a
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	3b8b      	subs	r3, #139	; 0x8b
 8008328:	0018      	movs	r0, r3
 800832a:	4770      	bx	lr
 800832c:	700a      	strb	r2, [r1, #0]
 800832e:	2301      	movs	r3, #1
 8008330:	e7fa      	b.n	8008328 <__ascii_wctomb+0xe>

08008332 <_malloc_usable_size_r>:
 8008332:	1f0b      	subs	r3, r1, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	1f18      	subs	r0, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	da01      	bge.n	8008340 <_malloc_usable_size_r+0xe>
 800833c:	580b      	ldr	r3, [r1, r0]
 800833e:	18c0      	adds	r0, r0, r3
 8008340:	4770      	bx	lr
	...

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
